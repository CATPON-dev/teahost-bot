# --- START OF FILE admin_handlers.py ---
import aiohttp
import math
import logging
import json
import os
import uuid
import sys
import asyncio
import subprocess
import time
import asyncssh
from datetime import datetime, date, timedelta
from html import escape
import uuid
from io import BytesIO
import shlex
import re
import secrets
import shutil
import pytz

from aiogram import Router, types, Bot, F, html
from aiogram.filters import Command, CommandObject, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest, TelegramNotFound, TelegramForbiddenError
from aiogram.types import InlineKeyboardButton, BufferedInputFile, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

import database as db
import system_manager as sm
import server_config
import keyboards as kb
import ban_manager
import session_checker
from filters import IsAdmin, IsSuperAdmin
from broadcaster import broadcast_message
from admin_manager import get_admin_ids, get_all_admins, add_admin, remove_admin
from config_manager import config
from constants import RESTART_INFO_FILE
from states import AdminTasks, AdminUserBotTransfer
from middlewares.error_handler import handle_error_page_callback
from middlewares import techwork as maintenance_manager
from channel_logger import log_to_channel, log_event


router = Router()

SESSION_CHECK_CACHE = {}
CACHE_TTL = 300
LOG_LINES_PER_PAGE = 25
ACTIVE_STATUS_LAST_REFRESH = 0

@router.message(F.text.regexp(r'^\/.*'), ~IsAdmin())
async def unauthorized_admin_command_attempt(message: types.Message, bot: Bot):
    user_info = f"{message.from_user.full_name} (@{message.from_user.username}, <code>{message.from_user.id}</code>)"
    log_text = (
        f"‚ö†Ô∏è <b>–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}\n"
        f"<b>–ö–æ–º–∞–Ω–¥–∞:</b> <code>{html.quote(message.text)}</code>"
    )
    await log_to_channel(bot, log_text)
    await message.reply("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())

router.callback_query.register(handle_error_page_callback, F.data.startswith("error_page:"))

TERMINAL_OUTPUT_CACHE = {}
TERMINAL_SESSIONS_ACTIVE = {}
MAX_CACHE_SIZE = 100
ACTIVE_PANEL_UPDATE_TASKS = {}


async def _get_geo_info(ip: str):
    fields = "status,message,country,regionName,city,org,timezone,hosting,query,countryCode,proxy,vpn"
    url = f"http://ip-api.com/json/{ip}?fields={fields}"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("status") == "success":
                        return data
                return None
    except Exception:
        return None

def _country_code_to_flag(code: str) -> str:
    if not code or len(code) != 2:
        return "üè≥Ô∏è"
    return "".join(chr(ord(char) + 127397) for char in code.upper())

@router.message(Command("obs"), IsSuperAdmin())
async def cmd_obs_all_servers(message: types.Message, bot: Bot):
    servers_to_service = {ip: details for ip, details in server_config.get_servers().items() if ip != sm.LOCAL_IP}
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º zip –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–¥ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º
    install_results = []
    for ip in servers_to_service:
        res = await sm.run_command_async("sudo apt-get update -qq && sudo apt-get install -y zip", ip, check_output=False)
        if res.get("success"):
            install_results.append(f"‚úÖ zip —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {ip}")
        else:
            install_results.append(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ zip –Ω–∞ {ip}: {res.get('error','')}")
    if install_results:
        await message.reply("\n".join(install_results))
    
    if not servers_to_service:
        await message.reply("–°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å.")
        return

    ips_to_process = list(servers_to_service.keys())
    msg = await message.reply(f"üöÄ <b>–ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è {len(ips_to_process)} —Å–µ—Ä–≤–µ—Ä–æ–≤...</b>\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.")

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    ### fix_tasks = [sm.fix_existing_users_tmp_access(ip) for ip in ips_to_process]
    ### await asyncio.gather(*fix_tasks)
    
    tasks = [sm.service_and_prepare_server(ip) for ip in ips_to_process]
    
    results = await asyncio.gather(*tasks)
    
    all_successful = True
    report_lines = []

    for ip, success in zip(ips_to_process, results):
        server_details = servers_to_service.get(ip, {})
        flag = server_details.get("flag", "üè≥Ô∏è")
        name = server_details.get("name", "Unknown")
        
        if success:
            status_icon = "‚úÖ"
            status_text = "–£—Å–ø–µ—à–Ω–æ"
        else:
            status_icon = "‚ùå"
            status_text = "–û—à–∏–±–∫–∞"
            all_successful = False
        
        report_lines.append(f"{status_icon} <b>{flag} {html.quote(name)}</b> (<code>{ip}</code>): {status_text}")

    summary_text = "‚úÖ <b>–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.</b>"
    if not all_successful:
        summary_text = "‚ö†Ô∏è <b>–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏.</b>"

    final_report = f"{summary_text}\n\n" + "\n".join(report_lines)
    
    await msg.edit_text(final_report)

def get_terminal_paginator(output_id: str, page: int, total_pages: int):
    builder = InlineKeyboardBuilder()
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚Äπ –ù–∞–∑–∞–¥", callback_data=f"term_page:{output_id}:{page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="noop"))

    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚Ä∫", callback_data=f"term_page:{output_id}:{page+1}"))
    
    builder.row(*nav_buttons)
    return builder.as_markup()

@router.callback_query(F.data.startswith("term_page:"))
async def terminal_page_callback(call: types.CallbackQuery):
    try:
        _, output_id, page_str = call.data.split(":")
        page = int(page_str)
    except (ValueError, IndexError):
        await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)
        return

    cached_data = TERMINAL_OUTPUT_CACHE.get(output_id)
    if not cached_data:
        await call.answer("–î–∞–Ω–Ω—ã–µ —ç—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫—ç—à–∞.", show_alert=True)
        try:
            await call.message.edit_text(f"{call.message.html_text}\n\n<i>(–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏)</i>", reply_markup=None)
        except TelegramBadRequest:
            pass
        return

    header, raw_chunks = cached_data
    total_pages = len(raw_chunks)

    if not (0 <= page < total_pages):
        await call.answer("–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
        return

    page_content = raw_chunks[page]
    
    new_text = f"{header}\n\n<blockquote>{html.quote(page_content)}</blockquote>"
    markup = get_terminal_paginator(output_id, page, total_pages)
    
    try:
        await call.message.edit_text(
            new_text, 
            reply_markup=markup,
            disable_web_page_preview=True
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logging.error(f"Error editing terminal page: {e}")
    finally:
        await call.answer()

def find_ip_by_code(code: str) -> str | None:
    servers = server_config.get_servers()
    for ip, details in servers.items():
        if details.get("code") and details.get("code").lower() == code.lower():
            return ip
    return None

@router.message(Command("terminal"), IsSuperAdmin())
async def cmd_terminal(message: types.Message, command: CommandObject):
    if not command.args:
        servers = server_config.get_servers()
        codes = [details.get("code") for details in servers.values() if details.get("code")]
        codes_str = ", ".join(f"<code>{c}</code>" for c in codes)
        help_text = (
            "<b>üñ•Ô∏è –¢–µ—Ä–º–∏–Ω–∞–ª ‚Äî –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö</b>\n\n"
            "<b>–§–æ—Ä–º–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n\n"
            "üîπ <b>–õ–æ–∫–∞–ª—å–Ω–æ:</b>\n"
            "   <code>/terminal [–∫–æ–º–∞–Ω–¥–∞]</code>\n"
            "   <i>(–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≥–¥–µ –∑–∞–ø—É—â–µ–Ω –±–æ—Ç)</i>\n\n"
            "üîπ <b>–ù–∞ –æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ:</b>\n"
            "   <code>/terminal [–∫–æ–¥] [–∫–æ–º–∞–Ω–¥–∞]</code>\n"
            "   <i>(–ü—Ä–∏–º–µ—Ä: <code>/terminal M1 ls -l</code>)</i>\n\n"
            "üîπ <b>–ù–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö:</b>\n"
            "   <code>/terminal all [–∫–æ–º–∞–Ω–¥–∞]</code>\n"
            "   <i>(–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ –≤—Å–µ—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–∞—Ö)</i>\n\n"
            f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã —Å–µ—Ä–≤–µ—Ä–æ–≤:</b> {codes_str}"
        )
        await message.reply(help_text)
        return

    args = command.args.split(maxsplit=1)
    
    if args[0].lower() == 'all':
        if len(args) < 2:
            await message.reply("<b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/terminal all [–∫–æ–º–∞–Ω–¥–∞]</code>")
            return

        cmd_str = args[1]
        msg = await message.reply(f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é <code>{html.quote(cmd_str)}</code> –Ω–∞ –≤—Å–µ—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö...")
        
        servers = server_config.get_servers()
        remote_servers = {ip: details for ip, details in servers.items() if ip != sm.LOCAL_IP}

        if not remote_servers:
            await msg.edit_text("‚ùå –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
            return

        tasks = [sm.run_command_async(cmd_str, ip) for ip in remote_servers.keys()]
        results = await asyncio.gather(*tasks)

        report_lines = [f"<b>üöÄ –ü–∞–∫–µ—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n<pre><code>{html.quote(cmd_str)}</code></pre>\n"]
        success_count = 0
        fail_count = 0

        for server_details, result in zip(remote_servers.values(), results):
            flag = server_details.get("flag", "üè≥Ô∏è")
            name = server_details.get("name", "Unknown")
            code = server_details.get("code", "N/A")
            
            server_report_part = f"\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n<b>{flag} {name} ({code})</b>"

            if result.get("success"):
                success_count += 1
                server_report_part += "\n–°—Ç–∞—Ç—É—Å: ‚úÖ –£—Å–ø–µ—à–Ω–æ"
                output_message = html.quote(result.get('output', '')).strip()
                if output_message:
                    server_report_part += f"\n<pre><code>{output_message}</code></pre>"
                else:
                    server_report_part += "\n<i>(–Ω–µ—Ç –≤—ã–≤–æ–¥–∞)</i>"
            else:
                fail_count += 1
                exit_code = result.get('exit_status', 'N/A')
                server_report_part += f"\n–°—Ç–∞—Ç—É—Å: ‚ùå –û—à–∏–±–∫–∞ (–ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {exit_code})"
                error_message = html.quote(result.get('error') or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏.")
                server_report_part += f"\n<pre><code>{error_message}</code></pre>"
            
            report_lines.append(server_report_part)
        
        summary = f"\n\n<b>–ò—Ç–æ–≥: {success_count} ‚úÖ | {fail_count} ‚ùå</b>"
        final_report = "".join(report_lines) + summary
        
        if len(final_report) > 4096:
            report_file = BufferedInputFile(final_report.encode('utf-8'), filename="terminal_all_report.html")
            await msg.delete()
            await message.answer_document(report_file, caption="–û—Ç—á–µ—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö.")
        else:
            await msg.edit_text(final_report)
        return

    target_ip = None
    cmd_str = ""

    potential_code = args[0]
    ip_from_code = find_ip_by_code(potential_code)

    if len(args) == 2 and ip_from_code:
        target_ip = ip_from_code
        cmd_str = args[1]
    else:
        target_ip = sm.LOCAL_IP
        cmd_str = command.args

    msg = await message.reply(f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ <code>{target_ip}</code>...")
    res = await sm.run_command_async(cmd_str, target_ip, timeout=600)
    
    output = res.get('output', '')
    error = res.get('error', '')
    exit_code = res.get('exit_status', 'N/A')

    header = (
        f"<b>‚å®Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ <code>{html.quote(cmd_str)}</code></b>\n"
        f"<i>–ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {exit_code}</i>"
    )
    
    content_parts = []
    if output:
        content_parts.append(f"üìº Stdout:\n<blockquote>{html.quote(output)}</blockquote>")
    if error:
        content_parts.append(f"üìº Stderr:\n<blockquote>{html.quote(error)}</blockquote>")
    
    if content_parts:
        full_text = f"{header}\n\n" + "\n\n".join(content_parts)
    else:
        full_text = f"{header}\n\n<i>(–ù–µ—Ç –≤—ã–≤–æ–¥–∞)</i>"

    if len(full_text) > 4096:
        await msg.delete()
        output_id = uuid.uuid4().hex
        
        raw_output_content = []
        if output:
            raw_output_content.append(f"üìº Stdout:\n{output}")
        if error:
            raw_output_content.append(f"\nüìº Stderr:\n{error}")
        
        raw_content_to_paginate = "\n".join(raw_output_content)

        available_space = 4096 - len(header) - len("<blockquote></blockquote>") - 20
        
        chunks = [raw_content_to_paginate[i:i + available_space] for i in range(0, len(raw_content_to_paginate), available_space)]
        
        if len(TERMINAL_OUTPUT_CACHE) >= MAX_CACHE_SIZE:
            TERMINAL_OUTPUT_CACHE.pop(next(iter(TERMINAL_OUTPUT_CACHE)))
        
        TERMINAL_OUTPUT_CACHE[output_id] = (header, chunks)
        
        text_to_send = f"{header}\n\n<blockquote>{html.quote(chunks[0])}</blockquote>"
        markup = get_terminal_paginator(output_id, 0, len(chunks))
        
        await message.answer(
            text_to_send, 
            reply_markup=markup,
            disable_web_page_preview=True
        )
    else:
        await msg.edit_text(
            full_text,
            disable_web_page_preview=True
        )

@router.message(Command("serv"), IsSuperAdmin())
async def cmd_serv_manager(message: types.Message, command: CommandObject, bot: Bot):
    if not command.args:
        await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/serv help</code> –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
        return

    args = command.args.split()
    action = args[0].lower()
    admin_data = {"id": message.from_user.id, "full_name": message.from_user.full_name}
    servers = server_config.get_servers()

    if action == "help":
        help_text = (
            "<b>‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏:</b>\n\n"
            "<code>/serv list</code>\n"
            "<i>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –∏—Ö –∫–æ–¥–∞–º–∏.</i>\n\n"
            "<code>/serv add [IP] [user] [pass]</code>\n"
            "<i>–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä.</i>\n\n"
            "<code>/serv del [–∫–æ–¥]</code>\n"
            "<i>–£–¥–∞–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.</i>\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:</b>\n"
            "<code>/serv [–∫–æ–¥] neofetch</code>\n"
            "<i>–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Å–≤–æ–¥–∫—É –æ —Å–∏—Å—Ç–µ–º–µ.</i>\n\n"
            "<code>/serv [–∫–æ–¥] status [—Å—Ç–∞—Ç—É—Å]</code>\n"
            "<i>–°—Ç–∞—Ç—É—Å—ã: <code>true</code>, <code>false</code>, <code>noub</code>, <code>test</code>.</i>\n\n"
            "<code>/serv [–∫–æ–¥] setslot [—á–∏—Å–ª–æ]</code>\n"
            "<i>–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç —Å–ª–æ—Ç–æ–≤.</i>\n\n"
            "<code>/serv [–∫–æ–¥] ubs [–¥–µ–π—Å—Ç–≤–∏–µ]</code>\n"
            "<i>–ú–∞—Å—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–∞–º–∏ (<code>start</code>, <code>stop</code>, <code>restart</code>).</i>\n\n"
            "<code>/serv [–∫–æ–¥] reboot</code>\n"
            "<i>–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.</i>"
        )
        await message.reply(help_text)
        return

    if action == "list":
        if not servers:
            await message.reply("–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—É—Å—Ç.")
            return
        
        text_parts = ["<b>üìã –°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:</b>\n"]
        for i, (ip, details) in enumerate(servers.items(), 1):
            country = details.get('country', 'N/A')
            city = details.get('city', 'N/A')
            name = details.get('name', 'N/A')
            code = details.get('code', 'N/A')
            text_parts.append(f"{i}. <code>{ip}</code> (<b>–∫–æ–¥:</b> <code>{code}</code>) - {name}, {country}, {city}")
        await message.reply("\n".join(text_parts))
        return

    if action == "add":
        if len(args) != 4:
            await message.reply(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/serv add [IP] [user] [password]</code>")
            return
        
        _, ip, user, password = args
        if ip in servers:
            await message.reply(f"‚ùå –°–µ—Ä–≤–µ—Ä <code>{ip}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        msg = await message.reply(f"‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å <code>{ip}</code>...")
        
        temp_servers_to_test = servers.copy()
        temp_servers_to_test[ip] = {"ssh_user": user, "ssh_pass": password}
        server_config._save_servers(temp_servers_to_test)
        
        test_res = await sm.run_command_async("echo 'connection_ok'", ip)
        
        server_config._save_servers(servers)

        if not test_res.get("success"):
            await msg.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n<pre>{html.quote(test_res.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))}</pre>")
            return
            
        await msg.edit_text(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ...")

        max_num = sum(1 for s in servers.values() if s.get('name', '').startswith('serv'))
        new_name = f"serv{max_num + 1}"
        geo_info = await _get_geo_info(ip)
        details = { "name": new_name }

        if geo_info:
            details.update({
                "country": geo_info.get("country", "Unknown"), "city": geo_info.get("city", "Unknown"),
                "regionName": geo_info.get("regionName", "N/A"), "flag": _country_code_to_flag(geo_info.get("countryCode", "")),
                "org": geo_info.get("org", "N/A"), "timezone": geo_info.get("timezone", "N/A"),
                "hosting": geo_info.get("hosting", False), "proxy": geo_info.get("proxy", False), "vpn": geo_info.get("vpn", False),
            })
            city_char = details["city"][0].upper() if details["city"] != "Unknown" and details["city"] else "S"
            count = sum(1 for s in servers.values() if s.get('code', '').startswith(city_char))
            details["code"] = f"{city_char}{count + 1}"

        new_password = await sm.add_server_with_security(ip, user, password, details)
        if isinstance(new_password, str) and new_password:
            await msg.edit_text(f"‚úÖ –°–µ—Ä–≤–µ—Ä <b>{new_name}</b> (<code>{ip}</code>) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n\n"
                              "‚è≥ <b>–ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ...</b> –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
            # --- –°–º–µ–Ω–∞ hostname –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ ---
            await msg.reply("‚è≥ –ú–µ–Ω—è—é hostname –Ω–∞ 'sharkhost'...")
            set_hostname_res = await sm.run_command_async("sudo hostnamectl set-hostname sharkhost", ip, ssh_pass=new_password)
            if set_hostname_res.get("success"):
                await msg.reply("‚úÖ Hostname —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ 'sharkhost'.")
            else:
                await msg.reply(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å hostname.\n<pre>{set_hostname_res.get('error','')}</pre>")
            asyncio.create_task(sm.service_and_prepare_server(ip, bot, message.chat.id, ssh_pass=new_password))
        else:
            await msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä <code>{ip}</code>.")
        return

    if action == "del":
        if len(args) != 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/serv del [–∫–æ–¥]</code>")
            return
        server_code_to_del = args[1]
        ip_to_del = find_ip_by_code(server_code_to_del)
        if not ip_to_del:
            await message.reply(f"‚ùå –°–µ—Ä–≤–µ—Ä —Å –∫–æ–¥–æ–º <code>{html.quote(server_code_to_del)}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if server_config.delete_server(ip_to_del):
            await message.reply(f"‚úÖ –°–µ—Ä–≤–µ—Ä <code>{ip_to_del}</code> (–∫–æ–¥ {server_code_to_del}) —É–¥–∞–ª–µ–Ω.")
        else:
            await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä <code>{ip_to_del}</code> –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return
        
    if len(args) < 2 and len(args) != 1:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/serv help</code>.")
        return

    server_code = args[0]
    target_ip = find_ip_by_code(server_code)
    
    if not target_ip:
        await message.reply(f"–°–µ—Ä–≤–µ—Ä —Å –∫–æ–¥–æ–º <code>{server_code}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/serv list</code>.")
        return

    sub_action = args[1].lower() if len(args) > 1 else 'neofetch'

    if sub_action == "neofetch":
        msg = await message.reply(f"‚è≥ –ü–æ–ª—É—á–∞—é —Å–∏—Å—Ç–µ–º–Ω—É—é —Å–≤–æ–¥–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞ {server_code}...")
        res = await sm.run_command_async("neofetch --stdout", target_ip)
        if res.get("success"):
            await msg.edit_text(f"<b>–°–∏—Å—Ç–µ–º–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è {server_code}:</b>\n<pre>{html.quote(res['output'])}</pre>")
        else:
            await msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å neofetch: <pre>{html.quote(res.get('error', '...'))}</pre>")
        return

    if sub_action == "ubs":
        if len(args) != 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/serv [–∫–æ–¥] ubs [start|stop|restart]</code>")
            return
        ub_action = args[2].lower()
        if ub_action not in ["start", "stop", "restart"]:
            await message.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –î–æ—Å—Ç—É–ø–Ω–æ: start, stop, restart.")
            return
        
        userbots = await db.get_userbots_by_server_ip(target_ip)
        if not userbots:
            await message.reply(f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ <code>{target_ip}</code> –Ω–µ—Ç —é–∑–µ—Ä–±–æ—Ç–æ–≤.")
            return

        msg = await message.reply(f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é '<b>{ub_action}</b>' –¥–ª—è {len(userbots)} —é–∑–µ—Ä–±–æ—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ <code>{target_ip}</code>...")
        tasks = [sm.manage_ub_service(ub['ub_username'], ub_action, target_ip) for ub in userbots]
        results = await asyncio.gather(*tasks)
        report = [f"<b>–û—Ç—á–µ—Ç –¥–ª—è <code>{target_ip}</code> ({server_code}):</b>"]
        for ub, res in zip(userbots, results):
            status = "‚úÖ" if res["success"] else "‚ùå"
            report.append(f" {status} <code>{ub['ub_username']}</code>")
        await msg.edit_text("\n".join(report))

    elif sub_action == "reboot":
        await message.reply(f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä <code>{target_ip}</code> ({server_code})?",
            reply_markup=kb.get_confirm_reboot_keyboard(target_ip))

    elif sub_action == "setslot":
        if len(args) != 3:
            await message.reply(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/serv [–∫–æ–¥] setslot [—á–∏—Å–ª–æ]</code>")
            return
        try:
            slots = int(args[2])
            if slots < 0: raise ValueError
            if server_config.update_server_slots(target_ip, slots):
                await message.reply(f"‚úÖ –î–ª—è —Å–µ—Ä–≤–µ—Ä–∞ <code>{server_code}</code> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ <b>{slots}</b> —Å–ª–æ—Ç–æ–≤.")
                log_data = { "admin_data": admin_data, "server_info": {"ip": target_ip, "code": server_code}, "details": f"—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤: {slots}" }
                await log_event(bot, "server_settings_changed", log_data)
            else:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤.")
        except ValueError:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
   
    elif sub_action == "auth":
        if len(args) != 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/serv [–∫–æ–¥] auth [auto|port]</code>")
            return
        auth_mode = args[2].lower()
        if auth_mode not in ["auto", "port"]:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ: <code>auto</code>, <code>port</code>.")
            return

        if server_config.update_server_auth_mode(target_ip, auth_mode):
            mode_description = "–ø–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –≤ –ª–æ–≥–∞—Ö" if auth_mode == "auto" else "—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç –¥–ª—è WebUI"
            await message.reply(f"‚úÖ –†–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ <code>{server_code}</code> –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{auth_mode}</b> ({mode_description}).")
            log_data = { "admin_data": admin_data, "server_info": {"ip": target_ip, "code": server_code}, "details": f"—Ä–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{auth_mode}'" }
            await log_event(bot, "server_settings_changed", log_data)
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
    
    elif sub_action == "status":
        if len(args) != 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/serv [–∫–æ–¥] status [true|false|noub|test]</code>")
            return
        status_value = args[2].lower()
        if status_value not in ["true", "false", "noub", "test"]:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ—Å—Ç—É–ø–Ω—ã–µ: true, false, noub, test.")
            return
        if server_config.update_server_status(target_ip, status_value):
            await message.reply(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ <code>{server_code}</code> –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ <b>{status_value}</b>.")
            log_data = { "admin_data": admin_data, "server_info": {"ip": target_ip, "code": server_code}, "details": f"—Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status_value}'" }
            await log_event(bot, "server_settings_changed", log_data)
            if status_value == "false":
                userbots = await db.get_userbots_by_server_ip(target_ip)
                tasks = [sm.manage_ub_service(ub['ub_username'], 'stop', target_ip) for ub in userbots]
                for task in tasks:
                    asyncio.create_task(task)
        else:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞.")
    else:
        await message.reply(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '<code>{sub_action}</code>'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/serv help</code>.")
        
def create_progress_bar(percent_str: str, length: int = 10) -> str:
    try:
        percent = float(str(percent_str).replace('%',''))
        filled_length = int(length * percent / 100)
        bar = '‚ñà' * filled_length + '‚ñë' * (length - filled_length)
        return f"[{bar}] {percent:.1f}%"
    except (ValueError, TypeError):
        return f"[{'?' * length}] N/A"

async def _get_full_server_info_text(stats_map, servers_to_display: list):
    text_parts = ["üñ•Ô∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º:</b>\n"]

    for ip, details in servers_to_display:
        stats = stats_map.get(ip, {})
        ub_count = len(await db.get_userbots_by_server_ip(ip))

        cpu_usage = stats.get('cpu_usage', '0')
        cpu_cores = stats.get('cpu_cores', '?')
        ram_percent = stats.get('ram_percent', '0')
        ram_used = stats.get('ram_used', 'N/A')
        ram_total = stats.get('ram_total', 'N/A')
        disk_percent = stats.get('disk_percent', '0%')
        disk_used = stats.get('disk_used', 'N/A')
        disk_total = stats.get('disk_total', 'N/A')
        uptime = stats.get('uptime', 'N/A')
        
        cpu_bar = create_progress_bar(cpu_usage)
        ram_bar = create_progress_bar(ram_percent)
        disk_bar = create_progress_bar(disk_percent)

        server_block = (
            f"\n‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n"
            f"<blockquote>"
            f"<b>{details.get('flag', 'üè≥Ô∏è')} {html.quote(details.get('name', 'Unknown'))}</b> (–ö–æ–¥: <code>{details.get('code', 'N/A')}</code>)\n"
            f"‚îú <b>–õ–æ–∫–∞—Ü–∏—è:</b> {details.get('country', 'N/A')}, {details.get('city', 'N/A')}\n"
            f"‚îú <b>–ü—Ä–æ–≤–∞–π–¥–µ—Ä:</b> {details.get('org', 'N/A')}\n"
            f"‚îú <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
            f"‚îÇ  ‚îú‚îÄ CPU: {cpu_cores} —è–¥–µ—Ä\n"
            f"‚îÇ  ‚îú‚îÄ RAM: {ram_total}\n"
            f"‚îÇ  ‚îî‚îÄ Disk: {disk_total}\n"
            f"‚îú <b>–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:</b>\n"
            f"‚îÇ  ‚îú‚îÄ CPU: {cpu_bar} {cpu_usage}%\n"
            f"‚îÇ  ‚îú‚îÄ RAM: {ram_bar} ({ram_used}/{ram_total})\n"
            f"‚îÇ  ‚îî‚îÄ Disk: {disk_bar} ({disk_used}/{disk_total})\n"
            f"‚îú <b>Uptime:</b> {uptime}\n"
            f"‚îî <b>–Æ–∑–µ—Ä–±–æ—Ç—ã:</b> {ub_count} —à—Ç."
            f"</blockquote>"
        )
        text_parts.append(server_block)
        
    return "".join(text_parts)

async def auto_update_server_info_panel(bot: Bot, chat_id: int, message_id: int):
    while True:
        await asyncio.sleep(180)
        try:
            info_text, _ = await _get_server_info_content()

            await bot.edit_message_text(
                text=info_text,
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=kb.get_server_info_keyboard()
            )
        except TelegramBadRequest as e:
            if "message to edit not found" in str(e).lower() or "message can't be edited" in str(e).lower():
                logging.warning(f"Message {message_id} in chat {chat_id} for auto-update not found. Stopping task.")
                if chat_id in ACTIVE_PANEL_UPDATE_TASKS:
                    del ACTIVE_PANEL_UPDATE_TASKS[chat_id]
                break 
            elif "message is not modified" not in str(e).lower():
                logging.error(f"Error auto-updating server info panel: {e}")
        except Exception as e:
            logging.error(f"Unexpected error in auto-update task: {e}", exc_info=True)


async def start_or_reset_update_task(bot: Bot, chat_id: int, message_id: int):
    if chat_id in ACTIVE_PANEL_UPDATE_TASKS:
        ACTIVE_PANEL_UPDATE_TASKS[chat_id].cancel()
        logging.info(f"Cancelled previous update task for chat {chat_id}")
    
    task = asyncio.create_task(auto_update_server_info_panel(bot, chat_id, message_id))
    ACTIVE_PANEL_UPDATE_TASKS[chat_id] = task
    logging.info(f"Started new auto-update task for chat {chat_id}, message {message_id}")

async def _get_server_info_content():
    servers = server_config.get_servers()
    
    remote_servers = [(ip, details) for ip, details in servers.items() if ip != sm.LOCAL_IP]
    
    if not remote_servers:
        return "–°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—É—Å—Ç.", None

    stats_tasks = [sm.get_server_stats(ip) for ip, _ in remote_servers]
    all_stats = await asyncio.gather(*stats_tasks)
    stats_map = dict(zip([ip for ip, _ in remote_servers], all_stats))

    info_text = await _get_full_server_info_text(stats_map, remote_servers)
    
    markup = kb.get_server_info_keyboard()
    
    return info_text, markup

@router.message(Command("serverinfo"))
async def cmd_server_info(message: types.Message, bot: Bot):
    msg = await message.reply("‚è≥ –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    info_text, markup = await _get_server_info_content()

    if "–ø—É—Å—Ç" in info_text:
        await msg.edit_text(info_text)
        return

    sent_message = await msg.edit_text(
        text=info_text,
        reply_markup=markup
    )
    
    await start_or_reset_update_task(bot, sent_message.chat.id, sent_message.message_id)


@router.callback_query(F.data == "refresh_server_info")
async def refresh_server_info_handler(call: types.CallbackQuery, bot: Bot):
    await call.answer("–û–±–Ω–æ–≤–ª—è—é...")
    
    info_text, markup = await _get_server_info_content()

    try:
        await call.message.edit_text(
            text=info_text,
            reply_markup=markup
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
             logging.error(f"Failed to edit message text on refresh: {e}")

    await start_or_reset_update_task(bot, call.message.chat.id, call.message.message_id)

@router.message(Command("restart"), IsSuperAdmin())
async def cmd_restart_bot(message: types.Message):
    try:
        msg = await message.reply("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å...")

        restart_info = {"chat_id": msg.chat.id, "message_id": msg.message_id}
        with open(RESTART_INFO_FILE, "w") as f:
            json.dump(restart_info, f)
        
        await asyncio.sleep(1)

        os.execv(sys.executable, [sys.executable] + sys.argv)

    except Exception as e:
        logging.error(f"Failed to execute restart: {e}")
        try:
            await msg.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. –û—à–∏–±–∫–∞: {e}")
        except:
            pass

@router.message(Command("stop"), IsSuperAdmin())
async def cmd_stop_bot(message: types.Message):
    await message.reply("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å.")
    loop = asyncio.get_running_loop()
    loop.stop()

@router.message(Command("server"))
async def cmd_server_toggle(message: types.Message, command: CommandObject, bot: Bot):
    arg = command.args.lower() if command.args else None
    current_status_is_on = not maintenance_manager.is_maintenance_mode()
    admin_data = {"id": message.from_user.id, "full_name": message.from_user.full_name}

    if arg == "on":
        if not current_status_is_on:
            maintenance_manager.set_maintenance_mode(False)
            await message.reply("‚úÖ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            await log_event(bot, "maintenance_mode_off", {"admin_data": admin_data})
        else:
            await message.reply("‚úÖ –ë–æ—Ç —É–∂–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω.")
    elif arg == "off":
        if current_status_is_on:
            maintenance_manager.set_maintenance_mode(True)
            await message.reply("‚öôÔ∏è –ë–æ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Ä–µ–∂–∏–º —Ç–µ—Ö. —Ä–∞–±–æ—Ç.")
            await log_event(bot, "maintenance_mode_on", {"admin_data": admin_data})
        else:
            await message.reply("‚öôÔ∏è –ë–æ—Ç —É–∂–µ –±—ã–ª –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Ö. —Ä–∞–±–æ—Ç.")
    else:
        status = "–í–∫–ª—é—á–µ–Ω ‚úÖ" if current_status_is_on else "–í—ã–∫–ª—é—á–µ–Ω (—Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã) ‚öôÔ∏è"
        await message.reply(
            f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {status}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/server [on|off]</code>"
        )

@router.message(Command("remote"))
async def cmd_remote_control(message: types.Message, command: CommandObject):
    if not command.args or len(command.args.split()) != 2:
        await message.reply(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/remote [ID|–∏–º—è_—é–∑–µ—Ä–±–æ—Ç–∞] [on|off|restart]</code>")
        return
    target, action_str = command.args.split()
    action = action_str.lower()
    action_map = {"on": "start", "off": "stop", "restart": "restart"}
    if action not in action_map:
        await message.reply("–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'on', 'off' –∏–ª–∏ 'restart'.")
        return
    system_action = action_map[action]
    
    ub_data_list = []
    if target.isdigit():
        user_id = int(target)
        userbots_data = await db.get_userbots_by_tg_id(user_id)
        if not userbots_data:
            await message.reply(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —é–∑–µ—Ä–±–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID <code>{user_id}</code>.")
            return
        ub_data_list = userbots_data
    else:
        ub_data = await db.get_userbot_data(ub_username=target)
        if not ub_data:
            await message.reply(f"–Æ–∑–µ—Ä–±–æ—Ç <code>{html.quote(target)}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        ub_data_list.append(ub_data)

    await message.reply(f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ '<b>{action}</b>' –¥–ª—è {len(ub_data_list)} —é–∑–µ—Ä–±–æ—Ç–∞(–æ–≤)...")
    
    tasks = [sm.manage_ub_service(ub['ub_username'], system_action, ub['server_ip']) for ub in ub_data_list]
    results = await asyncio.gather(*tasks)

    success_list = [ub_data_list[i]['ub_username'] for i, res in enumerate(results) if res["success"]]
    error_list = [ub_data_list[i]['ub_username'] for i, res in enumerate(results) if not res["success"]]

    response = ""
    if success_list:
        response += f"<b>‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–ª—è:</b>\n" + "\n".join([f"  - <code>{html.quote(ub)}</code>" for ub in success_list])
    if error_list:
        response += f"\n\n<b>‚ùå –û—à–∏–±–∫–∞ –¥–ª—è:</b>\n" + "\n".join([f"  - <code>{html.quote(ub)}</code>" for ub in error_list])
    await message.reply(response or "–ù–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ.")

# –í —Ñ–∞–π–ª–µ admin_handlers.py

@router.message(Command("ahelp"))
async def cmd_ahelp(message: types.Message):
    text = (
        "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:</b>\n"
        "<code>/ban [ID|@|–∏–º—è]</code> - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "<code>/unban [ID|@|–∏–º—è]</code> - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "<code>/users</code> - –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "<code>/user [ID|@|–∏–º—è ub]</code> - –ò–Ω—Ñ–æ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n"
        "<code>/server [on|off]</code> - –í–∫–ª/–≤—ã–∫–ª –±–æ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö.\n"
        "<code>/restart</code> - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.\n"
        "<code>/stop</code> - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.\n\n"

        "<b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b>\n"
        "<code>/update [—Ç–µ–∫—Å—Ç]</code> - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–º–º–∏—Ç –≤ –∫–∞–Ω–∞–ª.\n"
        "<code>/commits</code> - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–∏—Ç–æ–≤.\n"
        "<code>/git [view|change] fox [URL]</code> - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º–∏.\n"
        "<code>/backup_bot</code> - –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞.\n\n"

        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ (–•–æ—Å—Ç–∞–º–∏):</b>\n"
        "<code>/serv help</code> - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏.\n"
        "<code>/serverinfo</code> - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º.\n"
        "<code>/obs</code> - –ü–æ–ª–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.\n"
        "<code>/cpu_ub</code> - –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU –ø–æ —é–∑–µ—Ä–±–æ—Ç–∞–º.\n"
        "<code>/terminal [–∫–æ–¥] [–∫–æ–º–∞–Ω–¥–∞]</code> - –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n\n"
        
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–∞–º–∏:</b>\n"
        "<code>/ub [–∏–º—è]</code> - –ò–Ω—Ñ–æ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —é–∑–µ—Ä–±–æ—Ç–æ–º.\n"
        "<code>/remote [ID|–∏–º—è] [on|off|restart]</code> - –ú–∞—Å—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UB.\n"
        "<code>/delub [–∏–º—è]</code> - –£–¥–∞–ª–µ–Ω–∏–µ UB —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–∏—á–∏–Ω—ã.\n"
        "<code>/check</code> - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Å—Å–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö.\n\n"
        
        "<b>–†–∞—Å—Å—ã–ª–∫–∏ –∏ —Å–≤—è–∑—å:</b>\n"
        "<code>/bc [ID|@]</code> - –†–∞—Å—Å—ã–ª–∫–∞ (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ).\n"
        "<code>/stats</code> - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É.\n"
    )
    await message.reply(text, disable_web_page_preview=True)

@router.message(Command("check"), IsAdmin())
async def cmd_check_sessions(message: types.Message):
    msg = await message.reply("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Å—Å–∏–∏ –Ω–∞ –≤—Å–µ—Ö —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö...")
    try:
        server_results = await session_checker.check_all_remote_sessions()
        
        # –ö–µ—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        cached_data = {
            "data": server_results,
            "timestamp": time.time(),
            "reports": {
                "has_session": {},
                "no_session": {}
            }
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —Ä–µ–∂–∏–º–æ–≤
        await msg.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤...")
        
        for view_mode in ["has_session", "no_session"]:
            for page in range(10):  # –ú–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–∞–Ω–∏—Ü
                try:
                    report, total_pages = await session_checker.format_session_check_report(server_results, view_mode, page=page)
                    if total_pages <= page:  # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                        break
                    cached_data["reports"][view_mode][page] = {
                        "report": report,
                        "total_pages": total_pages
                    }
                except Exception as e:
                    logging.error(f"Error generating report for {view_mode} page {page}: {e}")
                    break
        
        SESSION_CHECK_CACHE[msg.chat.id] = cached_data
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        first_page_data = cached_data["reports"]["has_session"][0]
        markup = kb.get_session_check_keyboard("has_session", page=0, total_pages=first_page_data["total_pages"])
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logging.info(f"Report length: {len(first_page_data['report'])}, Total pages: {first_page_data['total_pages']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(first_page_data["report"]) > 3000:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
            report_file = BufferedInputFile(first_page_data["report"].encode('utf-8'), filename="session_check_report.txt")
            await msg.delete()
            await message.answer_document(report_file, caption="üìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–π (—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è)")
        else:
            try:
                await msg.edit_text(text=first_page_data["report"], reply_markup=markup)
            except TelegramBadRequest as e:
                if "can't parse entities" in str(e):
                    logging.error(f"HTML parsing error in /check: {e}")
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
                    clean_report = first_page_data["report"].replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '').replace('<code>', '').replace('</code>', '').replace('<blockquote>', '').replace('</blockquote>', '')
                    await msg.edit_text(text=clean_report, reply_markup=markup)
                else:
                    raise e
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è /check: {e}", exc_info=True)
        await msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

@router.callback_query(F.data.startswith("check_view_toggle:"))
async def check_view_toggle_handler(call: types.CallbackQuery):
    await call.answer()
    cached_data = SESSION_CHECK_CACHE.get(call.message.chat.id)
    if not cached_data or time.time() - cached_data["timestamp"] > CACHE_TTL:
        await call.message.edit_text("–î–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /check —Å–Ω–æ–≤–∞.", reply_markup=None)
        return
    
    new_view_mode = call.data.split(":")[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    if "reports" in cached_data and new_view_mode in cached_data["reports"] and 0 in cached_data["reports"][new_view_mode]:
        page_data = cached_data["reports"][new_view_mode][0]
        report = page_data["report"]
        total_pages = page_data["total_pages"]
        markup = kb.get_session_check_keyboard(new_view_mode, page=0, total_pages=total_pages)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(report) > 3000:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
            report_file = BufferedInputFile(report.encode('utf-8'), filename="session_check_report.txt")
            await call.message.delete()
            await call.message.answer_document(report_file, caption="üìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–π (—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è)")
        else:
            try:
                await call.message.edit_text(text=report, reply_markup=markup)
            except TelegramBadRequest as e:
                if "message is not modified" in str(e):
                    await call.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ /check: {e}")
                    await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
    else:
        # –ï—Å–ª–∏ –∫–µ—à–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ (fallback)
        server_results = cached_data["data"]
        report, total_pages = await session_checker.format_session_check_report(server_results, new_view_mode, page=0)
        markup = kb.get_session_check_keyboard(new_view_mode, page=0, total_pages=total_pages)
        
        try:
            await call.message.edit_text(text=report, reply_markup=markup)
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await call.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ /check: {e}")
                await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

@router.callback_query(F.data == "no_action")
async def no_action_handler(call: types.CallbackQuery):
    await call.answer()

@router.callback_query(F.data.startswith("check_page:"))
async def check_page_handler(call: types.CallbackQuery):
    await call.answer()
    cached_data = SESSION_CHECK_CACHE.get(call.message.chat.id)
    if not cached_data or time.time() - cached_data["timestamp"] > CACHE_TTL:
        await call.message.edit_text("–î–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /check —Å–Ω–æ–≤–∞.", reply_markup=None)
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    parts = call.data.split(":")
    view_mode = parts[1]
    page = int(parts[2])
    
    logging.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page} –¥–ª—è —Ä–µ–∂–∏–º–∞ {view_mode}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    if "reports" in cached_data and view_mode in cached_data["reports"] and page in cached_data["reports"][view_mode]:
        page_data = cached_data["reports"][view_mode][page]
        report = page_data["report"]
        total_pages = page_data["total_pages"]
        markup = kb.get_session_check_keyboard(view_mode, page=page, total_pages=total_pages)
        
        logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª–∏–Ω–æ–π {len(report)}, –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}")
        
        try:
            await call.message.edit_text(text=report, reply_markup=markup)
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await call.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–∞ /check: {e}")
                await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
    else:
        # –ï—Å–ª–∏ –∫–µ—à–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ (fallback)
        server_results = cached_data["data"]
        report, total_pages = await session_checker.format_session_check_report(server_results, view_mode, page=page)
        markup = kb.get_session_check_keyboard(view_mode, page=page, total_pages=total_pages)
        
        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç—á–µ—Ç –¥–ª–∏–Ω–æ–π {len(report)}, –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}")
        
        try:
            await call.message.edit_text(text=report, reply_markup=markup)
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}")
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await call.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–∞ /check: {e}")
                await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

@router.callback_query(F.data == "refresh_session_check")
async def refresh_session_check_handler(call: types.CallbackQuery):
    cached_data = SESSION_CHECK_CACHE.get(call.message.chat.id)
    now = time.time()
    if cached_data and now - cached_data["timestamp"] < 5:
        await call.answer("–û–±–Ω–æ–≤–ª—è—Ç—å –º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥!", show_alert=True)
        return
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    current_view_mode = "has_session"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if call.message.reply_markup:
        for row in call.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data == "check_view_toggle:no_session":
                    current_view_mode = "has_session"
                    break
                elif button.callback_data == "check_view_toggle:has_session":
                    current_view_mode = "no_session"
                    break
    try:
        await call.answer("–û–±–Ω–æ–≤–ª—è—é...")
        server_results = await session_checker.check_all_remote_sessions()
        SESSION_CHECK_CACHE[call.message.chat.id] = {
            "data": server_results,
            "timestamp": now
        }
        report, total_pages = await session_checker.format_session_check_report(server_results, current_view_mode, page=0)
        markup = kb.get_session_check_keyboard(current_view_mode, page=0, total_pages=total_pages)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(report) > 3000:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
            report_file = BufferedInputFile(report.encode('utf-8'), filename="session_check_report.txt")
            await call.message.delete()
            await call.message.answer_document(report_file, caption="üìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–π (—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è)")
        else:
            await call.message.edit_text(text=report, reply_markup=markup)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await call.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ /check: {e}")
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)

@router.message(Command("bc"))
async def cmd_broadcast(message: types.Message, command: CommandObject, bot: Bot):
    replied_message = message.reply_to_message
    if not replied_message:
        await message.reply(
            "<b>‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.</b>\n\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π <code>/bc</code> –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            "–î–ª—è —Ü–µ–ª–µ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: <code>/bc [ID –∏–ª–∏ @username]</code>.\n"
            "–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º: <code>/bc [–∫–æ–¥1] [–∫–æ–¥2] ...</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>/bc M2 M3</code>)"
        )
        return

    users_to_notify = set()
    is_targeted = False
    target_identifier = "–≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    server_codes = set()
    servers = server_config.get_servers()

    if command.args:
        args = command.args.strip().split()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–¥—ã —Å–µ—Ä–≤–µ—Ä–æ–≤
        for arg in args:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, M2, A1 –∏ —Ç.–¥.)
            for ip, details in servers.items():
                if details.get("code", "").lower() == arg.lower():
                    server_codes.add(arg.upper())
                    break
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ - –¥–µ–ª–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –Ω–∏–º
        if server_codes:
            is_targeted = True
            target_identifier = ", ".join(server_codes)
            # –ü–æ–ª—É—á–∞–µ–º IP –ø–æ –∫–æ–¥—É
            ips = [ip for ip, details in servers.items() if details.get("code", "").upper() in server_codes]
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–±–æ—Ç–æ–≤ –Ω–∞ —ç—Ç–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
            all_owners = set()
            for ip in ips:
                userbots = await db.get_userbots_by_server_ip(ip)
                for ub in userbots:
                    all_owners.add(ub['tg_user_id'])
            users_to_notify = all_owners
            if not users_to_notify:
                await message.reply(f"‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —é–∑–µ—Ä–±–æ—Ç–∞–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö: {target_identifier}")
                return
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ (ID –∏–ª–∏ username)
            is_targeted = True
            target_identifier = command.args.strip()
            target_user_data = await db.get_user_by_username_or_id(target_identifier)
            if target_user_data:
                users_to_notify.add(target_user_data['tg_user_id'])
            else:
                await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{html.quote(target_identifier)}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
    else:
        # –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º
        users_to_notify = set(await db.get_all_bot_users())

    if not users_to_notify:
        await message.reply("–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    status_text = (
        f"–ù–∞—á–∏–Ω–∞—é —Ü–µ–ª–µ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è <b>{html.quote(target_identifier)}</b>..."
        if is_targeted else "–ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É..."
    )
    msg = await message.reply(text=status_text, reply_markup=kb.get_loading_keyboard())
    
    result = await broadcast_message(
        bot=bot,
        users=list(users_to_notify),
        from_chat_id=replied_message.chat.id,
        message_id=replied_message.message_id
    )
    
    final_status = (
        "‚úÖ –¶–µ–ª–µ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞." if is_targeted else "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>"
    )
    await msg.edit_text(
        f"{final_status}\n\n"
        f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {result['sent']}\n"
        f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å:</b> {result['failed']}"
    )

async def send_ub_info_panel(bot: Bot, chat_id: int, ub_username: str, message_id: int = None, topic_id: int = None):
    ub_data = await db.get_userbot_data(ub_username=ub_username)
    if not ub_data:
        text = f"‚ùå –Æ–∑–µ—Ä–±–æ—Ç <code>{html.quote(ub_username)}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω."
        if message_id:
            await bot.edit_message_text(text=text, chat_id=chat_id, message_id=message_id, reply_markup=None)
        else:
            await bot.send_message(chat_id=chat_id, text=text, message_thread_id=topic_id)
        return
    
    owner_id = ub_data['tg_user_id']
    owner_data = await db.get_user_data(owner_id)
    server_ip = ub_data['server_ip']
    
    server_details = server_config.get_servers().get(server_ip, {})
    server_code = server_details.get("code", "N/A")
    server_display = f"<code>{server_ip}</code> (<b>{server_code}</b>)"
    
    owner_info = "<i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</i>"
    try:
        owner = await bot.get_chat(chat_id=owner_id)
        owner_info = f"@{owner.username}" if owner.username else owner.full_name
    except (TelegramNotFound, TelegramBadRequest):
        owner_info = f"ID: {owner_id}"
    
    is_active = await sm.is_service_active(f"hikka-{ub_username}.service", server_ip)
    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üî¥ –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
    is_blocked = bool(ub_data.get('blocked', 0))
    block_status_text = "üö´ <b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>" if is_blocked else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
    note = owner_data.get('note') if owner_data else None
    
    text = (
        f"ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–æ–º:</b> <code>{html.quote(ub_username)}</code>\n"
        f"üìç <b>–°–µ—Ä–≤–µ—Ä:</b> {server_display}\n"
        f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {html.quote(owner_info)}\n"
        f"üîß <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:</b> {status_text}\n"
        f"‚öñÔ∏è <b>–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞:</b> {block_status_text}"
    )
    
    if note:
        text += f"\nüìù <b>–ó–∞–º–µ—Ç–∫–∞:</b> {html.quote(note)}"

    markup = kb.get_ub_info_keyboard(is_active, ub_username, is_blocked)
    
    if message_id:
        try:
            await bot.edit_message_text(text=text, chat_id=chat_id, message_id=message_id, reply_markup=markup)
        except TelegramBadRequest:
            pass
    else:
        await bot.send_message(chat_id=chat_id, text=text, reply_markup=markup, message_thread_id=topic_id)
        
@router.message(Command("ub"))
async def cmd_ub_info(message: types.Message, command: CommandObject, bot: Bot):
    arg = command.args
    if not arg:
        await message.reply(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/ub [–∏–º—è_—é–∑–µ—Ä–±–æ—Ç–∞]</code>")
        return
    
    chat_id = message.chat.id
    topic_id = message.message_thread_id
    
    await send_ub_info_panel(bot=bot, chat_id=chat_id, ub_username=arg, topic_id=topic_id)

@router.callback_query(F.data.startswith("add_note_start:"))
async def cq_add_note_start(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    
    ub_data = await db.get_userbot_data(ub_username=ub_username)
    if not ub_data:
        await call.answer("‚ùå –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    await state.set_state(AdminTasks.WaitingForNote)
    await state.update_data(ub_username=ub_username, message_id=call.message.message_id, owner_id=ub_data['tg_user_id'])

    await call.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. \n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>-</code> (–º–∏–Ω—É—Å).",
        reply_markup=kb.get_cancel_note_keyboard(ub_username)
    )
    await call.answer()

@router.callback_query(F.data.startswith("cancel_add_note:"), StateFilter(AdminTasks.WaitingForNote))
async def cq_cancel_add_note(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    ub_username = data.get("ub_username")
    
    await state.clear()
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await send_ub_info_panel(bot=call.bot, chat_id=call.message.chat.id, ub_username=ub_username, message_id=call.message.message_id)

@router.message(StateFilter(AdminTasks.WaitingForNote))
async def process_note_text(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    ub_username = data.get("ub_username")
    message_id = data.get("message_id")
    owner_id = data.get("owner_id")

    await message.delete()

    note_text = message.text
    if note_text == "-":
        await db.set_user_note(owner_id, None)
        status_text = "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞."
    else:
        await db.set_user_note(owner_id, note_text)
        status_text = "‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."

    await state.clear()

    await bot.edit_message_text(
        text=status_text,
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=kb.get_back_to_ub_panel_keyboard(ub_username)
    )

@router.callback_query(F.data.startswith("toggle_block_ub:"))
async def toggle_block_ub_handler(call: types.CallbackQuery, bot: Bot):
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
    _, ub_username, block_action_str = call.data.split(":")
    block_action = bool(int(block_action_str))
    
    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data:
        await call.answer("–Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.", show_alert=True)
        return
    server_ip = ub_data['server_ip']
    
    if await db.block_userbot(ub_username, block_action):
        await call.answer("–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        action = "stop" if block_action else "start"
        await sm.manage_ub_service(ub_username, action, server_ip)
    else:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î.", show_alert=True)
    
    await send_ub_info_panel(bot=bot, chat_id=call.message.chat.id, ub_username=ub_username, message_id=call.message.message_id)

@router.callback_query(F.data.startswith("manage_ub_info:"))
async def manage_ub_from_info_panel(call: types.CallbackQuery, bot: Bot):
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
    action, ub_username = call.data.split(":")[1:]
    
    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data:
        await call.answer("–Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.", show_alert=True)
        return
    server_ip = ub_data['server_ip']

    res = await sm.manage_ub_service(ub_username, action, server_ip)
    if not res["success"]:
        await call.answer(f"‚ùå –û—à–∏–±–∫–∞: {res.get('message', '...')}", show_alert=True)
    
    await asyncio.sleep(1)
    await send_ub_info_panel(bot=bot, chat_id=call.message.chat.id, ub_username=ub_username, message_id=call.message.message_id)

@router.callback_query(F.data.startswith("choose_log_type:"))
async def choose_log_type_handler(call: types.CallbackQuery):
    ub_username = call.data.split(":")[1]
    ub_data = await db.get_userbot_data(ub_username)
    owner_id = ub_data.get('tg_user_id') if ub_data else None
    text = f"üìú <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤ –¥–ª—è</b> <code>{html.quote(ub_username)}</code>:"
    markup = kb.get_log_type_choice_keyboard(ub_username, owner_id)
    await call.message.edit_text(text=text, reply_markup=markup)

@router.callback_query(F.data.startswith("show_logs:"))
async def show_logs_handler(call: types.CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
    parts = call.data.split(":")
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (4 –∏–ª–∏ 5+ —á–∞—Å—Ç–µ–π)
    # show_logs:log_type:ub_username:page –∏–ª–∏ show_logs:log_type:ub_username:owner_id:page
    if len(parts) == 4:
        _, log_type, ub_username, page_str = parts
        page = int(page_str)
        # –ü–æ–ª—É—á–∞–µ–º owner_id –∏–∑ –±–∞–∑—ã
        ub_data = await db.get_userbot_data(ub_username)
        owner_id = ub_data.get('tg_user_id') if ub_data else None
    elif len(parts) >= 5:
        _, log_type, ub_username, owner_id, page_str = parts[:5]
        page = int(page_str)
    else:
        await call.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data.", show_alert=True)
        return
    
    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data:
        await call.answer("–Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.", show_alert=True)
        return
    server_ip, hikka_path, ub_type = ub_data['server_ip'], ub_data.get('hikka_path'), ub_data.get('ub_type')
    
    log_titles = {"systemd": "Systemd", "logfile": "Log File"}
    log_title = log_titles.get(log_type, "Unknown")
    logs = None

    if log_type == "systemd":
        logs = await sm.get_journal_logs(ub_username, server_ip)
    elif log_type == "logfile":
        if hikka_path and ub_type:
            logs = await sm.get_script_log_file(hikka_path, ub_type, server_ip)
        else:
            await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∏–ª–∏ —Ç–∏–ø —é–∑–µ—Ä–±–æ—Ç–∞ –≤ –ë–î.", show_alert=True)
            return
            
    if not logs:
        await call.answer(f"–õ–æ–≥–∏ —Ç–∏–ø–∞ '{log_title}' –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç—ã –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await choose_log_type_handler(call)
        return

    CHUNK_SIZE = 4000
    escaped_logs = html.quote(logs)
    log_chunks = [escaped_logs[i:i + CHUNK_SIZE] for i in range(0, len(escaped_logs), CHUNK_SIZE)]
    total_pages = len(log_chunks)

    if not (1 <= page <= total_pages):
        await call.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
        return
        
    page_content = log_chunks[page - 1]

    text = (f"üìú <b>–õ–æ–≥–∏ ({log_title}) –¥–ª—è <code>{html.quote(ub_username)}</code> (–°—Ç—Ä. {page}/{total_pages})</b>\n\n"
            f"<pre>{page_content}</pre>")
    markup = kb.get_logs_paginator_keyboard(log_type, ub_username, page, total_pages, owner_id)
    
    try:
        await call.message.edit_text(text=text, reply_markup=markup)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            await call.answer()
        else:
            try:
                from aiogram.types import BufferedInputFile
                log_file = BufferedInputFile(logs.encode('utf-8'), filename=f"{ub_username}_{log_type}.log")
                await call.message.answer_document(log_file, caption=f"–õ–æ–≥–∏ –¥–ª—è {ub_username} —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            except Exception as doc_e:
                await call.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_e}", show_alert=True)

@router.callback_query(F.data.startswith("back_to_ub_info:"))
async def back_to_ub_info_handler(call: types.CallbackQuery, bot: Bot):
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
    ub_username = call.data.split(":")[1]
    await send_ub_info_panel(bot=bot, chat_id=call.message.chat.id, ub_username=ub_username, message_id=call.message.message_id)

REASON_TEMPLATES = {
    "no_reason": "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã",
    "inactive": "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—é–∑–µ—Ä–±–æ—Ç –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–æ—Ç)",
    "abuse": "–ó–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º / –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è",
    "tos_violation": "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è",
    "multiaccount": "–ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —é–∑–µ—Ä–±–æ—Ç–æ–≤)",
    "cpu_load": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU",
    "ram_load": "–ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ RAM",
    "spam_activity": "–†–∞—Å—Å—ã–ª–∫–∞ —Å–ø–∞–º–∞ / –ñ–∞–ª–æ–±—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    "phishing": "–§–∏—à–∏–Ω–≥ / –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    "owner_request": "–ü–æ –ø—Ä–æ—Å—å–±–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞",
    "forbidden_content": "–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
    "technical_work": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
}

@router.message(Command("delub"), IsAdmin())
async def cmd_delub(message: types.Message, command: CommandObject, bot: Bot):
    if not command.args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/delub [–∏–º—è_—é–∑–µ—Ä–±–æ—Ç–∞]</code> –∏–ª–∏ <code>/delub [–∏–º—è_—é–∑–µ—Ä–±–æ—Ç–∞] -f [ip]</code>")
        return

    args = command.args.split()
    ub_name = args[0]
    force = False
    server_ip = None
    if len(args) >= 3 and args[1] == "-f":
        force = True
        server_ip = args[2]
    elif len(args) == 2 and args[1] == "-f":
        force = True
        await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ IP —Å–µ—Ä–≤–µ—Ä–∞: <code>/delub [–∏–º—è] -f [ip]</code>")
        return

    if force:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –ë–î
        await message.reply(f"üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è—é <code>{html.quote(ub_name)}</code> –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ <code>{html.quote(server_ip)}</code>...")
        res = await sm.delete_userbot_full(ub_name, server_ip)
        if res["success"]:
            await message.reply(f"‚úÖ –Æ–∑–µ—Ä–±–æ—Ç <code>{html.quote(ub_name)}</code> –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞ <code>{html.quote(server_ip)}</code>.")
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ <code>{html.quote(ub_name)}</code>: {res.get('message', '...')}")
        return

    if not await db.get_userbot_data(ub_username=ub_name):
        await message.reply(f"‚ùå –Æ–∑–µ—Ä–±–æ—Ç <code>{html.quote(ub_name)}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —é–∑–µ—Ä–±–æ—Ç–∞ <code>{html.quote(ub_name)}</code>:"
    markup = kb.get_delub_reason_keyboard(ub_name, REASON_TEMPLATES)
    await message.reply(text, reply_markup=markup)

@router.callback_query(F.data == "delub_close_menu")
async def cq_delub_close_menu(call: types.CallbackQuery):
    await call.message.delete()
    await call.answer()

@router.callback_query(F.data.startswith("delub_confirm:"))
async def cq_delub_reason_selected(call: types.CallbackQuery):
    _, ub_username, reason_code = call.data.split(":")
    reason_text = REASON_TEMPLATES.get(reason_code, "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")

    text = (
        f"<b>‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"<b>–Æ–∑–µ—Ä–±–æ—Ç:</b> <code>{html.quote(ub_username)}</code>\n"
        f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {html.quote(reason_text)}\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
    )
    markup = kb.get_delub_final_confirm_keyboard(ub_username, reason_code)
    await call.message.edit_text(text, reply_markup=markup)
    await call.answer()

@router.callback_query(F.data.startswith("delub_cancel:"))
async def cq_delub_cancel(call: types.CallbackQuery):
    ub_username = call.data.split(":")[1]
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —é–∑–µ—Ä–±–æ—Ç–∞ <code>{html.quote(ub_username)}</code>:"
    markup = kb.get_delub_reason_keyboard(ub_username, REASON_TEMPLATES)
    await call.message.edit_text(text, reply_markup=markup)
    await call.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@router.callback_query(F.data.startswith("delub_execute:"))
async def cq_delub_execute(call: types.CallbackQuery, bot: Bot):
    _, ub_username, reason_code = call.data.split(":")
    reason_text = REASON_TEMPLATES.get(reason_code, "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
    
    await call.message.edit_text(f"üóëÔ∏è –£–¥–∞–ª—è—é <code>{html.quote(ub_username)}</code>...", reply_markup=None)
    
    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data:
        await call.message.edit_text("‚ùå –Æ–∑–µ—Ä–±–æ—Ç —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        return
        
    owner_id = ub_data.get('tg_user_id')
    server_ip = ub_data.get('server_ip')
    
    res = await sm.delete_userbot_full(ub_username, server_ip)
    
    if res["success"]:
        await call.message.edit_text(f"‚úÖ –Æ–∑–µ—Ä–±–æ—Ç <code>{html.quote(ub_username)}</code> –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω.")
        
        admin_data = {"id": call.from_user.id, "full_name": call.from_user.full_name}
        owner_data = {"id": owner_id}
        try:
            owner_chat = await bot.get_chat(owner_id)
            owner_data["full_name"] = owner_chat.full_name
        except Exception:
            pass
            
        server_details = server_config.get_servers().get(server_ip, {})
        
        log_data = {
            "admin_data": admin_data,
            "user_data": owner_data,
            "ub_info": {"name": ub_username},
            "server_info": {"ip": server_ip, "code": server_details.get("code", "N/A")},
            "reason": reason_text
        }
        await log_event(bot, "deletion_by_admin", log_data)

        if owner_id and reason_code != "no_reason":
            try:
                await bot.send_message(
                    chat_id=owner_id,
                    text=f"‚ÄºÔ∏è <b>–í–∞—à —é–∑–µ—Ä–±–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>\n\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {html.quote(reason_text)}"
                )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {owner_id} –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ UB: {e}")
    else:
        await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ <code>{html.quote(ub_username)}</code>: {res.get('message', '...')}")
        
async def _get_sorted_user_list(bot: Bot):
    all_registered_users = await db.get_all_registered_users()
    
    users_with_active_bot = []
    users_with_inactive_bot = []
    users_without_bot = []
    
    all_userbots = await db.get_all_userbots_full_info()

    services_by_ip = {}
    for ub in all_userbots:
        ip = ub.get('server_ip')
        if ip:
            if ip not in services_by_ip:
                services_by_ip[ip] = []
            service_name = f"hikka-{ub['ub_username']}.service"
            services_by_ip[ip].append(service_name)
           
    batch_tasks = [
        sm.get_batch_service_statuses(names, ip)
        for ip, names in services_by_ip.items()
    ]
    batch_results = await asyncio.gather(*batch_tasks)
    
    active_statuses = {}
    for result_dict in batch_results:
        for service_name, is_active in result_dict.items():
            ub_username = service_name.replace("hikka-", "").replace(".service", "")
            active_statuses[ub_username] = is_active
            
    for user in all_registered_users:
        user_bots = [ub for ub in all_userbots if ub.get('tg_user_id') == user.get('tg_user_id')]

        if not user_bots:
            users_without_bot.append(user)
            continue
        
        main_bot = user_bots[0]
        is_active = active_statuses.get(main_bot['ub_username'], False)
        
        user['userbot_info'] = main_bot
        
        if is_active:
            users_with_active_bot.append(user)
        else:
            users_with_inactive_bot.append(user)
            
    return users_with_active_bot + users_with_inactive_bot + users_without_bot

async def build_users_page_text(users_data: list, bot: Bot):
    if not users_data:
        return "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        
    text_parts = []
    servers_info = server_config.get_servers()

    for user_data in users_data:
        user_id = user_data['tg_user_id']
        
        user_display = None
        try:
            user_chat_info = await bot.get_chat(chat_id=user_id)
            user_display = f"@{user_chat_info.username}" if user_chat_info.username else user_chat_info.full_name
        except (TelegramNotFound, TelegramBadRequest):
            if user_data:
                user_display = user_data.get('full_name') or (f"@{user_data['username']}" if user_data.get('username') else None)

        if not user_display:
            user_display = f"ID: {user_id}"

        user_block = [f"üë§ <b>{html.quote(user_display)}</b> (<code>{user_id}</code>)"]
        
        ub_info = user_data.get('userbot_info')
        if ub_info:
            ub_username = ub_info['ub_username']
            ub_type = ub_info.get('ub_type', 'N/A').capitalize()
            
            server_details = servers_info.get(ub_info['server_ip'], {})
            server_flag = server_details.get("flag", "üè≥Ô∏è")
            server_name = server_details.get("name", ub_info['server_ip'])
            
            is_active = await sm.is_service_active(f"hikka-{ub_username}.service", ub_info['server_ip'])
            status_emoji = "üü¢" if is_active else "üî¥"
            
            user_block.append(f"   ‚îú‚îÄ ü§ñ <code>{html.quote(ub_username)}</code> ({ub_type}) –Ω–∞ {server_flag} {html.quote(server_name)} {status_emoji}")
        else:
            user_block.append("   ‚îî‚îÄ ü§ñ –ù–µ—Ç —é–∑–µ—Ä–±–æ—Ç–æ–≤")

        note = user_data.get('note')
        if note:
            user_block.append(f"   ‚îî‚îÄ üìù: <i>{html.quote(note)}</i>")

        text_parts.append("\n".join(user_block))
    return "\n\n".join(text_parts)

async def _get_paginated_users_text_and_markup(bot: Bot, view_mode: str, page: int):
    page_size = 5
    header = ""
    
    if view_mode == "visible":
        user_list = await _get_sorted_user_list(bot)
        header = "<b>üë• –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
    else:
        user_list = await db.get_all_unregistered_users()
        header = "<b>üëª –°–ø–∏—Å–æ–∫ —Å–∫—Ä—ã—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–µ –ø—Ä–∏–Ω—è–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ)</b>\n\n"
        
    total_pages = max(1, (len(user_list) + page_size - 1) // page_size)
    page = min(page, total_pages)
    
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    users_on_page = user_list[start_index:end_index]
    
    text = await build_users_page_text(users_on_page, bot)
    markup = kb.get_user_list_paginator(page, total_pages, view_mode)
    
    full_text = f"{header}<i>(–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages})</i>\n\n{text}"
    
    return full_text, markup

@router.message(Command("users"))
async def cmd_users_list(message: types.Message, bot: Bot):
    msg = await message.reply("‚è≥ –ì–æ—Ç–æ–≤–ª—é —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    text, markup = await _get_paginated_users_text_and_markup(bot, view_mode="visible", page=1)
    await msg.edit_text(text=text, reply_markup=markup)

@router.callback_query(F.data.startswith("user_page:"))
async def user_list_paginator_handler(call: types.CallbackQuery, bot: Bot):
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
    _, view_mode, page_str = call.data.split(':')
    page = int(page_str)
    text, markup = await _get_paginated_users_text_and_markup(bot, view_mode=view_mode, page=page)
    try:
        await call.message.edit_text(text=text, reply_markup=markup)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            raise e
    finally:
        await call.answer()

@router.callback_query(F.data.startswith("user_view_toggle:"))
async def toggle_user_visibility_handler(call: types.CallbackQuery, bot: Bot):
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
    new_view_mode = call.data.split(':')[1]
    text, markup = await _get_paginated_users_text_and_markup(bot, view_mode=new_view_mode, page=1)
    await call.message.edit_text(text=text, reply_markup=markup)
    await call.answer()

@router.message(Command("stats"))
async def cmd_stats(message: types.Message):
    msg = await message.reply("‚è≥ –°–æ–±–∏—Ä–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...")

    all_users_data = await db.get_all_users_with_reg_date()
    all_ubs_info = await db.get_all_userbots_full_info()
    servers_info = server_config.get_servers()
    
    total_users = len(all_users_data)
    total_ubs = len(all_ubs_info)
    owners_count = await db.get_userbot_owners_count()
    
    new_users_today = 0
    today_date = date.today() 

    for user in all_users_data:
        registration_datetime = user.get('registered_at')
        if registration_datetime and isinstance(registration_datetime, datetime) and registration_datetime.date() == today_date:
            new_users_today += 1

    active_ubs_count = 0
    bots_by_server = {ip: 0 for ip in servers_info.keys()}
    bots_by_type = {}

    if all_ubs_info:
        services_by_ip = {}
        for ub in all_ubs_info:
            ip = ub.get('server_ip')
            if ip:
                if ip not in services_by_ip:
                    services_by_ip[ip] = []
                service_name = f"hikka-{ub['ub_username']}.service"
                services_by_ip[ip].append(service_name)
        
        batch_tasks = [sm.get_batch_service_statuses(names, ip) for ip, names in services_by_ip.items()]
        batch_results = await asyncio.gather(*batch_tasks)
        
        active_statuses = {}
        for result_dict in batch_results:
            for service_name, is_active in result_dict.items():
                ub_username = service_name.replace("hikka-", "").replace(".service", "")
                active_statuses[ub_username] = is_active

        for ub in all_ubs_info:
            if active_statuses.get(ub['ub_username'], False):
                active_ubs_count += 1
            if ub['server_ip'] in bots_by_server:
                bots_by_server[ub['server_ip']] += 1
            ub_type = ub.get('ub_type', 'unknown').capitalize()
            bots_by_type[ub_type] = bots_by_type.get(ub_type, 0) + 1

    inactive_ubs_count = total_ubs - active_ubs_count

    text = [
        "<b>üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n",
        "üë• <b><u>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</u></b>",
        f"  - –í—Å–µ–≥–æ: <code>{total_users}</code>",
        f"  - –í–ª–∞–¥–µ–ª—å—Ü–µ–≤ —é–∑–µ—Ä–±–æ—Ç–æ–≤: <code>{owners_count}</code>",
        f"  - –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{new_users_today}</code>\n",
        "ü§ñ <b><u>–Æ–∑–µ—Ä–±–æ—Ç—ã:</u></b>",
        f"  - –í—Å–µ–≥–æ: <code>{total_ubs}</code>",
        f"  - üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <code>{active_ubs_count}</code>",
        f"  - üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: <code>{inactive_ubs_count}</code>\n"
    ]

    if bots_by_type:
        text.append("‚öôÔ∏è <b><u>–ü–æ —Ç–∏–ø–∞–º:</u></b>")
        for ub_type, count in sorted(bots_by_type.items()):
            text.append(f"  - {html.quote(ub_type)}: <code>{count}</code>")
        text.append("")

    if bots_by_server:
        text.append("üñ•Ô∏è <b><u>–ü–æ —Å–µ—Ä–≤–µ—Ä–∞–º:</u></b>")
        for ip, count in sorted(bots_by_server.items(), key=lambda item: servers_info.get(item[0], {}).get('name', item[0])):
            server_details = servers_info.get(ip, {})
            flag = server_details.get("flag", "üè≥Ô∏è")
            name = server_details.get("name", ip)
            text.append(f"  - {flag} {html.quote(name)}: <code>{count}</code>")

    await msg.edit_text("\n".join(text))
    
@router.message(Command("cpu_ub"))
async def cmd_cpu_ub_usage(message: types.Message):
    msg = await message.reply("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–≥—Ä—É–∑–∫–µ CPU... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")
    
    all_servers = server_config.get_servers()
    full_report = ["<b>üìä –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU –ø–æ —é–∑–µ—Ä–±–æ—Ç–∞–º:</b>\n"]
    
    has_any_data = False
    
    tasks = [sm.get_all_userbots_cpu_usage(ip) for ip in all_servers.keys()]
    results = await asyncio.gather(*tasks)
    
    for server_ip, cpu_data in zip(all_servers.keys(), results):
        server_details = all_servers.get(server_ip, {})
        server_flag = server_details.get("flag", "üè≥Ô∏è")
        server_name = server_details.get("name", server_ip)

        if not cpu_data:
            continue
            
        has_any_data = True
        
        sorted_bots = sorted(cpu_data.items(), key=lambda item: item[1], reverse=True)
        
        server_report = [f"\n<b>{server_flag} {html.quote(server_name)} (<code>{server_ip}</code>)</b>"]
        for ub_username, cpu_percent in sorted_bots:
            if cpu_percent > 50.0:
                emoji = "üî•"
            elif cpu_percent > 25.0:
                emoji = "‚ö†Ô∏è"
            else:
                emoji = "üîπ"
                
            server_report.append(f"{emoji} <code>{f'{cpu_percent:.2f}%'.ljust(7)}</code> - {html.quote(ub_username)}")
        
        full_report.extend(server_report)
        
    if not has_any_data:
        await msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.")
        return
        
    await msg.edit_text("\n".join(full_report))

@router.callback_query(F.data.startswith("host_reboot_confirm:"))
async def cq_host_reboot_confirm(call: types.CallbackQuery, bot: Bot):
    ip = call.data.split(":")[1]
    await call.message.edit_text(f"‚è≥ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é —Å–µ—Ä–≤–µ—Ä <code>{ip}</code>... –ë–æ—Ç –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ —Å–µ—Ç—å.", reply_markup=None)
    
    asyncio.create_task(sm.run_command_async(f"sudo reboot", ip))
    
    await call.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    
    asyncio.create_task(monitor_and_restore_server(ip, bot, call.from_user.id))

@router.callback_query(F.data == "host_reboot_cancel")
async def cq_host_reboot_cancel(call: types.CallbackQuery):
    await call.message.edit_text("üö´ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await call.answer()

async def monitor_and_restore_server(ip: str, bot: Bot, admin_id: int):
    await log_to_channel(bot, f"üëÄ –ù–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ <code>{ip}</code>. –û–∂–∏–¥–∞—é, –ø–æ–∫–∞ –æ–Ω —É–π–¥–µ—Ç –≤ –æ—Ñ—Ñ–ª–∞–π–Ω...")

    for _ in range(10): 
        res = await sm.run_command_async("echo 1", ip, timeout=5)
        if not res["success"]:
            break
        await asyncio.sleep(10)
    else:
        await log_to_channel(bot, f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä <code>{ip}</code> –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 90 —Å–µ–∫—É–Ω–¥. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    await log_to_channel(bot, f"‚úÖ –°–µ—Ä–≤–µ—Ä <code>{ip}</code> —É—à–µ–ª –≤ –æ—Ñ—Ñ–ª–∞–π–Ω. –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞—é –µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è...")

    for _ in range(30): 
        res = await sm.run_command_async("echo 1", ip, timeout=5)
        if res["success"]:
            break
        await asyncio.sleep(10)
    else:
        await log_to_channel(bot, f"‚ùå –°–µ—Ä–≤–µ—Ä <code>{ip}</code> –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è –≤ —Å–µ—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
        return

    await log_to_channel(bot, f"üü¢ –°–µ—Ä–≤–µ—Ä <code>{ip}</code> —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏! –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")

    userbots_on_server = await db.get_userbots_by_server_ip(ip)
    if not userbots_on_server:
        await log_to_channel(bot, f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è <code>{ip}</code> –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –Æ–∑–µ—Ä–±–æ—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç.")
        return

    report = [f"üõ†Ô∏è **–û—Ç—á–µ—Ç –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –¥–ª—è <code>{ip}</code>:**"]
    for ub in userbots_on_server:
        ub_username = ub['ub_username']
        res = await sm.manage_ub_service(ub_username, "start", ip)
        status = "‚úÖ –ó–∞–ø—É—â–µ–Ω" if res["success"] else f"‚ùå –û—à–∏–±–∫–∞: {res.get('message', '...')}"
        report.append(f" ‚Ä¢ <code>{ub_username}</code>: {status}")

    await log_to_channel(bot, "\n".join(report))

@router.message(Command("ban"), IsSuperAdmin())
async def cmd_ban(message: types.Message, command: CommandObject, bot: Bot):
    if not command.args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/ban [ID –∏–ª–∏ @username]</code>")
        return

    target_user_data = await db.get_user_by_username_or_id(command.args)
    if not target_user_data:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{html.quote(command.args)}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    target_user_id = target_user_data['tg_user_id']
    if await db.is_user_banned(target_user_id):
        await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.")
        return

    await ban_manager.execute_ban(target_user_id, message.from_user, bot)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_user_id}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω. –ï–≥–æ —é–∑–µ—Ä–±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

@router.message(Command("unban"), IsSuperAdmin())
async def cmd_unban(message: types.Message, command: CommandObject, bot: Bot):
    if not command.args:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/unban [ID –∏–ª–∏ @username]</code>")
        return

    target_user_data = await db.get_user_by_username_or_id(command.args)
    if not target_user_data:
        await message.reply(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{html.quote(command.args)}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    target_user_id = target_user_data['tg_user_id']
    if not await db.is_user_banned(target_user_id):
        await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.")
        return
        
    await ban_manager.execute_unban(target_user_id, message.from_user, bot)
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_user_id}</code> —Ä–∞–∑–±–∞–Ω–µ–Ω.")

async def create_backup(backup_path: str, source_dir: str) -> bool:
    try:
        shutil.make_archive(backup_path, 'zip', source_dir)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {e}")
        return False

@router.message(Command("backup_bot"), IsSuperAdmin())
async def cmd_backup_bot_script(message: types.Message, bot: Bot):
    script_path = "./backup_bot.sh"

    if not os.path.exists(script_path):
        await message.reply(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –°–∫—Ä–∏–ø—Ç <code>{script_path}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    msg = await message.reply("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...\n\nüìÅ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞\nüóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\nüì¶ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞")
    archive_path = None

    try:
        logging.info(f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: {script_path}")
        process = await asyncio.create_subprocess_shell(
            script_path,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        stdout, stderr = await process.communicate()
        logging.info(f"–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: {process.returncode}")

        if process.returncode == 0:
            archive_path = stdout.decode().strip()
            logging.info(f"–°–∫—Ä–∏–ø—Ç –≤–µ—Ä–Ω—É–ª –ø—É—Ç—å: '{archive_path}'")
            logging.info(f"stderr: '{stderr.decode().strip()}'")
            
            if not archive_path or not os.path.exists(archive_path):
                logging.error(f"–ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: '{archive_path}'")
                await msg.edit_text("‚ùå <b>–û—à–∏–±–∫–∞:</b> –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            file_size = os.path.getsize(archive_path)
            file_size_mb = file_size / (1024 * 1024)
            
            await msg.edit_text("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\nüìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä—Ö–∏–≤–µ:</b>\nüìÅ –†–∞–∑–º–µ—Ä: {:.1f} MB\nüìÖ –°–æ–∑–¥–∞–Ω: {}\n\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º...".format(
                file_size_mb,
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ))
            
            document_to_send = FSInputFile(archive_path)
            caption_text = f"üóÇÔ∏è <b>–ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è</b>\n\nüìÅ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>\n‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞\n‚Ä¢ –î–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MySQL\n\nüìÖ –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nüìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB"
            
            success_count = 0
            for admin_id in config.SUPER_ADMIN_IDS:
                try:
                    await bot.send_document(
                        chat_id=admin_id,
                        document=document_to_send,
                        caption=caption_text
                    )
                    success_count += 1
                    await asyncio.sleep(0.5)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±—ç–∫–∞–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
            await msg.delete()
            await message.answer(f"‚úÖ <b>–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {success_count}/{len(config.SUPER_ADMIN_IDS)}\nüìä –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: {file_size_mb:.1f} MB\n\nüóÇÔ∏è <b>–ê—Ä—Ö–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç:</b>\n‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞\n‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MySQL")

        else:
            error_output = stderr.decode().strip()
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è backup_bot.sh: {error_output}")
            await msg.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞:</b>\n<pre>{html.quote(error_output)}</pre>")

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ cmd_backup_bot_script: {e}", exc_info=True)
        await msg.edit_text(f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:</b>\n<pre>{html.quote(str(e))}</pre>")
    finally:
        if archive_path and os.path.exists(archive_path):
            os.remove(archive_path)

async def auto_backup_task(bot: Bot):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    """
    logging.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    script_path = "./backup_bot.sh"
    if not os.path.exists(script_path):
        logging.error(f"‚ùå –°–∫—Ä–∏–ø—Ç {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞")
        return

    archive_path = None
    try:
        process = await asyncio.create_subprocess_shell(
            script_path,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        stdout, stderr = await process.communicate()

        if process.returncode == 0:
            archive_path = stdout.decode().strip()
            if not archive_path or not os.path.exists(archive_path):
                logging.error("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø: —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É")
                return

            file_size = os.path.getsize(archive_path)
            file_size_mb = file_size / (1024 * 1024)
            
            logging.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {archive_path} ({file_size_mb:.1f} MB)")
            
            document_to_send = FSInputFile(archive_path)
            caption_text = f"üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è</b>\n\nüìÅ <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>\n‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞\n‚Ä¢ –î–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MySQL\n\nüìÖ –°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\nüìä –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} MB\n\n‚è∞ <i>–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç</i>"
            
            success_count = 0
            for admin_id in config.SUPER_ADMIN_IDS:
                try:
                    await bot.send_document(
                        chat_id=admin_id,
                        document=document_to_send,
                        caption=caption_text
                    )
                    success_count += 1
                    await asyncio.sleep(0.5)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
            logging.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {success_count}/{len(config.SUPER_ADMIN_IDS)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")

        else:
            error_output = stderr.decode().strip()
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞: {error_output}")

    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ auto_backup_task: {e}", exc_info=True)
    finally:
        if archive_path and os.path.exists(archive_path):
            os.remove(archive_path)
            logging.info(f"üóëÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —É–¥–∞–ª–µ–Ω: {archive_path}")

@router.message(Command("auto_backup"), IsSuperAdmin())
async def cmd_auto_backup_control(message: types.Message):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    help_text = (
        "üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
        "üìã <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "‚è∞ –ß–∞—Å—Ç–æ—Ç–∞: –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (–≤ :00 –∏ :30 –ø–æ –ú–°–ö)\n"
        "üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ + –¥–∞–º–ø –ë–î\n"
        "üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: –≤—Å–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã\n\n"
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        "‚Ä¢ –ë—ç–∫–∞–ø—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        "‚Ä¢ –§–∞–π–ª—ã —É–¥–∞–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏\n"
        "‚Ä¢ –õ–æ–≥–∏—Ä—É—é—Ç—Å—è –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        "‚Ä¢ –í—Ä–µ–º—è –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (Europe/Moscow)\n\n"
        "üìù <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "<code>/backup_bot</code> - —Ä—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞\n"
        "<code>/auto_backup</code> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    
    await message.reply(help_text)
@router.message(Command("git")) 
async def cmd_git_manager(message: types.Message, command: CommandObject):
    FOX_OWNER_ID = 1863611627
    authorized_ids = config.SUPER_ADMIN_IDS + [FOX_OWNER_ID]

    if message.from_user.id not in authorized_ids:
        return

    args = command.args.split() if command.args else []

    if not args or len(args) < 2:
        help_text = (
            "<b>‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /git:</b>\n\n"
            f"<code>/git change fox {escape('<–Ω–æ–≤–∞—è_—Å—Å—ã–ª–∫–∞_–Ω–∞_github>')}</code>\n"
            "<i>- –ò–∑–º–µ–Ω—è–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ FoxUserbot.</i>\n\n"
            "<code>/git view fox</code>\n"
            "<i>- –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.</i>"
        )
        await message.reply(help_text)
        return

    action = args[0].lower()
    ub_type = args[1].lower()

    if ub_type != "fox":
        await message.reply("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è <b>fox</b>.")
        return

    if action == "change":
        if len(args) != 3:
            await message.reply(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/git change fox {escape('<URL>')}</code>")
            return
        
        new_url = args[2]
        if not new_url.startswith("https://github.com/"):
            await message.reply("‚ùå URL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub.")
            return
        
        sm.update_git_repository(ub_type, new_url)
        await message.reply(f"‚úÖ URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è <b>{ub_type}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞:\n<code>{escape(new_url)}</code>")

    elif action == "view":
        current_url = sm.get_current_repo_url(ub_type)
        await message.reply(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π URL –¥–ª—è <b>{ub_type}</b>:\n<code>{escape(current_url)}</code>")
        
    else:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'change' –∏–ª–∏ 'view'.")
        
       
@router.callback_query(F.data == "reject_review", IsAdmin())
async def cq_reject_review(call: types.CallbackQuery):
    try:
        if call.message.reply_to_message:
            await call.bot.delete_message(
                chat_id=call.message.chat.id,
                message_id=call.message.reply_to_message.message_id
            )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞: {e}")
    
    await call.message.delete()
    await call.answer("–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω.")

@router.callback_query(F.data.startswith("approve_review:"), IsAdmin())
async def cq_approve_review(call: types.CallbackQuery, bot: Bot):
    if not config.REVIEW_CHANNEL_ID:
        await call.answer("ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!", show_alert=True)
        return

    try:
        _, user_id_str, message_id_str = call.data.split(":")
        user_id = int(user_id_str)
        message_id = int(message_id_str)
    except ValueError:
        await call.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.", show_alert=True)
        return
        
    await call.answer("–ü—É–±–ª–∏–∫—É—é –æ—Ç–∑—ã–≤...")
    
    try:
        await bot.forward_message(
            chat_id=config.REVIEW_CHANNEL_ID,
            from_chat_id=user_id,
            message_id=message_id
        )
        await call.message.edit_text("‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤ –æ—Ç {user_id}: {e}")
        await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        
        
async def _display_user_info_panel(bot: Bot, user_id: int, chat_id: int, message_id: int):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    user_data = await db.get_user_data(user_id)
    if not user_data:
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –ë–î
            chat_info = await bot.get_chat(user_id)
            user_data = {"tg_user_id": chat_info.id, "full_name": chat_info.full_name, "username": chat_info.username}
        except (TelegramNotFound, TelegramBadRequest):
            await bot.edit_message_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id=chat_id, message_id=message_id)
            return
            
    full_name = html.quote(user_data.get('full_name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'))
    username = user_data.get('username')
    
    user_bots = await db.get_userbots_by_tg_id(user_id)
    bot_count = len(user_bots)

    text_parts = [
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n",
        f"<b>–ò–º—è:</b> {full_name}",
    ]
    if username:
        text_parts.append(f"<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{html.quote(username)}")
    text_parts.append(f"<b>ID:</b> <code>{user_id}</code>")
    text_parts.append("‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ")
    text_parts.append(f"<b>–Æ–∑–µ—Ä–±–æ—Ç—ã:</b> {bot_count}")
    
    text = "\n".join(text_parts)
    markup = kb.get_user_info_keyboard(user_id, has_bots=bool(user_bots))
    
    try:
        await bot.edit_message_text(text, chat_id=chat_id, message_id=message_id, reply_markup=markup)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def _get_target_user_data(message: types.Message, command: CommandObject, bot: Bot):
    identifier = None
    
    if command.args:
        arg = command.args.strip().rstrip(',').lstrip('@')
        
        ub_data = await db.get_userbot_data(ub_username=arg)
        if ub_data:
            identifier = str(ub_data['tg_user_id'])
        else:
            identifier = arg 
            
    elif message.reply_to_message:
        identifier = str(message.reply_to_message.from_user.id)
        
    else:

        return None, "<b>–û—à–∏–±–∫–∞:</b> –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID, @username, –∏–º—è —é–∑–µ—Ä–±–æ—Ç–∞) –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."

    user_data = await db.get_user_by_username_or_id(identifier)
    
    if user_data:
        return user_data, None

    if identifier.isdigit():
        try:
            chat_info = await bot.get_chat(int(identifier))

            return {
                "tg_user_id": chat_info.id,
                "full_name": chat_info.full_name,
                "username": chat_info.username,
                "note": None 
            }, None
        except (TelegramNotFound, TelegramBadRequest):
            return None, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{html.quote(identifier)}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω."

    return None, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É: <code>{html.quote(identifier)}</code>"
    
@router.message(Command("user"), IsAdmin())
async def cmd_user_info(message: types.Message, command: CommandObject, bot: Bot):
    msg = await message.reply("‚è≥ –ò—â—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user_data, error_message = await _get_target_user_data(message, command, bot)

    if error_message:
        await msg.edit_text(error_message)
        return

    await _display_user_info_panel(bot, user_data['tg_user_id'], msg.chat.id, msg.message_id)

@router.callback_query(F.data.startswith("show_user_bots:"), IsAdmin())
async def cq_show_user_bots_list(call: types.CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=kb.get_admin_loading_keyboard())
    await call.answer()
    user_id = int(call.data.split(":")[1])
    user_bots = await db.get_userbots_by_tg_id(user_id)
    
    text = "ü§ñ **–Æ–∑–µ—Ä–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    markup = kb.get_user_bots_list_keyboard(user_bots, user_id)
    
    await call.message.edit_text(text, reply_markup=markup)

@router.callback_query(F.data.startswith("back_to_user_info:"), IsAdmin())
async def cq_back_to_user_info(call: types.CallbackQuery, bot: Bot):
    await call.message.edit_reply_markup(reply_markup=kb.get_admin_loading_keyboard())
    await call.answer()
    user_id = int(call.data.split(":")[1])
    await _display_user_info_panel(bot, user_id, call.message.chat.id, call.message.message_id)

@router.callback_query(F.data.startswith("select_user_bot:"), IsAdmin())
async def cq_select_user_bot_for_admin(call: types.CallbackQuery, bot: Bot):
    try:
        await call.message.edit_reply_markup(reply_markup=kb.get_admin_loading_keyboard())
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    
    await call.answer()
    _, ub_username, user_id_str = call.data.split(":")
    user_id = int(user_id_str)
    
    ub_data = await db.get_userbot_data(ub_username)
    owner_data = await db.get_user_data(user_id)
    
    if not ub_data or not owner_data:
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –í–æ–∑–º–æ–∂–Ω–æ, —é–∑–µ—Ä–±–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
        return
        
    is_active = await sm.is_service_active(f"hikka-{ub_username}.service", ub_data['server_ip'])
    
    owner_username = f"@{owner_data['username']}" if owner_data.get('username') else 'N/A'

    text = (
        f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> <code>{html.quote(ub_username)}</code>\n"
        f"<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {html.quote(owner_data.get('full_name', ''))} ({owner_username}, <code>{user_id}</code>)\n"
        f"<b>–¢–∏–ø:</b> {html.quote(ub_data.get('ub_type', 'N/A').capitalize())}\n"
        f"<b>–°–µ—Ä–≤–µ—Ä:</b> <code>{ub_data.get('server_ip', 'N/A')}</code>"
    )
    markup = kb.get_admin_ub_management_keyboard(ub_username, user_id, is_active)
    
    await call.message.edit_text(text, reply_markup=markup)

@router.callback_query(F.data.startswith("admin_manage_ub:"), IsAdmin())
async def cq_admin_manage_ub(call: types.CallbackQuery, bot: Bot):
    await call.message.edit_reply_markup(reply_markup=kb.get_admin_loading_keyboard())
    _, action, ub_username = call.data.split(":")
    await call.answer(f"–í—ã–ø–æ–ª–Ω—è—é '{action}'...")
    
    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data:
        await call.answer("‚ùå –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
        
    await sm.manage_ub_service(ub_username, action, ub_data['server_ip'])
    await asyncio.sleep(1.5)
    
    user_id = ub_data['tg_user_id']
    is_active = await sm.is_service_active(f"hikka-{ub_username}.service", ub_data['server_ip'])
    markup = kb.get_admin_ub_management_keyboard(ub_username, user_id, is_active)
    
    try:
        await call.message.edit_reply_markup(reply_markup=markup)
    except TelegramBadRequest:
        pass

@router.callback_query(F.data.startswith("admin_delete_ub:"), IsAdmin())
async def cq_admin_delete_ub(call: types.CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=kb.get_admin_loading_keyboard())
    ub_username = call.data.split(":")[1]
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_confirm:{ub_username}")
    builder.button(text="‚ùå –ù–µ—Ç", callback_data=f"select_user_bot:{ub_username}:{await db.get_userbot_data(ub_username)['tg_user_id']}")
    
    await call.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç–∞ <code>{html.quote(ub_username)}</code>?",
        reply_markup=builder.as_markup()
    )
    await call.answer()

@router.callback_query(F.data.startswith("admin_delete_confirm:"), IsAdmin())
async def cq_admin_delete_confirm(call: types.CallbackQuery, bot: Bot):
    await call.message.edit_text("‚è≥ –£–¥–∞–ª—è—é...", reply_markup=kb.get_admin_loading_keyboard())
    ub_username = call.data.split(":")[1]
    
    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data:
        await call.message.edit_text("‚ùå –Æ–∑–µ—Ä–±–æ—Ç —É–∂–µ —É–¥–∞–ª–µ–Ω.")
        return
        
    user_id = ub_data['tg_user_id']
    res = await sm.delete_userbot_full(ub_username, ub_data['server_ip'])

    if res['success']:
        await call.message.edit_text(f"‚úÖ –Æ–∑–µ—Ä–±–æ—Ç <code>{html.quote(ub_username)}</code> —É–¥–∞–ª–µ–Ω.")
    else:
        await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {html.quote(res.get('message', '...'))}")

    await asyncio.sleep(2)
    user_bots = await db.get_userbots_by_tg_id(user_id)
    markup = kb.get_user_bots_list_keyboard(user_bots, user_id)
    await call.message.edit_text("ü§ñ **–Æ–∑–µ—Ä–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**", reply_markup=markup)
    
@router.callback_query(F.data.startswith("admin_show_logs:"), IsAdmin())
async def cq_admin_show_logs(call: types.CallbackQuery, bot: Bot):
    await call.message.edit_reply_markup(reply_markup=kb.get_admin_loading_keyboard())
    await call.answer()
    
    _, log_type, ub_username, page_str = call.data.split(":")
    page = int(page_str)

    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data:
        await call.answer("‚ùå –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    logs = await sm.get_journal_logs(ub_username, ub_data['server_ip'], lines=1000)
    
    if not logs:
        await call.answer("üìú –õ–æ–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞ –ø—É—Å—Ç—ã.", show_alert=True)
        is_active = await sm.is_service_active(f"hikka-{ub_username}.service", ub_data['server_ip'])
        markup = kb.get_admin_ub_management_keyboard(ub_username, ub_data['tg_user_id'], is_active)
        await call.message.edit_reply_markup(reply_markup=markup)
        return

    log_lines = logs.strip().split('\n')
    total_pages = max(1, (len(log_lines) + LOG_LINES_PER_PAGE - 1) // LOG_LINES_PER_PAGE)
    page = max(1, min(page, total_pages))
    start_index = (page - 1) * LOG_LINES_PER_PAGE
    end_index = start_index + LOG_LINES_PER_PAGE
    page_content = "\n".join(log_lines[start_index:end_index])
    
    text = (f"üìú <b>–õ–æ–≥–∏ ({log_type.capitalize()}) –¥–ª—è <code>{html.quote(ub_username)}</code></b>\n"
            f"<i>(–°—Ç—Ä. {page}/{total_pages}, –Ω–æ–≤—ã–µ –ª–æ–≥–∏ —Å–≤–µ—Ä—Ö—É)</i>\n\n"
            f"<pre>{html.quote(page_content)}</pre>")
            
    if len(text) > 4096:
        text = text[:4090] + "...</pre>"

    markup = kb.get_admin_logs_paginator_keyboard(log_type, ub_username, ub_data['tg_user_id'], page, total_pages)
    await call.message.edit_text(text, reply_markup=markup)

@router.callback_query(F.data.startswith("admin_transfer_start:"), IsAdmin())
async def cq_admin_start_transfer(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data:
        await call.answer("‚ùå –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await state.set_state(AdminUserBotTransfer.WaitingForNewOwnerID)
    await state.update_data(
        ub_username=ub_username, 
        message_id_to_edit=call.message.message_id,
        original_owner_id=ub_data['tg_user_id']
    )
    
    text = f"–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è —é–∑–µ—Ä–±–æ—Ç–∞ <code>{html.quote(ub_username)}</code>."
    markup = kb.get_admin_cancel_transfer_keyboard(ub_username)
    await call.message.edit_text(text, reply_markup=markup)
    await call.answer()

@router.callback_query(F.data.startswith("admin_transfer_cancel:"), StateFilter(AdminUserBotTransfer.WaitingForNewOwnerID, AdminUserBotTransfer.ConfirmingTransfer))
async def cq_admin_cancel_transfer(call: types.CallbackQuery, state: FSMContext):
    await call.answer("–ü–µ—Ä–µ–Ω–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.")
    data = await state.get_data()
    ub_username = data['ub_username']
    user_id = data['original_owner_id']
    await state.clear()

    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    is_active = await sm.is_service_active(f"hikka-{ub_username}.service", await db.get_userbot_data(ub_username)['server_ip'])
    owner_data = await db.get_user_data(user_id)
    owner_username = f"@{owner_data['username']}" if owner_data.get('username') else 'N/A'

    text = (
        f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> <code>{html.quote(ub_username)}</code>\n"
        f"<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {html.quote(owner_data.get('full_name', ''))} ({owner_username}, <code>{user_id}</code>)\n"
        f"<b>–¢–∏–ø:</b> {html.quote(await db.get_userbot_data(ub_username).get('ub_type', 'N/A').capitalize())}\n"
        f"<b>–°–µ—Ä–≤–µ—Ä:</b> <code>{await db.get_userbot_data(ub_username).get('server_ip', 'N/A')}</code>"
    )
    markup = kb.get_admin_ub_management_keyboard(ub_username, user_id, is_active)
    
    await call.message.edit_text(text, reply_markup=markup)

@router.message(StateFilter(AdminUserBotTransfer.WaitingForNewOwnerID))
async def msg_admin_process_new_owner_id(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    ub_username = data.get("ub_username")
    message_id_to_edit = data.get("message_id_to_edit")
    
    await message.delete()

    if not message.text or not message.text.isdigit():
        await bot.edit_message_text("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", chat_id=message.chat.id, message_id=message_id_to_edit, reply_markup=kb.get_admin_cancel_transfer_keyboard(ub_username))
        return

    new_owner_id = int(message.text)
        
    await bot.edit_message_text("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", chat_id=message.chat.id, message_id=message_id_to_edit)
    
    try:
        new_owner = await bot.get_chat(new_owner_id)
        new_owner_display = f"@{new_owner.username}" if new_owner.username else new_owner.full_name
        
        await state.update_data(new_owner_id=new_owner_id)
        await state.set_state(AdminUserBotTransfer.ConfirmingTransfer)

        text = f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å —é–∑–µ—Ä–±–æ—Ç–∞ <code>{html.quote(ub_username)}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {html.quote(new_owner_display)} (<code>{new_owner_id}</code>)?"
        markup = kb.get_admin_confirm_transfer_keyboard(ub_username, new_owner_id)
        await bot.edit_message_text(text, chat_id=message.chat.id, message_id=message_id_to_edit, reply_markup=markup)

    except (TelegramNotFound, TelegramBadRequest):
        await bot.edit_message_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{new_owner_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", chat_id=message.chat.id, message_id=message_id_to_edit, reply_markup=kb.get_admin_cancel_transfer_keyboard(ub_username))
        await state.set_state(AdminUserBotTransfer.WaitingForNewOwnerID)

@router.callback_query(F.data.startswith("admin_transfer_execute:"), StateFilter(AdminUserBotTransfer.ConfirmingTransfer))
async def cq_admin_execute_transfer(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.edit_reply_markup(reply_markup=kb.get_admin_loading_keyboard())
    
    data = await state.get_data()
    ub_username = data['ub_username']
    original_owner_id = data['original_owner_id']
    new_owner_id = data['new_owner_id']

    if not await db.transfer_userbot(ub_username, new_owner_id):
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        # –í–µ—Ä–Ω–µ–º—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥
        is_active = await sm.is_service_active(f"hikka-{ub_username}.service", await db.get_userbot_data(ub_username)['server_ip'])
        markup = kb.get_admin_ub_management_keyboard(ub_username, original_owner_id, is_active)
        await call.message.edit_reply_markup(reply_markup=markup)
        return

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    try:
        admin_data = {"id": call.from_user.id, "full_name": call.from_user.full_name}
        old_owner_chat = await bot.get_chat(original_owner_id)
        new_owner_chat = await bot.get_chat(new_owner_id)
        log_data = {
            "admin_data": admin_data,
            "user_data": {"id": old_owner_chat.id, "full_name": old_owner_chat.full_name},
            "new_owner_data": {"id": new_owner_chat.id, "full_name": new_owner_chat.full_name},
            "ub_info": {"name": ub_username}
        }
        await log_event(bot, "userbot_transferred", log_data)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å UB: {e}")

    await state.clear()
    await call.message.edit_text("‚úÖ –ü–µ—Ä–µ–Ω–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
    try:
        await bot.send_message(
            chat_id=new_owner_id,
            text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–¥–∞–ª –≤–∞–º —é–∑–µ—Ä–±–æ—Ç–∞ <code>{html.quote(ub_username)}</code>.\n\n"
                 "–í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start."
        )
    except TelegramForbiddenError:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ {new_owner_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ {new_owner_id}: {e}")
        
@router.message(Command("update"), IsAdmin())
async def cmd_update_commit(message: types.Message, command: CommandObject, bot: Bot):
    if not command.args and not message.reply_to_message:
        await message.reply("<b>–û—à–∏–±–∫–∞:</b> –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    target_message = message.reply_to_message if message.reply_to_message else message
    
    commit_text = ""
    if command.args and not message.reply_to_message:
        commit_text = command.args
    elif target_message:
        commit_text = target_message.text or target_message.caption or ""

    if not commit_text:
         await message.reply("<b>–û—à–∏–±–∫–∞:</b> –¢–µ–∫—Å—Ç –∫–æ–º–º–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
         return

    commit_id = uuid.uuid4().hex[:6].upper()
    bot_folder = os.path.basename(os.getcwd())
    
    admin = message.from_user
    admin_name = html.quote(admin.full_name)
    admin_link = f"<a href='tg://user?id={admin.id}'>{admin_name}</a>"
    
    admin_info_str = admin_link
    if admin.username:
        admin_info_str += f" (@{html.quote(admin.username)})"

    changelog_channel_id = -1002758779158
    topic_id = 1920

    header_text = (
        f"<b>üìè On <code>{bot_folder}</code> new commits!</b>\n\n"
        f"Commit <code>#{commit_id}</code> by {admin_info_str}\n\n"
        f"<b>‚úçÔ∏è ChangeLog:</b>"
    )

    changelog_content = f"<blockquote>{html.quote(commit_text)}</blockquote>"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–∏—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.add_commit(
        commit_id=commit_id,
        admin_id=admin.id,
        admin_name=admin.full_name,
        admin_username=admin.username,
        commit_text=commit_text
    )
            
    try:
        await bot.send_message(
            chat_id=changelog_channel_id,
            message_thread_id=topic_id,
            text=f"{header_text}\n{changelog_content}",
            disable_web_page_preview=True
        )

        if target_message.photo:
            await bot.send_photo(
                chat_id=changelog_channel_id,
                message_thread_id=topic_id,
                photo=target_message.photo[-1].file_id
            )
        elif target_message.video:
             await bot.send_video(
                chat_id=changelog_channel_id,
                message_thread_id=topic_id,
                video=target_message.video.file_id
            )
        elif target_message.document:
             await bot.send_document(
                chat_id=changelog_channel_id,
                message_thread_id=topic_id,
                document=target_message.document.file_id
            )
            
        await message.reply("‚úÖ –ö–æ–º–º–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–∏—Ç –≤ –∫–∞–Ω–∞–ª: {e}")
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:\n<pre>{html.quote(str(e))}</pre>")
       
async def _generate_and_save_token(user: types.User) -> str:
    username = user.username or f"user{user.id}"
    random_part = secrets.token_hex(18)
    new_token = f"{username}:{user.id}:{random_part}"
    await db.set_api_token(user.id, new_token)
    return new_token



def seconds_to_human_readable(seconds):
    days, remainder = divmod(seconds, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, _ = divmod(remainder, 60)
    parts = []
    if days:
        parts.append(f"{int(days)}d")
    if hours:
        parts.append(f"{int(hours)}h")
    if minutes:
        parts.append(f"{int(minutes)}m")
    return " ".join(parts) if parts else "~1m"



# --- END OF FILE admin_handlers.py ---