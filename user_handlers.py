# --- START OF FILE user_handlers.py ---
import logging
import asyncio
import secrets
from datetime import datetime, timedelta
import re
import time
from datetime import datetime
import pytz
import locale
import secrets
from collections import defaultdict
from aiogram import Bot, Router, types, F, html
from aiogram.filters import Command, StateFilter, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.exceptions import TelegramBadRequest, TelegramNotFound, TelegramForbiddenError
from aiogram.types import InputMediaPhoto, FSInputFile, InputFile
from aiogram.types import InlineQuery, InputTextMessageContent, InlineQueryResultArticle, InlineQueryResultPhoto, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hlink
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from aiogram.exceptions import TelegramBadRequest
import html as py_html
import traceback

import keyboards as kb
import system_manager as sm
import server_config
import database as db
from api_manager import api_manager
from states import UserBotSetup, UserBotTransfer, UserReview, CommitEditing, APITokenManagement
from admin_manager import get_all_admins
from config_manager import config
from channel_logger import log_event
import math
from utils.copy import CopyTextButton
from filters import IsBotEnabled, IsSubscribed, IsAdmin
import time
# from system_manager import get_service_process_uptime

logger = logging.getLogger(__name__)
router = Router()
router.message.filter(IsBotEnabled())
router.callback_query.filter(IsBotEnabled())

LOG_LINES_PER_PAGE = 25
SERVERS_PER_PAGE = 10

PING_COOLDOWN_SECONDS = 5
PING_TIMESTAMPS = {}

async def _show_server_selection_page(call: types.CallbackQuery, state: FSMContext, page: int = 1):
    from bot import BANNER_FILE_IDS
    
    user_id = call.from_user.id
    has_premium = await db.check_premium_access(user_id)
    
    all_servers = server_config.get_servers()
    all_userbots = await db.get_all_userbots_full_info()
    installed_bots_map = defaultdict(int)
    for ub in all_userbots:
        installed_bots_map[ub['server_ip']] += 1

    server_ips = [ip for ip in all_servers if ip != sm.LOCAL_IP]
    
    available_servers_filtered = []
    for ip in server_ips:
        details = all_servers[ip]
        status = details.get("status")
        if status == 'false':
            continue
        if status == 'test' and user_id not in get_all_admins():
            continue
        available_servers_filtered.append((ip, details))

    def sort_key(server_info):
        ip, details = server_info
        slots = details.get('slots', 0)
        installed = installed_bots_map.get(ip, 0)
        is_full = slots > 0 and installed >= slots
        free_slots = slots - installed if slots > 0 else float('inf')
        return is_full, -free_slots

    sorted_servers = sorted(available_servers_filtered, key=sort_key)
    
    total_pages = math.ceil(len(sorted_servers) / SERVERS_PER_PAGE) if sorted_servers else 1
    page = max(1, min(page, total_pages))
    start_index = (page - 1) * SERVERS_PER_PAGE
    end_index = start_index + SERVERS_PER_PAGE
    servers_on_page = sorted_servers[start_index:end_index]
    
    data = await state.get_data()
    server_stats = data.get("server_stats", {})
    
    markup = kb.get_server_selection_keyboard(
        user_id=user_id,
        installed_bots_map=installed_bots_map,
        server_stats=server_stats,
        servers_on_page=servers_on_page,
        page=page,
        total_pages=total_pages,
        has_premium_access=has_premium
    )
    
    text = "<b>‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞</b>\n\n<b>üíª –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç</b>"
    photo = BANNER_FILE_IDS.get("select_server") or FSInputFile("banners/select_server.png")
    message_id = data.get("message_id_to_edit", call.message.message_id)

    try:
        await call.bot.edit_message_media(
            chat_id=call.message.chat.id, message_id=message_id,
            media=InputMediaPhoto(media=photo, caption=text),
            reply_markup=markup
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logging.error(f"Error editing server selection page: {e}")
            
@router.callback_query(F.data == "premium_server_locked", UserBotSetup.ChoosingServer)
async def cq_premium_server_locked(call: types.CallbackQuery):
    await call.answer(
        "–î–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º, –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å: @nloveuser",
        show_alert=True
    )

@router.callback_query(F.data.startswith("select_server_page:"), UserBotSetup.ChoosingServer)
async def cq_select_server_page(call: types.CallbackQuery, state: FSMContext):
    try:
        page = int(call.data.split(":")[1])
        await call.answer()
        await _show_server_selection_page(call, state, page)
    except (ValueError, IndexError):
        await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.", show_alert=True)

review_warned_users = defaultdict(lambda: False)

async def safe_callback_answer(call: types.CallbackQuery, text: str, show_alert: bool = False) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ queries
    
    Args:
        call: CallbackQuery –æ–±—ä–µ–∫—Ç
        text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        show_alert: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ alert
        
    Returns:
        True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–µ–Ω, False –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
    """
    try:
        await call.answer(text, show_alert=show_alert)
        return True
    except TelegramBadRequest as tg_error:
        if "query is too old" in str(tg_error).lower() or "response timeout expired" in str(tg_error).lower():
            logging.warning(f"Callback query —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}: {tg_error}")
        else:
            logging.error(f"TelegramBadRequest –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {tg_error}")
        return False
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")
        return False

class UserBotShare(StatesGroup):
    ConfirmingRevoke = State()
    WaitingForShareUserID = State()
    ConfirmingShare = State()
    WaitingForShareAccept = State()

def _create_progress_bar(percent_str: str, length: int = 10) -> str:
    try:
        percent = float(str(percent_str).replace('%',''))
        filled_length = int(length * percent / 100)
        bar = '‚ñà' * filled_length + '‚ñë' * (length - filled_length)
        return f"[{bar}]"
    except (ValueError, TypeError):
        return f"[{'?' * length}]"

def get_greeting():
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    if 5 <= now.hour < 12: return "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= now.hour < 17: return "üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 17 <= now.hour < 23: return "üåÉ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else: return "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏"

def seconds_to_human_readable(seconds):
    days, remainder = divmod(seconds, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, _ = divmod(remainder, 60)
    parts = []
    if days:
        parts.append(f"{int(days)}d")
    if hours:
        parts.append(f"{int(hours)}h")
    if minutes:
        parts.append(f"{int(minutes)}m")
    return " ".join(parts) if parts else "~1m"

def format_container_stats(stats_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ /api/host/cont_stat)"""
    if not stats_data:
        return "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –∫–ª—é—á info
    info = stats_data.get("info")
    if info:
        container_name = info.get("container", "N/A")
        cpu_percent = info.get("cpu_percent", 0)
        cpu_limit = info.get("cpu_limit", 0)
        ram_usage = info.get("ram_usage_mb", 0)
        ram_limit = info.get("ram_limit_mb", 0)
        ram_percent = info.get("ram_percent", 0)
        disk_usage = info.get("disk_usage_mb", 0)
        disk_limit = info.get("disk_limit_mb", 0)
        disk_percent = info.get("disk_percent", 0)

        result = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞</b>\n\n"
        result += f"üî∏ <b>–ò–º—è:</b> <code>{container_name}</code>\n"
        result += f"üî∏ <b>CPU:</b> {cpu_percent:.2f}% (–ª–∏–º–∏—Ç: {cpu_limit})\n"
        result += f"üî∏ <b>RAM:</b> {ram_percent:.2f}% ({ram_usage:.1f}MB / {ram_limit:.1f}MB)\n"
        result += f"üî∏ <b>ROM:</b> {disk_percent:.2f}% ({disk_usage}MB / {disk_limit}MB)\n"
        return result

    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if "stats" not in stats_data:
        return "‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    stats = stats_data["stats"]
    inspect = stats_data.get("inspect", {})
    container_name = stats.get("name", "N/A").replace("/", "")
    status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if inspect.get("State", {}).get("Running", False) else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    memory_stats = stats.get("memory_stats", {})
    memory_usage = memory_stats.get("usage", 0)
    memory_limit = memory_stats.get("limit", 1)
    memory_percent = (memory_usage / memory_limit * 100) if memory_limit > 0 else 0
    cpu_stats = stats.get("cpu_stats", {})
    cpu_usage = cpu_stats.get("cpu_usage", {})
    total_cpu_usage = cpu_usage.get("total_usage", 0)
    system_cpu_usage = cpu_stats.get("system_cpu_usage", 1)
    cpu_percent = (total_cpu_usage / system_cpu_usage * 100) if system_cpu_usage > 0 else 0
    networks = stats.get("networks", {})
    eth0_stats = networks.get("eth0", {})
    rx_bytes = eth0_stats.get("rx_bytes", 0)
    tx_bytes = eth0_stats.get("tx_bytes", 0)
    pids_stats = stats.get("pids_stats", {})
    current_pids = pids_stats.get("current", 0)
    created = inspect.get("Created", "")
    started_at = inspect.get("State", {}).get("StartedAt", "")
    result = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞</b>\n\n"
    result += f"üî∏ <b>–ò–º—è:</b> <code>{container_name}</code>\n"
    result += f"üî∏ <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
    result += f"üî∏ <b>–ü–∞–º—è—Ç—å:</b> {memory_percent:.1f}% ({memory_usage // 1024 // 1024}MB / {memory_limit // 1024 // 1024}MB)\n"
    result += f"üî∏ <b>CPU:</b> {cpu_percent:.1f}%\n"
    result += f"üî∏ <b>–ü—Ä–æ—Ü–µ—Å—Å—ã:</b> {current_pids}\n"
    result += f"üî∏ <b>–°–µ—Ç—å:</b> ‚Üì{rx_bytes // 1024}KB ‚Üë{tx_bytes // 1024}KB\n"
    if created:
        result += f"üî∏ <b>–°–æ–∑–¥–∞–Ω:</b> {created[:19].replace('T', ' ')}\n"
    if started_at:
        result += f"üî∏ <b>–ó–∞–ø—É—â–µ–Ω:</b> {started_at[:19].replace('T', ' ')}\n"
    return result

async def _show_main_panel(bot: Bot, chat_id: int, user_id: int, user_name: str, state: FSMContext, message_id: int = None, topic_id: int = None, owner_id: int = None):
    from bot import BANNER_FILE_IDS
    await state.clear()
    user_bots = await db.get_userbots_by_tg_id(user_id)
    is_chat = False
    if owner_id is None:
        owner_id = user_id
    if str(chat_id).startswith("-"):
        is_chat = True
    text = (f"<b>{get_greeting()}, {html.quote(user_name)}!</b>\n\n"
            f"<blockquote>‚òï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∏–Ω–≥–æ–º <b>TeaHost</b>. "
            f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —é–∑–µ—Ä–±–æ—Ç–∞–º–∏.</blockquote>")
    markup = kb.get_main_panel_keyboard(has_bots=bool(user_bots), user_id=owner_id, chat_id=chat_id, is_chat=is_chat)
    photo = BANNER_FILE_IDS.get("main_panel") or FSInputFile("banners/select_action.png")

    if message_id:
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –≤—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ caption –∏ markup
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            try:
                await bot.edit_message_caption(
                    chat_id=chat_id,
                    message_id=message_id,
                    caption=text,
                    reply_markup=markup
                )
            except TelegramBadRequest:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å caption, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                await bot.edit_message_media(
                    media=InputMediaPhoto(media=photo, caption=text),
                    chat_id=chat_id,
                    message_id=message_id,
                    reply_markup=markup
                )
        except TelegramBadRequest:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
            except (TelegramBadRequest, TelegramNotFound):
                pass
            await bot.send_photo(chat_id=chat_id, photo=photo, caption=text, reply_markup=markup, message_thread_id=topic_id)
    else:
        await bot.send_photo(chat_id=chat_id, photo=photo, caption=text, reply_markup=markup, message_thread_id=topic_id)
       

async def _parse_container_stats(stats_data: dict) -> dict:
    resources = {'cpu_percent': '0.0', 'ram_percent': '0.0', 'ram_used': 0, 'ram_limit': 0}

    if not stats_data:
        return resources

    info = stats_data.get("info")
    if info and isinstance(info, dict):
        resources['cpu_percent'] = round(info.get("cpu_percent", 0), 1)
        resources['ram_used'] = round(info.get("ram_usage_mb", 0))
        resources['ram_limit'] = round(info.get("ram_limit_mb", 0))
        resources['ram_percent'] = round(info.get("ram_percent", 0), 1)
        if resources['cpu_percent'] > 0 or resources['ram_used'] > 0:
            return resources
            
    stats = stats_data.get("stats")
    if not stats or not isinstance(stats, dict):
        return resources 

    try:
        memory_stats = stats.get("memory_stats", {})
        memory_usage = memory_stats.get("usage", 0)
        memory_limit = memory_stats.get("limit", 1)
        
        if memory_limit > 0 and memory_usage > 0:
            resources['ram_used'] = round(memory_usage / (1024 * 1024))
            resources['ram_limit'] = round(memory_limit / (1024 * 1024))
            resources['ram_percent'] = round((memory_usage / memory_limit * 100), 1) if memory_limit > 0 else 0.0

        cpu_stats = stats.get("cpu_stats", {})
        precpu_stats = stats.get("precpu_stats", {})
        online_cpus = cpu_stats.get("online_cpus", 1)
        
        cpu_delta = cpu_stats.get("cpu_usage", {}).get("total_usage", 0) - precpu_stats.get("cpu_usage", {}).get("total_usage", 0)
        system_cpu_delta = cpu_stats.get("system_cpu_usage", 0) - precpu_stats.get("system_cpu_usage", 0)

        if system_cpu_delta > 0 and cpu_delta > 0:
            cpu_percent = (cpu_delta / system_cpu_delta) * online_cpus * 100.0
            resources['cpu_percent'] = round(cpu_percent, 1)
            
    except (TypeError, KeyError, IndexError, ZeroDivisionError) as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Docker: {e}")

    return resources
        
async def show_management_panel(call_or_message: types.Message | types.CallbackQuery, ub_username: str, state: FSMContext = None):
    from bot import BANNER_FILE_IDS
    is_callback = isinstance(call_or_message, types.CallbackQuery)
    message = call_or_message.message if is_callback else call_or_message
    user = call_or_message.from_user
    bot = message.bot

    if state:
        await state.clear()

    ub_data = await db.get_userbot_data(ub_username)

    if not ub_data:
        if is_callback:
            await safe_callback_answer(call_or_message, "‚ùå –≠—Ç–æ—Ç —é–∑–µ—Ä–±–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        await _show_main_panel(bot=bot, chat_id=message.chat.id, user_id=user.id, user_name=user.full_name, state=state, message_id=message.message_id, topic_id=message.message_thread_id)
        return

    if ub_data.get('status') == 'installing':
        if is_callback:
            await safe_callback_answer(call_or_message, "‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n\n–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.", show_alert=True)
        else:
            await message.answer("‚è≥ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.", parse_mode="HTML")
        return

    if ub_data.get('status') == 'deleting':
        if is_callback:
            await safe_callback_answer(call_or_message, "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n\n–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        else:
            await message.answer("üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞.", parse_mode="HTML")
        return

    server_ip = ub_data.get('server_ip', 'N/A')
    is_server_active = server_config.get_server_status_by_ip(server_ip) not in ["false", "not_found"]
    
    is_running = False
    if is_server_active:
        container_status = await api_manager.get_container_status(ub_username, server_ip)
        if not container_status.get("success"):
            is_running = False
            error_msg = container_status.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            if "404" in error_msg or "not found" in error_msg.lower():
                user_data_for_log = {"id": user.id, "full_name": user.full_name}
                server_details_for_log = server_config.get_servers().get(server_ip, {})
                log_data = {
                    "user_data": user_data_for_log,
                    "ub_info": {"name": ub_username},
                    "server_info": {"ip": server_ip, "code": server_details_for_log.get("code", "N/A")},
                    "error": error_msg
                }
                asyncio.create_task(log_event(bot, "api_container_error", log_data))
        else:
            is_running = container_status.get("data", {}).get("status") == "running"
    
    server_details = server_config.get_servers().get(server_ip, {})
    server_display = f"{server_details.get('flag', 'üè≥Ô∏è')} {server_details.get('code', 'N/A')}"
    server_location = f"{server_details.get('country', 'N/A')}, {server_details.get('city', 'N/A')}"
    
    ping_ms_val = await api_manager.get_server_ping(server_ip) if is_server_active else None
    
    resources = {
        'cpu_percent': '0.0', 
        'ram_percent': '0.0', 'ram_used': 0, 'ram_limit': 0,
        'disk_percent': '0.0', 'disk_used': 0, 'disk_limit': 0
    }
    
    if is_server_active and is_running:
        stats_result = await api_manager.get_container_stats(ub_username, server_ip)
        if stats_result.get("success"):
            info = stats_result.get("data", {}).get("info", {})
            if info:
                resources['cpu_percent'] = round(info.get("cpu_percent") or 0.0, 1)
                resources['ram_used'] = round(info.get("ram_usage_mb") or 0)
                resources['ram_limit'] = round(info.get("ram_limit_mb") or 0)
                resources['ram_percent'] = round(info.get("ram_percent") or 0.0, 1)
                resources['disk_used'] = round(info.get("disk_usage_mb") or 0)
                resources['disk_limit'] = round(info.get("disk_limit_mb") or 0)
                resources['disk_percent'] = round(info.get("disk_percent") or 0.0, 1)

    webui_port = ub_data.get('webui_port')
    
    if not is_server_active:
        status_text = "‚ö™Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω"
    elif is_running:
        status_text = "üü¢ –í–∫–ª—é—á–µ–Ω"
    else:
        status_text = "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        
    creation_date_str = ub_data['created_at'].strftime('%d.%m.%Y –≤ %H:%M') if ub_data.get('created_at') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    ping_display = f"üì° –ü–∏–Ω–≥: {ping_ms_val:.1f} –º—Å" if ping_ms_val is not None else "üì° –ü–∏–Ω–≥: N/A"

    server_info_block = (
        "<blockquote expandable><b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:</b>\n"
        f"üñ• –°–µ—Ä–≤–µ—Ä: {server_display}\n"
        f"üåç –õ–æ–∫–∞—Ü–∏—è: {server_location}\n"
        f"{ping_display}"
        "</blockquote>"
    )

    text_lines = [
        "<b>üéõ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n",
        "<blockquote expandable>"
        "<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        f"ü§ñ –Æ–∑–µ—Ä–±–æ—Ç: {html.quote(ub_username)}\n"
        f"üí° –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"‚öôÔ∏è –¢–∏–ø: {ub_data.get('ub_type', 'N/A').capitalize()}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {creation_date_str}"
        "</blockquote>",
        server_info_block,
        "<blockquote expandable>"
        "<b>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:</b>\n"
        f"üß† CPU: {_create_progress_bar(str(resources.get('cpu_percent', 0)))} ({resources.get('cpu_percent', 0)}%)\n"
        f"üíæ RAM: {_create_progress_bar(str(resources.get('ram_percent', 0)))} ({resources.get('ram_used', 0)} / {resources.get('ram_limit', 0)} –ú–ë)\n"
        f"üíΩ ROM: {_create_progress_bar(str(resources.get('disk_percent', 0)))} ({resources.get('disk_used', 0)} / {resources.get('disk_limit', 0)} –ú–ë)"
        "</blockquote>\n"
    ]
    update_time_str = datetime.now(pytz.timezone("Europe/Moscow")).strftime('%H:%M:%S')
    text_lines.append(f"<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_time_str} MSK</i>")
    text = "\n".join(text_lines)
    
    is_owner = ub_data.get('tg_user_id') == user.id
    is_super_admin = user.id in config.SUPER_ADMIN_IDS
    
    markup = kb.get_management_keyboard(
        ip=server_ip, port=webui_port,
        is_running=is_running, ub_username=ub_username,
        ub_type=ub_data.get('ub_type', 'N/A'), is_server_active=is_server_active,
        is_owner=is_owner, is_private=message.chat.type == 'private',
        owner_id=user.id, is_shared=False,
        is_installing=(ub_data.get('status') == 'installing'),
        is_deleting=(ub_data.get('status') == 'deleting'),
        is_super_admin=is_super_admin
    )
    
    photo = BANNER_FILE_IDS.get("panel_userbot") or FSInputFile("banners/panel_userbot.png")
    
    try:
        if is_callback:
            try:
                await message.edit_caption(caption=text, reply_markup=markup)
            except TelegramBadRequest as edit_error:
                if "message is not modified" in str(edit_error).lower():
                    await safe_callback_answer(call_or_message, "", show_alert=True)
                    return
                await message.edit_media(media=InputMediaPhoto(media=photo, caption=text), reply_markup=markup)
        else:
            await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=text, reply_markup=markup, message_thread_id=message.message_thread_id)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            if is_callback:
                await safe_callback_answer(call_or_message, "", show_alert=True)
            return
        logging.warning(f"Could not edit message to panel. Re-sending. Error: {e}")
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except (TelegramBadRequest, TelegramNotFound):
            pass
        finally:
            await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=text, reply_markup=markup, message_thread_id=message.message_thread_id)
            
async def _safe_cleanup_on_failure(ub_username: str, server_ip: str, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–µ—Ä–µ–∑ API
    await api_manager.delete_container(ub_username, server_ip)
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if await db.get_userbot_data(ub_username=ub_username):
        await db.delete_userbot_record(ub_username)
    
    await state.clear()

async def _show_login_link_success_from_new_message(
    bot: Bot,
    chat_id: int,
    ub_username: str,
    login_url: str | None,
    state: FSMContext
):
    data = await state.get_data()
    ub_type = data.get("selected_ub_type")
    server_ip = data.get("server_ip")

    ub_data = await db.get_userbot_data(ub_username=ub_username)
    auth_data = await db.get_password(chat_id)
    username = auth_data.get("username", "unknown")
    password = auth_data.get("password", "unknown")

    final_url = None
    if ub_data and ub_data.get("webui_port"):
        final_url = f"https://{ub_username}.sharkhost.space"
    elif login_url:
        final_url = login_url

    text_parts = [
        "<blockquote>üåü <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b></blockquote>\n",
        "<blockquote>üéâ –í–∞—à —é–∑–µ—Ä–±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</blockquote>\n",
        "<blockquote>üîë –í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∏–∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É</blockquote>\n",
        "<blockquote>‚ö†Ô∏è <b>–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        "‚Ä¢ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ <b>401</b> - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä <b>Chrome</b>\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞\n"
        "‚Ä¢ –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        "‚Ä¢ –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–π—Ç - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN –∏–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –î–ª—è VPN —Å–∫–∞—á–∞–π—Ç–µ v2raytun –∏–ª–∏ hiddify</blockquote>\n",
        "<blockquote>üéØ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–æ–º:</b>\n"
        "‚Ä¢ –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /start ‚Üí –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</blockquote>\n",
        "<blockquote>üí´ <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ TeaHost!</b>\n"
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ ‚ù§Ô∏è</blockquote>",
    ]

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

    buttons: list[list[InlineKeyboardButton]] = []

    if final_url:
        buttons.append([
            InlineKeyboardButton(
                text="üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                web_app=WebAppInfo(url=final_url)
            )
        ])

    buttons.append([
        InlineKeyboardButton(
            text="üîë –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å",
            copy_text=CopyTextButton(text=password)
        )
    ])

    panel = kb.userbot_panel()
    if isinstance(panel, InlineKeyboardMarkup):
        buttons.extend(panel.inline_keyboard)

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    await bot.send_message(
        chat_id=chat_id,
        text="".join(text_parts),
        reply_markup=markup,
        disable_web_page_preview=True,
        parse_mode="HTML",
    )

    await state.clear()

async def _show_login_link_fail_from_message(bot: Bot, chat_id: int, message_id: int, ub_username: str, timeout: bool = False):
    if timeout:
        text = (f"‚è≥ <b>–í—Ä–µ–º—è –≤—ã—à–ª–æ.</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –¥–ª—è <code>{html.quote(ub_username)}</code> –∑–∞ 2 –º–∏–Ω—É—Ç—ã. "
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞.")
    else:
        text = (f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –¥–ª—è <code>{html.quote(ub_username)}</code>.</b>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å —Å—Å—ã–ª–∫—É –µ—â–µ —Ä–∞–∑.")
    await bot.edit_message_caption(caption=text, chat_id=chat_id, message_id=message_id, reply_markup=kb.get_retry_login_link_keyboard(ub_username))
    
async def wait_for_webui_ready(ub_username: str, server_ip: str, max_wait_time: int = 120) -> str | None:
    """
    –ñ–¥–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –ø—Ä–æ–≤–µ—Ä—è—è –ª–æ–≥–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏
    """
    import re
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    ready_patterns = [
        r'üîé Web mode ready for configuration',
        r'üîó Please visit http://',
        r'Heroku Userbot Web Interface running on',
        r'Web mode ready for configuration',
        r'Please visit http://',
        r'Running on http://127\.0\.0\.1:\d+',  # Fox Userbot
        r'Running on http://localhost:\d+'  # Fox Userbot –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    ]
    
    start_time = time.time()
    check_interval = 10
    
    while time.time() - start_time < max_wait_time:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            logs_result = await api_manager.get_container_logs(ub_username, server_ip)
            
            if not logs_result.get("success"):
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –¥–ª—è {ub_username}: {logs_result.get('error')}")
                await asyncio.sleep(check_interval)
                continue
            
            logs_data = logs_result.get("data", {})
            logs_text = logs_data.get("logs", "")
            
            if not logs_text:
                logger.debug(f"–õ–æ–≥–∏ –ø—É—Å—Ç—ã –¥–ª—è {ub_username}")
                await asyncio.sleep(check_interval)
                continue
            
            # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            for pattern in ready_patterns:
                if re.search(pattern, logs_text, re.IGNORECASE):
                    # –ò—â–µ–º URL –≤ –ª–æ–≥–∞—Ö
                    url_match = re.search(r'http://[^\s]+', logs_text)
                    if url_match:
                        login_url = url_match.group(0)
                        logger.info(f"–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –¥–ª—è {ub_username}: {login_url}")
                        return login_url
            
            logger.debug(f"–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è {ub_username}, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ...")
            await asyncio.sleep(check_interval)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è {ub_username}: {e}")
            await asyncio.sleep(check_interval)
    
    logger.warning(f"–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è {ub_username}")
    return None

async def perform_installation_and_find_link(tg_user_id: int, chat_id: int, message_id: int, state: FSMContext, bot: Bot, is_private: bool = True):
    data = await state.get_data()
    ub_username = data.get("ub_username")
    ub_type = data.get("selected_ub_type")
    server_ip = data.get("server_ip")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—Ç
    port = await db.generate_random_port()
    if port is None:
        await bot.edit_message_caption(
            caption="‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n/start",
            chat_id=chat_id, message_id=message_id
        )
        return

    user_data = {"id": tg_user_id}
    try:
        user_chat = await bot.get_chat(tg_user_id)
        user_data["full_name"] = user_chat.full_name
    except Exception:
        pass
        
    server_details = server_config.get_servers().get(server_ip, {})
    log_data = {
        "user_data": user_data,
        "ub_info": {"name": ub_username, "type": ub_type},
        "server_info": {"ip": server_ip, "code": server_details.get("code", "N/A")}
    }

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–µ—Ä–µ–∑ API
    container_result = await api_manager.create_container(
        name=ub_username,
        port=port,
        userbot=ub_type,
        server_ip=server_ip
    )
    vpn_result = await api_manager.create_vpn(f"ub{tg_user_id}")
    vless_link = None
    for link in vpn_result.get("data", {}).get("links", []):
        vless_link = link
        await db.add_vpn(tg_user_id, link)
        continue

    if not container_result.get("success"):
        err = container_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')
        await bot.edit_message_caption(
            caption=f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:</b>\n{html.quote(err)}\n\n/start",
            chat_id=chat_id, message_id=message_id
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ)
        container_data = container_result.get("data", {}).get("data", {})
        username = container_data.get("username")
        password = container_data.get("password")
        if username and password:
            await db.add_password(tg_user_id, username, password)
        log_data["error"] = err
        await log_event(bot, "installation_failed", log_data)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    container_data = container_result.get("data", {}).get("data", {})
    username = container_data.get("username")
    password = container_data.get("password")
    subdomain = container_data.get("subdomain")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if username and password:
        await db.add_password(tg_user_id, username, password)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_success = await db.add_userbot_record(
        tg_user_id=tg_user_id,
        ub_username=ub_username,
        ub_type=ub_type,
        server_ip=server_ip,
        webui_port=port
    )

    if not db_success:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –ë–î, —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        await api_manager.delete_container(ub_username, server_ip)
        await bot.edit_message_caption(
            caption="‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n/start",
            chat_id=chat_id, message_id=message_id
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∂–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    await bot.edit_message_caption(
        caption="‚è≥ <b>–ò–¥–µ—Ç –∑–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞!</b>\n\n<blockquote>–≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 30 —Å–µ–∫—É–Ω–¥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.</blockquote>",
        chat_id=chat_id, message_id=message_id
    )

    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    login_url = await wait_for_webui_ready(ub_username, server_ip)
    
    if login_url:
        # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ running
        await db.update_userbot_status(ub_username, "running")
        
        # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤
        await bot.delete_message(chat_id, message_id)
        if is_private:
            await _show_login_link_success_from_new_message(bot, chat_id, ub_username, login_url, state)
        else:
            await _show_login_link_success_from_new_message(bot, tg_user_id, ub_username, login_url, state)
            await bot.send_message(
                chat_id=chat_id,
                text="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º."
            )
        await log_event(bot, "installation_success", log_data)
    else:
        # –¢–∞–π–º–∞—É—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ stopped –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        await db.update_userbot_status(ub_username, "stopped")
        
        await bot.edit_message_caption(
            caption="‚è≥ <b>–í—Ä–µ–º—è –≤—ã—à–ª–æ.</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –∑–∞ 2 –º–∏–Ω—É—Ç—ã. "
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞.",
            chat_id=chat_id, message_id=message_id,
            reply_markup=kb.get_retry_login_link_keyboard(ub_username)
        )
        await log_event(bot, "installation_timeout", log_data)

@router.message(Command("start"), F.chat.type != "private")
async def cmd_start_in_chat(message: types.Message):
    pass

@router.message(Command("review"), F.chat.type != "private")
async def cmd_review_in_chat(message: types.Message):
    pass

@router.message(Command("start"), F.chat.type == "private")
async def cmd_start(message: types.Message, state: FSMContext, bot: Bot, command: CommandObject):
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        user = message.from_user
        if await db.is_user_banned(user.id):
            ban_message = "‚ùå <b>–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.</b>\n\n–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –¥–ª—è –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."
            await message.answer(ban_message, message_thread_id=message.message_thread_id)
            return
        
        is_new_user = not await db.get_user_data(user.id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        ref_name = None
        if command.args and command.args.startswith("ref_"):
            ref_name = command.args[4:]  # –£–±–∏—Ä–∞–µ–º "ref_" –ø—Ä–µ—Ñ–∏–∫—Å
            if is_new_user:
                await db.add_referral_activation(ref_name, user.id)
                logging.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: {ref_name}")
        
        await db.register_or_update_user(tg_user_id=user.id, username=user.username, full_name=user.full_name)
        if not await db.has_user_accepted_agreement(user.id) and not config.TEST_MODE:
            if is_new_user:
                user_data_for_log = {"id": user.id, "full_name": user.full_name}
                if ref_name:
                    user_data_for_log["referral"] = ref_name
                await log_event(bot, "new_user_registered", {"user_data": user_data_for_log})
            text = ("üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeaHost!</b>\n\n"
                    "–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º. "
                    "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–Ω—è—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.")
            await message.answer(text, reply_markup=kb.get_agreement_keyboard())
        else:
            await _show_main_panel(bot=bot, chat_id=message.chat.id, user_id=user.id, user_name=user.full_name, state=state, topic_id=message.message_thread_id, owner_id=user.id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start, –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(Command("review"), F.chat.type == "private")
async def cmd_review(message: types.Message, state: FSMContext):
    text = (
        "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ TeaHost</b>\n\n"
        "‚ÑπÔ∏è –í –æ—Ç–∑—ã–≤–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å TeaHost, –∫–∞–∫–∏–µ –æ—Ç–ª–∏—á–∏—è –∑–∞–º–µ—Ç–∏–ª–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ —Ç.–¥.\n\n"
        "üìÖ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ @TeaHostReviews."
    )
    sent_message = await message.reply(text, reply_markup=kb.get_cancel_review_keyboard())
    await state.update_data(original_bot_message_id=sent_message.message_id)
    await state.set_state(UserReview.WaitingForReview)

@router.callback_query(F.data == "accept_agreement")
async def cq_accept_agreement(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        user = call.from_user
        await db.register_or_update_user(tg_user_id=user.id, username=user.username, full_name=user.full_name)
        await db.set_user_agreement_accepted(user.id)
        await safe_callback_answer(call, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.", show_alert=True)
        await _show_main_panel(bot=bot, chat_id=call.message.chat.id, user_id=user.id, user_name=user.full_name, state=state, message_id=call.message.message_id, topic_id=call.message.message_thread_id)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data == "back_to_main_panel")
async def cq_back_to_main_panel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await safe_callback_answer(call, "", show_alert=True)
        await _show_main_panel(bot=bot, chat_id=call.message.chat.id, user_id=call.from_user.id, user_name=call.from_user.full_name, state=state, message_id=call.message.message_id, topic_id=call.message.message_thread_id)
        await safe_callback_answer(call, "", show_alert=True)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data == "back_to_main_panel_delete")
async def cq_back_to_main_panel_delete(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await safe_callback_answer(call, "", show_alert=True)
        await _show_main_panel(bot=bot, chat_id=call.message.chat.id, user_id=call.from_user.id, user_name=call.from_user.full_name, state=state, topic_id=call.message.message_thread_id)
        await safe_callback_answer(call, "", show_alert=True)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

async def _start_installation_flow(call: types.CallbackQuery, state: FSMContext):
    from bot import BANNER_FILE_IDS
    photo_file = BANNER_FILE_IDS.get("select_server") or FSInputFile("banners/select_server.png")
    message_to_edit_id = call.message.message_id
    try:
        await call.message.edit_media(
            media=InputMediaPhoto(media=photo_file, caption="<b>[–®–∞–≥ 1/3] –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤..."),
            reply_markup=kb.get_loading_keyboard()
        )
    except TelegramBadRequest:
        await call.message.delete()
        new_msg = await call.message.answer_photo(
            photo=photo_file, 
            caption="<b>[–®–∞–≥ 1/3] –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...",
            reply_markup=kb.get_loading_keyboard()
        )
        message_to_edit_id = new_msg.message_id
    await state.update_data(message_id_to_edit=message_to_edit_id)

    servers = server_config.get_servers()
    tasks = [sm.get_server_stats(ip) for ip in servers.keys()]
    stats_results = await asyncio.gather(*tasks, return_exceptions=True)
    server_stats = {ip: result for ip, result in zip(servers.keys(), stats_results) if not isinstance(result, Exception)}
    await state.update_data(server_stats=server_stats)
    
    await _show_server_selection_page(call, state, page=1)
    await state.set_state(UserBotSetup.ChoosingServer)

@router.callback_query(F.data == "create_userbot_start", IsSubscribed(), StateFilter("*"))
async def cq_create_userbot_start(call: types.CallbackQuery, state: FSMContext):
    try:
        if len(await db.get_userbots_by_tg_id(call.from_user.id)) >= 1:
            await safe_callback_answer(call, "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —é–∑–µ—Ä–±–æ—Ç. –í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ.", show_alert=True)
            return
        
        await state.clear()
        await safe_callback_answer(call, "", show_alert=True)
        await _start_installation_flow(call, state)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

class ReinstallUBCallback(CallbackData, prefix="reinstall_ub_start_request"):
    ub_username: str
    owner_id: int
    
@router.callback_query(ReinstallUBCallback.filter())
async def cq_reinstall_ub_start_request(call: types.CallbackQuery, callback_data: ReinstallUBCallback, state: FSMContext, bot: Bot):
    try:
        ub_username = callback_data.ub_username
        owner_id = callback_data.owner_id
        if not check_panel_owner(call, owner_id):
            return
        await safe_callback_answer(call, "–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.in_({"server_unavailable", "server_test_unavailable", "server_noub", "server_full"}), UserBotSetup.ChoosingServer)
async def cq_server_unavailable(call: types.CallbackQuery):
    try:
        alerts = {
            "server_unavailable": "üî¥ –≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞.",
            "server_test_unavailable": "üß™ –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä!",
            "server_noub": "üü¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —é–∑–µ—Ä–±–æ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.",
            "server_full": "‚ùå –°–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä."
        }
        await safe_callback_answer(call, alerts.get(call.data, "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."), show_alert=True)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data == "server_is_service", UserBotSetup.ChoosingServer)
async def cq_service_server_selected(call: types.CallbackQuery):
    try:
        await safe_callback_answer(call, "‚ÑπÔ∏è –≠—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç.\n\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–∑–µ—Ä–±–æ—Ç–æ–≤ –Ω–∞ –Ω–µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", show_alert=True)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("confirm_unstable:"), UserBotSetup.ChoosingServer)
async def cq_confirm_unstable_server(call: types.CallbackQuery, state: FSMContext):
    try:
        await safe_callback_answer(call, "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É.", show_alert=True)
        server_ip = call.data.split(":")[1]
        await _proceed_to_type_selection(call, state, server_ip)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("ub_type:"), UserBotSetup.ChoosingUserBotType)
async def cq_process_ub_type_selection(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await safe_callback_answer(call, "", show_alert=True)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤–º–µ—Å—Ç–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
        _, ub_type, server_ip = call.data.split(":")
        await state.update_data(selected_ub_type=ub_type)
        
        user = call.from_user
        name_base = str(user.id)
        ub_username = f"ub{name_base}"

        await state.update_data(chosen_username_base=name_base, ub_username=ub_username)

        current_state = await state.get_state()
        if current_state != UserBotSetup.Reinstalling.state and await db.get_userbot_data(ub_username=ub_username):
            await safe_callback_answer(call, "‚ùå <b>–û—à–∏–±–∫–∞:</b> –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —é–∑–µ—Ä–±–æ—Ç —Å —Ç–∞–∫–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –∏–º–µ–Ω–µ–º.\n\n"
                        "–≠—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞. "
                        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.", show_alert=True)
            await state.clear()
            return

        data = await state.get_data()
        message_id = data.get("message_id_to_edit", call.message.message_id)

        try:
            await safe_callback_answer(call, "", show_alert=True)
            await call.bot.edit_message_caption(
                chat_id=call.message.chat.id, message_id=message_id,
                caption="<b>[–®–∞–≥ 3/3] –£—Å—Ç–∞–Ω–æ–≤–∫–∞...</b>\n\n<blockquote>–≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.</blockquote>",
                reply_markup=kb.get_loading_keyboard()
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise

        await state.set_state(UserBotSetup.InstallingUserBot)
        asyncio.create_task(perform_installation_and_find_link(call.from_user.id, call.message.chat.id, message_id, state, bot, is_private=(call.message.chat.type == 'private')))
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data == "go_to_control_panel", IsSubscribed(), StateFilter("*"))
async def cq_go_to_control_panel(call: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É '–ó–∞–≥—Ä—É–∑–∫–∞...' –Ω–∞ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–Ω–µ–ª–∏
        await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
        with open("/tmp/bot_debug.log", "a") as f:
            f.write(f"{datetime.now()}: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback\n")
        
        if call.message.chat.type != "private":
            with open("/tmp/bot_debug.log", "a") as f:
                f.write(f"{datetime.now()}: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–∞ - –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π\n")
            if call.message.reply_to_message:
                owner_id = call.message.reply_to_message.from_user.id
                if call.from_user.id != owner_id:
                    await safe_callback_answer(call, "–¢–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /start, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
                    return
            else:
                await safe_callback_answer(call, "–¢–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /start, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
                return
        
        with open("/tmp/bot_debug.log", "a") as f:
            f.write(f"{datetime.now()}: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback\n")
        await safe_callback_answer(call, "", show_alert=True)
        
        with open("/tmp/bot_debug.log", "a") as f:
            f.write(f"{datetime.now()}: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É\n")
        await safe_callback_answer(call, "", show_alert=True)

        with open("/tmp/bot_debug.log", "a") as f:
            f.write(f"{datetime.now()}: –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–±–æ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}\n")
        print(f"DEBUG: –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–±–æ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
        all_bots = await db.get_userbots_by_tg_id(call.from_user.id)
        with open("/tmp/bot_debug.log", "a") as f:
            f.write(f"{datetime.now()}: –ù–∞–π–¥–µ–Ω–æ —é–∑–µ—Ä–±–æ—Ç–æ–≤: {len(all_bots)}\n")
        print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ —é–∑–µ—Ä–±–æ—Ç–æ–≤: {len(all_bots)}")
        
        if not all_bots:
            with open("/tmp/bot_debug.log", "a") as f:
                f.write(f"{datetime.now()}: –Æ–∑–µ—Ä–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n")
            print(f"DEBUG: –Æ–∑–µ—Ä–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await safe_callback_answer(call, "‚ùå –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
            await _show_main_panel(call.bot, call.message.chat.id, call.from_user.id, call.from_user.full_name, state, call.message.message_id)
            return

        with open("/tmp/bot_debug.log", "a") as f:
            f.write(f"{datetime.now()}: –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —é–∑–µ—Ä–±–æ—Ç\n")
        print(f"DEBUG: –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —é–∑–µ—Ä–±–æ—Ç")
        the_only_bot = all_bots[0]
        ub_username = the_only_bot['ub_username']
        server_ip = the_only_bot['server_ip']
        with open("/tmp/bot_debug.log", "a") as f:
            f.write(f"{datetime.now()}: –Æ–∑–µ—Ä–±–æ—Ç: {ub_username}, —Å–µ—Ä–≤–µ—Ä: {server_ip}\n")
        print(f"DEBUG: –Æ–∑–µ—Ä–±–æ—Ç: {ub_username}, —Å–µ—Ä–≤–µ—Ä: {server_ip}")
        service_name = f"hikka-{ub_username}.service"
        
        with open("/tmp/bot_debug.log", "a") as f:
            f.write(f"{datetime.now()}: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞\n")
        print(f"DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        container_exists = True  # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
        disk_space_ok = True  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        
        with open("/tmp/bot_debug.log", "a") as f:
            f.write(f"{datetime.now()}: –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω\n")
        print(f"DEBUG: –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω")

        # if not container_exists or not disk_space_ok:
        #     error_text = (
        #         f"<b>üéõ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
        #         f"<i>üò¢ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ —é–∑–µ—Ä–±–æ—Ç–∞/—Å–µ—Ä–≤–µ—Ä–∞.</i>\n\n"
        #         f"<b>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ <code>10-15</code> –º–∏–Ω—É—Ç</b>"
        #     )
        #     builder = InlineKeyboardBuilder()
        #     builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"health_check_retry:{ub_username}")
        #     builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_panel")
        #     await call.message.edit_caption(caption=error_text, reply_markup=builder.as_markup())
        #     return
        
        if len(all_bots) == 1:
            with open("/tmp/bot_debug.log", "a") as f:
                f.write(f"{datetime.now()}: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞ {ub_username}\n")
            print(f"DEBUG: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞ {ub_username}")
            await show_management_panel(call, ub_username, state)
            return

        logging.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–±–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞")
        text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>"
        markup = kb.get_user_bots_list_keyboard(all_bots, call.from_user.id)
        await safe_callback_answer(call, text, show_alert=True)
        await call.message.edit_caption(caption=text, reply_markup=markup)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("select_ub_panel:"))
async def cq_select_ub_panel(call: types.CallbackQuery, state: FSMContext):
    try:
        ub_username = call.data.split(":")[1]
        await show_management_panel(call, ub_username, state)
        await safe_callback_answer(call, "", show_alert=True)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("refresh_panel:"))
async def cq_refresh_panel(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.answer()

        parts = call.data.split(":")
        ub_username = parts[1]
        
        owner_id_str = parts[2] if len(parts) >= 3 else str(call.from_user.id)
        owner_id = int(owner_id_str)

        if not check_panel_owner(call, owner_id):
            return

        await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
        await show_management_panel(call, ub_username, state)

    except (TelegramBadRequest, ValueError, IndexError) as e:
        if isinstance(e, TelegramBadRequest) and "message is not modified" in str(e).lower():
            return
        
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        await call.answer("–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –í—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("show_user_logs:"))
async def cq_show_user_logs(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        _, log_type, ub_username, owner_id_str, page = call.data.split(":")
        owner_id = int(owner_id_str)
        if not check_panel_owner(call, owner_id):
            return
        await safe_callback_answer(call, "", show_alert=True)
        try:
            page = int(page)
        except ValueError:
            await safe_callback_answer(call, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
            return
        ub_data = await db.get_userbot_data(ub_username)
        if not ub_data:
            await safe_callback_answer(call, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —é–∑–µ—Ä–±–æ—Ç—É.", show_alert=True)
            return
        is_pagination = call.message.text is not None
        msg_to_edit = call.message
        if not is_pagination:
            await safe_callback_answer(call, "", show_alert=True)
            msg_to_edit = await call.bot.send_message(call.from_user.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ª–æ–≥–∏...", reply_markup=kb.get_loading_keyboard())
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
            try:
                await call.message.delete()
            except Exception:
                pass
        else:
            await safe_callback_answer(call, "", show_alert=True)
            await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        if log_type == "docker":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            server_status = server_config.get_server_status_by_ip(ub_data['server_ip'])
            if server_status in ["false", "not_found"]:
                logs = f"‚ùå –°–µ—Ä–≤–µ—Ä {ub_data['server_ip']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            else:
                container_name = ub_username  # –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ = –∏–º—è —é–∑–µ—Ä–±–æ—Ç–∞
                logs_result = await api_manager.get_container_logs(container_name, ub_data['server_ip'])
                
                if logs_result.get("success"):
                    logs_data = logs_result.get("data", {})
                    logs = logs_data.get("logs", "")
                else:
                    error_msg = logs_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    if "No such container" in error_msg or "404" in error_msg:
                        logs = f"‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
                    else:
                        logs = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {error_msg}"
        else:
            logs = await sm.get_userbot_logs(ub_username, ub_data['server_ip'], log_type, 1000)

        if not logs or logs.startswith("‚ùå") or logs.startswith("üìú –õ–æ–≥–∏"):
            await safe_callback_answer(call, f"üìú {logs}", show_alert=True)
            await show_management_panel(call, ub_username, state)
            await call.bot.send_message(call.from_user.id, f"üìú {logs}")
            return
        
        log_lines = logs.strip().split('\n')
        total_pages = max(1, (len(log_lines) + LOG_LINES_PER_PAGE - 1) // LOG_LINES_PER_PAGE)
        page = max(1, min(page, total_pages))
        start_index = (page - 1) * LOG_LINES_PER_PAGE
        end_index = start_index + LOG_LINES_PER_PAGE
        page_content = "\n".join(log_lines[start_index:end_index])
        
        text = (f"üìú <b>–õ–æ–≥–∏ ({log_type.capitalize()}) –¥–ª—è <code>{html.quote(ub_username)}</code></b>\n"
                f"<i>(–°—Ç—Ä. {page}/{total_pages}, –Ω–æ–≤—ã–µ –ª–æ–≥–∏ —Å–≤–µ—Ä—Ö—É)</i>\n\n"
                f"<pre>{html.quote(page_content)}</pre>")
                
        if len(text) > 4096:
            text = text[:4090] + "...</pre>"

        markup = kb.get_user_logs_paginator_keyboard(log_type, ub_username, page, total_pages, owner_id)
        
        try:
            await safe_callback_answer(call, text, show_alert=True)
            await msg_to_edit.edit_text(text=text, reply_markup=markup)
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e).lower():
                if "message to edit not found" in str(e).lower():
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await safe_callback_answer(call, text, show_alert=True)
                    await call.bot.send_message(call.from_user.id, text=text, reply_markup=markup)
                else:
                    logging.error(f"Error editing message with logs: {e}")
                    await safe_callback_answer(call, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.", show_alert=True)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("show_container_stats:"))
async def cq_show_container_stats(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        _, ub_username, owner_id_str = call.data.split(":")
        owner_id = int(owner_id_str)
        if not check_panel_owner(call, owner_id):
            return
        await safe_callback_answer(call, "–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...", show_alert=True)
        
        ub_data = await db.get_userbot_data(ub_username)
        if not ub_data:
            await safe_callback_answer(call, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —é–∑–µ—Ä–±–æ—Ç—É.", show_alert=True)
            return

        server_ip = ub_data.get('server_ip')
        if not server_ip:
            await safe_callback_answer(call, "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        await safe_callback_answer(call, "", show_alert=True)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ API
            stats_result = await api_manager.get_container_stats(ub_username, server_ip)
            
            if not stats_result.get("success"):
                error_msg = stats_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await safe_callback_answer(call, f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n\n<pre>{html.quote(error_msg)}</pre>", show_alert=True)
                return
            
            stats_data = stats_result.get("data", {})
            formatted_stats = format_container_stats(stats_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            builder = InlineKeyboardBuilder()
            builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"show_container_stats:{ub_username}:{owner_id_str}")
            builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"refresh_panel:{ub_username}:{owner_id_str}")
            builder.adjust(2)
            
            await safe_callback_answer(call, formatted_stats, show_alert=True)
            await call.message.edit_caption(
                caption=formatted_stats,
                reply_markup=builder.as_markup()
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await safe_callback_answer(call, f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n\n<pre>{html.quote(str(e))}</pre>", show_alert=True)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("manage_ub:"))
async def cq_manage_container(call: types.CallbackQuery, state: FSMContext):
    try:
        parts = call.data.split(":")
        action = parts[1]
        ub_username = parts[2]
        owner_id_str = parts[3]
        owner_id = int(owner_id_str)

        if not check_panel_owner(call, owner_id):
            return

        ub_data = None
        server_ip = None
        if action not in ["recreate"]:
            ub_data = await db.get_userbot_data(ub_username)
            if not ub_data:
                await safe_callback_answer(call, "‚ùå –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            server_ip = ub_data.get('server_ip')
            if not server_ip:
                await safe_callback_answer(call, "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

        if action == "start":
            await safe_callback_answer(call, "", show_alert=True)
            await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
            result = await api_manager.start_container(ub_username, server_ip)
            action_text = "–∑–∞–ø—É—Å–∫"

        elif action == "stop":
            await safe_callback_answer(call, "", show_alert=True)
            await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
            result = await api_manager.stop_container(ub_username, server_ip)
            action_text = "–æ—Å—Ç–∞–Ω–æ–≤–∫–∞"

        elif action == "restart":
            await safe_callback_answer(call, "", show_alert=True)
            await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
            result = await api_manager.restart_container(ub_username, server_ip)
            action_text = "–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"

        elif action == "recreate":
            await call.message.edit_caption(
                caption="üîÑ <b>–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏:",
                reply_markup=kb.get_reinstall_userbot(ub_username, owner_id_str)
            )
            return

        elif action == "reinstall":
            _, _, ub_username, owner_id_str, userbot = parts

            await safe_callback_answer(call, "", show_alert=True)
            ub_data = await db.get_userbot_data(ub_username)
            server_ip = ub_data.get('server_ip')
            await call.message.edit_caption(caption="üîÑ <b>–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞</b>\n\n–ò–¥—ë—Ç –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∞—à–µ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞")
            await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
            result = await api_manager.reinstall_ub(ub_username, userbot, server_ip)
            update_info = await db.update_type(ub_username, userbot)
            action_text = f"–ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ ({userbot})"

        elif action == "vpn":
            tg_id = call.from_user.id
            vpn_data = await db.get_vpn(tg_id)
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

            if not vpn_data:
                name = f"ub{tg_id}"
                vpn_result = await api_manager.create_vpn(name)
                if vpn_result.get("success"):
                    vless_link = None
                    for link in vpn_result.get("data", {}).get("links", []):
                        if link.startswith("vless://"):
                            vless_link = link
                            break
                    if vless_link:
                        await db.add_vpn(tg_id, vless_link)
                        vpn_data = vless_link
                    else:
                        await safe_callback_answer(call, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å VPN —Å—Å—ã–ª–∫—É", show_alert=True)
                        return
                else:
                    error_msg = vpn_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    await safe_callback_answer(call, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VPN: {error_msg}", show_alert=True)
                    return

            vpn_text = (
                "<b>üîê –í–∞—à VPN –¥–æ—Å—Ç—É–ø</b>\n\n"
                "<blockquote>"
                "<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
                f"<code>{vpn_data}</code>\n\n"
                "<b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:</b>\n"
                "1. –°–∫–∞—á–∞–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
                "\n"
                "<b>iOS/Mac:</b>\n"
                "- <a href='https://apps.apple.com/ru/app/v2raytun/id6476628951'>V2RayTun (App Store)</a>\n"
                "\n"
                "<b>Android:</b>\n"
                "- <a href='https://play.google.com/store/apps/details?id=com.v2raytun.android&hl=ru'>V2RayTun (Google Play)</a>\n"
                "- <a href='https://github.com/MatsuriDayo/NekoBoxForAndroid/releases/download/1.3.9/NekoBox-1.3.9-arm64-v8a.apk'>NekoBox (arm64)</a>\n"
                "- <a href='https://github.com/MatsuriDayo/NekoBoxForAndroid/releases/download/1.3.9/NekoBox-1.3.9-x86_64.apk'>NekoBox (x86_64)</a>\n"
                "\n"
                "<b>Windows:</b>\n"
                "- <a href='https://github.com/MatsuriDayo/nekoray/releases/download/4.0.1/nekoray-4.0.1-2024-12-12-windows64.zip'>Nekoray (Windows)</a>\n"
                "\n"
                "<b>Linux:</b>\n"
                "- <a href='https://github.com/MatsuriDayo/nekoray/releases/download/4.0.1/nekoray-4.0.1-2024-12-12-linux-x64.AppImage'>Nekoray (Linux x64)</a>\n"
                "\n"
                "2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–º–ø–æ—Ä—Ç –ø–æ —Å—Å—ã–ª–∫–µ\n"
                "3. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å\n"
                "\n"
                "<b>‚ÑπÔ∏è –ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:</b>\n"
                "- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª–∏–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, Hiddify)\n"
                "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n"
                "- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @TeaHostSupport"
                "</blockquote>"
            )
            buttons = [
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_control_panel")]
            ]
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await call.message.edit_caption(
                caption=vpn_text,
                reply_markup=markup,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            return

        elif action == "auth":
            tg_id = call.from_user.id
            auth_data = await db.get_password(tg_id)
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

            if not auth_data:
                auth_message = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
                markup = kb.back_to_panel()
            else:
                password = auth_data.get('password', '–ù–µ —É–∫–∞–∑–∞–Ω')
                auth_message = (
                    "<b>üîë –í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞</b>\n\n"
                    f"<b>–ü–∞—Ä–æ–ª—å:</b> <tg-spoiler>{password}</tg-spoiler>\n\n"
                    "<i>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –Ω–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.</i>\n\n"
                    "<b>‚ùóÔ∏è –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –ø–∞—Ä–æ–ª–µ–º —Å –¥—Ä—É–≥–∏–º–∏!</b>"
                )
                buttons = [
                    [InlineKeyboardButton(text="üîë –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å", copy_text=CopyTextButton(text=password))],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_control_panel")]
                ]
                markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await call.message.edit_caption(
                caption=auth_message,
                reply_markup=markup,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            return

        else:
            await safe_callback_answer(call, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            return

        if result.get("success"):
            try:
                await show_management_panel(call, ub_username, state)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏: {e}")
                await safe_callback_answer(call, f"‚úÖ {action_text.capitalize()} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", show_alert=True)
        else:
            error_msg = result.get("error", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞").lower()
            server_details = server_config.get_servers().get(server_ip, {})
            server_code = server_details.get("code", "N/A")
            
            log_data = {
                "user_data": {"id": call.from_user.id, "full_name": call.from_user.full_name},
                "ub_info": {"name": ub_username},
                "server_info": {"ip": server_ip, "code": server_code},
                "error": f"–î–µ–π—Å—Ç–≤–∏–µ '{action}': {result.get('error', 'N/A')}"
            }
            asyncio.create_task(log_event(call.bot, "api_container_error", log_data))

            if "invalid token" in error_msg or "403" in error_msg:
                text = f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_code} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @aloya_uwu –∏–ª–∏ @nloveuser."
                await call.message.edit_caption(caption=text, reply_markup=kb.get_back_to_main_panel_keyboard())
                return
            elif "connection refused" in error_msg or "cannot connect" in error_msg:
                text = "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @aloya_uwu, @nloveuser –∏–ª–∏ @EXPERT_CATPON."
                await call.message.edit_caption(caption=text, reply_markup=kb.get_back_to_main_panel_keyboard())
                return
            elif "internal server error" in error_msg or "not found" in error_msg or "resource temporarily unavailable" in error_msg:
                text = "–ë—Ä–∞—Ç, —É —Ç–µ–±—è –ø–∏–∑–¥–µ—Ü —Å–ª—É—á–∏–ª—Å—è, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @aloya_uwu –∏–ª–∏ @nloveuser."
                await call.message.edit_caption(caption=text, reply_markup=kb.get_back_to_main_panel_keyboard())
                return
            
            try:
                await safe_callback_answer(call, f"‚ùå –û—à–∏–±–∫–∞ {action_text}: {result.get('error')}", show_alert=True)
            except Exception:
                pass
            try:
                await show_management_panel(call, ub_username, state)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º: {e}")
        try:
            await safe_callback_answer(call, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        except aiogram.exceptions.TelegramBadRequest as tg_error:
            if "query is too old" in str(tg_error).lower() or "response timeout expired" in str(tg_error).lower():
                logging.warning(f"Callback query —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}: {tg_error}")
            else:
                logging.error(f"TelegramBadRequest –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {tg_error}")
        except Exception as answer_error:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {answer_error}")

        try:
            await show_management_panel(call, ub_username, state)
        except Exception as panel_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {panel_error}")

@router.callback_query(F.data.startswith("inline_btn_manage:"))
async def cq_inline_manage_container(call: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        _, action, ub_username, owner_id_str, inline_message_id = call.data.split(":")
        owner_id = int(owner_id_str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not check_panel_owner(call, owner_id):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–±–æ—Ç–∞
        ub_data = await db.get_userbot_data(ub_username)
        if not ub_data:
            await safe_callback_answer(call, "‚ùå –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        server_ip = ub_data.get('server_ip')
        if not server_ip:
            await safe_callback_answer(call, "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°—Ä–∞–∑—É –∑–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ "–ó–∞–≥—Ä—É–∑–∫–∞..."
        try:
            await safe_callback_answer(call, "", show_alert=True)
            await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await safe_callback_answer(call, "‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É...", show_alert=True)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if action == "start":
            result = await api_manager.start_container(ub_username, server_ip)
            action_text = "–∑–∞–ø—É—Å–∫"
        elif action == "stop":
            result = await api_manager.stop_container(ub_username, server_ip)
            action_text = "–æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
        elif action == "restart":
            result = await api_manager.restart_container(ub_username, server_ip)
            action_text = "–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
        else:
            await safe_callback_answer(call, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
            return
        
        if result.get("success"):
            # –û–±–Ω–æ–≤–ª—è–µ–º inline —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await show_management_panel(call, ub_username, state)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ inline –ø–∞–Ω–µ–ª–∏: {e}")
                await safe_callback_answer(call, "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", show_alert=True)
        else:
            error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            try:
                await safe_callback_answer(call, f"‚ùå –û—à–∏–±–∫–∞ {action_text}: {error_msg}", show_alert=True)
            except Exception:
                # –ï—Å–ª–∏ callback query —É—Å—Ç–∞—Ä–µ–ª, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                pass
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            try:
                await show_management_panel(call, ub_username, state)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ inline –ø–∞–Ω–µ–ª–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {e}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ inline —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º: {e}")
        try:
            await safe_callback_answer(call, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        except aiogram.exceptions.TelegramBadRequest as tg_error:
            # –ï—Å–ª–∏ callback query —É—Å—Ç–∞—Ä–µ–ª, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if "query is too old" in str(tg_error).lower() or "response timeout expired" in str(tg_error).lower():
                logging.warning(f"Callback query —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}: {tg_error}")
            else:
                logging.error(f"TelegramBadRequest –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback: {tg_error}")
        except Exception as answer_error:
            # –ï—Å–ª–∏ callback query —É—Å—Ç–∞—Ä–µ–ª, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {answer_error}")
        # –í —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å
        try:
            await show_management_panel(call, ub_username, state)
        except Exception as panel_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ inline –ø–∞–Ω–µ–ª–∏ –ø–æ—Å–ª–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {panel_error}")

@router.callback_query(F.data.startswith("noop"))
async def noop_handler(call: types.CallbackQuery):
    await call.answer()

@router.callback_query(F.data.startswith("delete_ub_confirm_request:"))
async def cq_delete_ub_confirm_request(call: types.CallbackQuery, state: FSMContext):
    try:
        parts = call.data.split(":")
        if len(parts) < 3:
            await safe_callback_answer(call, "–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞–Ω–µ–ª—å.", show_alert=True)
            return
        _, ub_username, owner_id_str = parts
        owner_id = int(owner_id_str)
        if not check_panel_owner(call, owner_id):
            return
        text = (
            f"<b>‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞—à —é–∑–µ—Ä–±–æ—Ç?</b>\n\n"
            f"‚ùóÔ∏è –í—Å–µ –≤–∞—à–∏ –º–æ–¥—É–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç <b>–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã</b>."
        )
        markup = kb.get_confirm_delete_keyboard(ub_username)
        try:
            if call.message.text:
                await call.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
            elif call.message.caption:
                await call.message.edit_caption(caption=text, reply_markup=markup, parse_mode="HTML")
            else:
                await call.message.answer(text, reply_markup=markup, parse_mode="HTML")
        except TelegramBadRequest as e:
            err_str = str(e).lower()
            if "message is not modified" in err_str:
                pass
            else:
                await call.message.answer(text, reply_markup=markup, parse_mode="HTML")
        await state.set_state(UserBotSetup.ConfirmDeleteUserBot)
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ cq_delete_ub_confirm_request: {e}")
        await safe_callback_answer(call, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("delete_ub_cancel:"), UserBotSetup.ConfirmDeleteUserBot)
async def cq_delete_ub_cancel(call: types.CallbackQuery, state: FSMContext):
    try:
        await call.answer(
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–∫ –±—ã —Å–Ω–æ—Å–∏—Ç –≤–µ—Å—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä/—é–∑–µ—Ä–±–æ—Ç!",
            show_alert=True
        )

        await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())

        ub_username = call.data.split(":")[1]

        await asyncio.sleep(0.5)

        await show_management_panel(call, ub_username, state)

    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_delete_ub_cancel: {e}")
            await call.answer("–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –í—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ cq_delete_ub_cancel: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        
@router.callback_query(F.data.startswith("delete_ub_execute:"), UserBotSetup.ConfirmDeleteUserBot)
async def cq_delete_ub_execute(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤–º–µ—Å—Ç–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
        await safe_callback_answer(call, "", show_alert=True)

        await safe_callback_answer(call, "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–∞...</b>\n\n<blockquote>–≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.</blockquote>", show_alert=True)

        ub_username = call.data.split(":")[1]
        
        ub_data = await db.get_userbot_data(ub_username)
        if not ub_data:
            await safe_callback_answer(call, "‚ùå <b>–û—à–∏–±–∫–∞:</b> –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
            return

        await db.update_userbot_status(ub_username, "deleting")
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–µ—Ä–µ–∑ API
        tg_id = call.from_user.id
        delete_result = await api_manager.delete_container(ub_username, ub_data['server_ip'])
        await db.delete_password(tg_id)
        await db.delete_vpn(tg_id)
        await api_manager.delete_vpn(f"ub{tg_id}")
        
        if delete_result.get("success"):
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await db.delete_userbot_record(ub_username)
            
            user_data = {"id": call.from_user.id, "full_name": call.from_user.full_name}
            server_details = server_config.get_servers().get(ub_data['server_ip'], {})
            log_data = {
                "user_data": user_data,
                "ub_info": {"name": ub_username},
                "server_info": {"ip": ub_data['server_ip'], "code": server_details.get("code", "N/A")}
            }
            await log_event(call.bot, "deletion_by_owner", log_data)
            
            await _show_main_panel(bot=bot, chat_id=call.message.chat.id, user_id=call.from_user.id,
                user_name=call.from_user.full_name, state=state, message_id=call.message.message_id
            )
        else:
            error_message = delete_result.get('error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')
            await safe_callback_answer(call, f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:</b>\n\n<pre>{html.quote(error_message)}</pre>", show_alert=True)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    try:
        user_id = call.from_user.id
        try:
            member = await bot.get_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
            if member.status not in ["left", "kicked"]:
                await safe_callback_answer(call, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
                await call.message.delete()
                await safe_callback_answer(call, "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞ /start", show_alert=True)
            else:
                await safe_callback_answer(call, "üö´ –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        except Exception as e:
            await safe_callback_answer(call, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ: {e}")
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("share_panel_start:"))
async def cq_share_panel_start(call: types.CallbackQuery, state: FSMContext):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–∞–Ω–µ–ª—å—é'"""
    await safe_callback_answer(call, "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–∞–Ω–µ–ª—å—é' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!", show_alert=True)

@router.message(StateFilter(UserBotShare.WaitingForShareUserID))
async def msg_process_share_user_id(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    ub_username = data.get("ub_username")
    message_id_to_edit = data.get("message_id_to_edit")
    await message.delete()
    if not message.text or not message.text.isdigit():
        await safe_callback_answer(message, "‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            chat_id=message.chat.id, message_id=message_id_to_edit,
            reply_markup=kb.get_cancel_revoke_shared_keyboard(ub_username)
        )
        return
    share_user_id = int(message.text)
    if share_user_id == message.from_user.id:
        await safe_callback_answer(message, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–∞–Ω–µ–ª—å—é —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.",
            chat_id=message.chat.id, message_id=message_id_to_edit)
        await show_management_panel(message, ub_username, state)
        return
    if await db.has_userbot_shared_access(ub_username, share_user_id):
        await safe_callback_answer(message, "‚ùóÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.",
            chat_id=message.chat.id, message_id=message_id_to_edit)
        await show_management_panel(message, ub_username, state)
        return
    await state.update_data(share_user_id=share_user_id)
    await state.set_state(UserBotShare.ConfirmingShare)
    user = await bot.get_chat(share_user_id)
    user_display = f"@{user.username}" if user.username else user.full_name
    text = f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ <code>{html.quote(ub_username)}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {html.quote(user_display)} (<code>{share_user_id}</code>)?"
    markup = kb.get_confirm_share_panel_keyboard(ub_username, share_user_id)
    await safe_callback_answer(message, text, chat_id=message.chat.id, message_id=message_id_to_edit, reply_markup=markup)
    

@router.callback_query(F.data.startswith("confirm_share_panel:"), UserBotShare.ConfirmingShare)
async def cq_confirm_share_panel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        _, ub_username, share_user_id_str = call.data.split(":")
        share_user_id = int(share_user_id_str)
        owner = call.from_user
        text = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {html.quote(owner.full_name)} (<code>{owner.id}</code>) —Ö–æ—á–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–æ–º <code>{html.quote(ub_username)}</code>.\n\n"
                "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –¥–æ—Å—Ç—É–ø? –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.")
        markup = kb.get_accept_share_panel_keyboard(ub_username, owner.id)
        
        try:
            await safe_callback_answer(call, "", show_alert=True)
            await call.bot.send_message(chat_id=share_user_id, text=text, reply_markup=markup)
            await safe_callback_answer(call, "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...", reply_markup=kb.get_back_to_main_panel_keyboard())
        except TelegramForbiddenError:
            await safe_callback_answer(call, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.", show_alert=True)
            await safe_callback_answer(call, "‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", reply_markup=kb.get_back_to_main_panel_keyboard())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {share_user_id}: {e}")
            await safe_callback_answer(call, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", show_alert=True)
            await safe_callback_answer(call, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", reply_markup=kb.get_back_to_main_panel_keyboard())
        
        await state.clear()
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("accept_share_panel:"), F.chat.type == "private")
async def cq_accept_share_panel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        _, ub_username, owner_id_str = call.data.split(":")
        await db.add_userbot_shared_access(ub_username, call.from_user.id)
        
        try:
            owner_id = int(owner_id_str)
            sharer_data_log = {"id": owner_id, "full_name": (await bot.get_chat(owner_id)).full_name}
            user_data_log = {"id": call.from_user.id, "full_name": call.from_user.full_name}
            ub_info_log = {"name": ub_username}
            log_data = {"sharer_data": sharer_data_log, "user_data": user_data_log, "ub_info": ub_info_log}
            await log_event(bot, "panel_shared_accepted", log_data)
        except Exception as e:
            logging.error(f"Failed to log panel share event: {e}")

        await safe_callback_answer(call, "‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º —é–∑–µ—Ä–±–æ—Ç–æ–º.", show_alert=True)
        await show_management_panel(call, ub_username, state)
        
        try:
            await safe_callback_answer(call, "", show_alert=True)
            await call.bot.send_message(chat_id=int(owner_id_str), text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{call.from_user.id}</code> –ø—Ä–∏–Ω—è–ª –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ <code>{html.quote(ub_username)}</code>.")
        except TelegramForbiddenError:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id_str} –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id_str}: {e}")
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("accept_share_panel:"))
async def cq_accept_share_panel_fallback(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        chat = getattr(call.message, "chat", None)
        if chat and chat.type == "private":
            await cq_accept_share_panel(call, state, bot)
        else:
            await safe_callback_answer(call,
                "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–∞–Ω–µ–ª—å—é' —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
                show_alert=True
            )
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("decline_share_panel:"), F.chat.type == "private")
async def cq_decline_share_panel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        await safe_callback_answer(call, "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", show_alert=True)
        await safe_callback_answer(call, "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç—Ç–∏–º —é–∑–µ—Ä–±–æ—Ç–æ–º.", show_alert=True)
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.callback_query(F.data.startswith("decline_share_panel:"), F.chat.type != "private")
async def cq_decline_share_panel_in_chat(call: types.CallbackQuery):
    try:
        await safe_callback_answer(call,
            "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–∞–Ω–µ–ª—å—é' —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
            show_alert=True
        )
    except TelegramBadRequest:
        await safe_callback_answer(call, "–£–ø—Å... –∫–∞–∂–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–∑–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /start", show_alert=True)

@router.message(Command("ping"))
async def cmd_ping(message: types.Message):
    user_id = message.from_user.id
    current_time = time.time()

    if user_id in PING_TIMESTAMPS:
        if current_time - PING_TIMESTAMPS[user_id] < PING_COOLDOWN_SECONDS:
            return

    PING_TIMESTAMPS[user_id] = current_time
    
    start_time = time.perf_counter()
    msg = await message.reply("...")
    end_time = time.perf_counter()
    delay = (end_time - start_time) * 1000
    await msg.edit_text(f"üèì <b>–ü–æ–Ω–≥!</b>\n–ó–∞–¥–µ—Ä–∂–∫–∞: <code>{delay:.2f} –º—Å</code>")
    
@router.message(Command("review"), F.chat.type == "private")
async def cmd_review(message: types.Message, state: FSMContext):
    text = (
        "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ TeaHost</b>\n\n"
        "‚ÑπÔ∏è –í –æ—Ç–∑—ã–≤–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å TeaHost, –∫–∞–∫–∏–µ –æ—Ç–ª–∏—á–∏—è –∑–∞–º–µ—Ç–∏–ª–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ —Ç.–¥.\n\n"
        "üìÖ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ @TeaHostReviews."
    )
    sent_message = await message.reply(text, reply_markup=kb.get_cancel_review_keyboard())
    await state.update_data(original_bot_message_id=sent_message.message_id)
    await state.set_state(UserReview.WaitingForReview)

@router.message(Command("review"), F.chat.type != "private")
async def cmd_review_in_chat(message: types.Message):
    key = (message.chat.id, message.from_user.id)
    if review_warned_users[key]:
        return
    await message.reply(
        "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /review —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º."
    )
    review_warned_users[key] = True

@router.message(F.chat.type != "private")
async def reset_review_warn_flag(message: types.Message):
    if message.text and message.text.strip().startswith("/review"):
        return
    key = (message.chat.id, message.from_user.id)
    if review_warned_users[key]:
        review_warned_users[key] = False

@router.callback_query(F.data == "cancel_review", StateFilter(UserReview.WaitingForReview))
async def cq_cancel_review(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer("200 OK.", show_alert=True)
    try:
        await call.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            pass
        else:
            logging.error(f"–æ—à–∏–±–æ—á–∫–∞, –≤–æ—Ç –ª–æ–≥: {e}")

@router.message(StateFilter(UserReview.WaitingForReview))
async def process_review_text(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    original_bot_message_id = data.get("original_bot_message_id")
    
    await state.clear()
    admins = get_all_admins()
    
    for admin_id in admins:
        try:
            forwarded_msg = await bot.forward_message(
                chat_id=admin_id, from_chat_id=message.chat.id, message_id=message.message_id
            )
            await bot.send_message(
                chat_id=admin_id, text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?",
                reply_to_message_id=forwarded_msg.message_id,
                reply_markup=kb.get_review_approval_keyboard(message.from_user.id, message.message_id)
            )
        except TelegramForbiddenError:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
    await safe_callback_answer(message, "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.", show_alert=True)
    
    if original_bot_message_id:
        try:
            await safe_callback_answer(message, "", show_alert=True)
            await bot.edit_message_reply_markup(
                chat_id=message.chat.id, message_id=original_bot_message_id, reply_markup=None
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–æ–º: {e}")

@router.message(Command("commits"))
async def cmd_commits(message: types.Message):
    text, markup = await _get_commits_list_message()
    await message.answer(text, reply_markup=markup)

@router.callback_query(F.data.startswith("view_commit:"))
async def cq_view_commit(call: types.CallbackQuery):
    await safe_callback_answer(call, "", show_alert=True)
    commit_id = call.data.split(":")[1]
    await _display_commit_details(call, commit_id)

@router.callback_query(F.data.startswith("vote_commit:"))
async def cq_vote_commit(call: types.CallbackQuery):
    _, commit_id, vote_type_str = call.data.split(":")
    vote_type = int(vote_type_str)
    
    await db.set_vote(commit_id, call.from_user.id, vote_type)
    
    alert_text = "–í–∞—à üëç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∫–æ–º–º–∏—Ç!" if vote_type == 1 else "–í–∞—à üëé –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∫–æ–º–º–∏—Ç!"
    await safe_callback_answer(call, alert_text, show_alert=False)
    
    await _display_commit_details(call, commit_id)

@router.callback_query(F.data == "back_to_commits")
async def cq_back_to_commits(call: types.CallbackQuery):
    await safe_callback_answer(call, "", show_alert=True)
    text, markup = await _get_commits_list_message()
    await safe_callback_answer(call, text, show_alert=True)
    await call.message.edit_text(text, reply_markup=markup)

@router.callback_query(F.data == "hide_commits")
async def cq_hide_commits(call: types.CallbackQuery):
    await safe_callback_answer(call, "", show_alert=True)
    await safe_callback_answer(call, "", show_alert=True)
    await call.message.delete()

async def _get_commits_list_message():
    commits = await db.get_all_commits()
    if not commits:
        return "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</b>\n\n–ü–æ–∫–∞ –Ω–µ –±—ã–ª–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞.", None
    
    text = "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–º–∏—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π."
    markup = kb.get_commits_list_keyboard(commits)
    return text, markup

async def _send_commit_details_new_message(bot: Bot, chat_id: int, commit_id: str, user_id_for_admin_check: int):
    commit = await db.get_commit_by_id(commit_id)
    if not commit:
        await bot.send_message(chat_id, "‚ùå –≠—Ç–æ—Ç –∫–æ–º–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        return

    admin_name = html.quote(commit['admin_name'])
    admin_info = f"<a href='tg://user?id={commit['admin_id']}'>{admin_name}</a>"
    if commit['admin_username']:
        admin_info += f" (@{html.quote(commit['admin_username'])})"
    
    try:
        locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
    except locale.Error:
        pass

    commit_date = datetime.strptime(commit['created_at'], '%Y-%m-%d %H:%M:%S')
    formatted_date = commit_date.strftime('%d %B %Y –≤ %H:%M')
    
    vote_counts = await db.get_vote_counts(commit_id)
    is_admin = user_id_for_admin_check in get_all_admins()

    text = (f"<b>Commit <code>#{commit['commit_id']}</code> by {admin_info}</b>\n\n"
            f"üïï <b>–î–∞—Ç–∞ –∫–æ–º–º–∏—Ç–∞:</b> {formatted_date}\n\n"
            f"<b>‚úçÔ∏è ChangeLog:</b>\n"
            f"<blockquote>{html.quote(commit['commit_text'])}</blockquote>")
    
    markup = kb.get_commit_details_keyboard(commit_id, vote_counts['likes'], vote_counts['dislikes'], is_admin)
    await bot.send_message(chat_id, text, reply_markup=markup, disable_web_page_preview=True)

async def _display_commit_details(call: types.CallbackQuery, commit_id: str):
    commit = await db.get_commit_by_id(commit_id)
    if not commit:
        await safe_callback_answer(call, "‚ùå –≠—Ç–æ—Ç –∫–æ–º–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
        return

    admin_name = html.quote(commit['admin_name'])
    admin_info = f"<a href='tg://user?id={commit['admin_id']}'>{admin_name}</a>"
    if commit['admin_username']:
        admin_info += f" (@{html.quote(commit['admin_username'])})"
    
    try:
        locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
    except locale.Error:
        pass

    commit_date = commit.get('created_at')
    formatted_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if isinstance(commit_date, datetime):
        formatted_date = commit_date.strftime('%d %B %Y –≤ %H:%M')
    
    vote_counts = await db.get_vote_counts(commit_id)
    is_admin = call.from_user.id in get_all_admins()

    text = (f"<b>Commit <code>#{commit['commit_id']}</code> by {admin_info}</b>\n\n"
            f"üïï <b>–î–∞—Ç–∞ –∫–æ–º–º–∏—Ç–∞:</b> {formatted_date}\n\n"
            f"<b>‚úçÔ∏è ChangeLog:</b>\n"
            f"<blockquote>{html.quote(commit['commit_text'])}</blockquote>")
    
    markup = kb.get_commit_details_keyboard(commit_id, vote_counts['likes'], vote_counts['dislikes'], is_admin)
    
    try:
        await safe_callback_answer(call, text, show_alert=True)
        await call.message.edit_text(text, reply_markup=markup, disable_web_page_preview=True)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞: {e}")
         
@router.inline_query(F.query.startswith("exec"))
async def inline_exec_handler(inline_query: InlineQuery):
    user_id = inline_query.from_user.id
    user_bots = await db.get_userbots_by_tg_id(user_id)

    if not user_bots:
        result = InlineQueryResultArticle(
            id=f"exec_no_bot_{user_id}", 
            title="–ù–µ—Ç —é–∑–µ—Ä–±–æ—Ç–∞", 
            description="–£ –≤–∞—Å –Ω–µ—Ç —é–∑–µ—Ä–±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.", 
            input_message_content=InputTextMessageContent(message_text="‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —é–∑–µ—Ä–±–æ—Ç–∞.</b>", parse_mode="HTML")
        )
        await inline_query.answer([result], cache_time=5, is_personal=True)
        return

    the_only_bot = user_bots[0]
    ub_username = the_only_bot['ub_username']
    ub_data = await db.get_userbot_data(ub_username)

    if not ub_data or ub_data.get('status') in ['installing', 'deleting']:
        status_text = "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..." if ub_data.get('status') == 'installing' else "–£–¥–∞–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."
        result = InlineQueryResultArticle(
            id=f"exec_status_fail_{user_id}", 
            title="–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", 
            description=status_text,
            input_message_content=InputTextMessageContent(message_text=f"‚è≥ <b>–î–µ–π—Å—Ç–≤–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.</b>\n\n{status_text}", parse_mode="HTML")
        )
        await inline_query.answer([result], cache_time=5, is_personal=True)
        return

    command_str = inline_query.query[len("exec"):].strip()

    if not command_str:
        result = InlineQueryResultArticle(
            id=f"exec_help_{user_id}", 
            title="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", 
            description="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.", 
            input_message_content=InputTextMessageContent(message_text="‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ `exec ` –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã..")
        )
        await inline_query.answer([result], cache_time=5, is_personal=True)
        return
        
    server_ip = the_only_bot['server_ip']
    
    exec_result = await api_manager.exec_in_container(ub_username, command_str, server_ip)

    if not exec_result.get("success"):
        error_text = exec_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
        response_text = f"‚ùå <b>–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n<pre>{html.quote(error_text)}</pre>"
    else:
        data = exec_result.get("data", {}).get("exec", {})
        exit_code = data.get("exit_code", "N/A")
        output = data.get("output", "").strip()

        header = (
            f"<b>–ö–æ–º–∞–Ω–¥–∞:</b> <pre>{html.quote(command_str)}</pre>\n"
            f"<b>–ö–æ–¥ –≤—ã—Ö–æ–¥–∞:</b> <code>{exit_code}</code>\n\n"
        )
        
        if output:
            if len(output) > 3800:
                output = output[:3800] + "\n\n[...–í—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω...]"
            response_text = header + f"<b>–í—ã–≤–æ–¥:</b>\n<blockquote>{html.quote(output)}</blockquote>"
        else:
            response_text = header + "<i>(–ù–µ—Ç –≤—ã–≤–æ–¥–∞)</i>"
        
    result = InlineQueryResultArticle(
        id=f"exec_result_{user_id}_{command_str}", 
        title=f"–í—ã–ø–æ–ª–Ω–∏—Ç—å: {command_str[:50]}", 
        description="–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã", 
        input_message_content=InputTextMessageContent(message_text=response_text, parse_mode="HTML")
    )

    try:
        await inline_query.answer([result], cache_time=1, is_personal=True)
    except TelegramBadRequest as e:
        if "query is too old" in str(e) or "query ID is invalid" in str(e):
            return
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ inline_query exec: {e}")
            raise

@router.callback_query(F.data.startswith("revoke_shared_access:"))
async def cq_revoke_shared_access(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    await state.set_state(UserBotShare.ConfirmingRevoke)
    await state.update_data(ub_username=ub_username)
    text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–æ–º <code>{html.quote(ub_username)}</code>?"
    markup = kb.get_confirm_revoke_shared_keyboard(ub_username)
    await safe_callback_answer(call, text, show_alert=True)
    await safe_callback_answer(call, "", show_alert=True)

@router.callback_query(F.data.startswith("confirm_revoke_shared:"), UserBotShare.ConfirmingRevoke)
async def cq_confirm_revoke_shared(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    ub_username = call.data.split(":")[1]
    await db.remove_userbot_shared_access(ub_username, call.from_user.id)
    await state.clear()
    await safe_callback_answer(call, f"‚úÖ –í—ã –±–æ–ª—å—à–µ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —é–∑–µ—Ä–±–æ—Ç–æ–º <code>{html.quote(ub_username)}</code>.", show_alert=True)
    await safe_callback_answer(call, "", show_alert=True)

@router.callback_query(F.data.startswith("cancel_revoke_shared:"), UserBotShare.ConfirmingRevoke)
async def cq_cancel_revoke_shared(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    await state.clear()
    await show_management_panel(call, ub_username, state)
    await safe_callback_answer(call, "", show_alert=True)

@router.callback_query(F.data.startswith("owner_revoke_shared:"))
async def cq_owner_revoke_shared(call: types.CallbackQuery, state: FSMContext):
    _, ub_username, shared_id = call.data.split(":")
    shared_id = int(shared_id)
    await db.remove_userbot_shared_access(ub_username, shared_id)
    await safe_callback_answer(call, "–î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω.", show_alert=True)
    await show_management_panel(call, ub_username, state)

def check_panel_owner(call, owner_id: int) -> bool:
    if call.from_user.id != owner_id:
        import asyncio
        coro = safe_callback_answer(call, "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–∞–Ω–µ–ª—å!", show_alert=True)
        if asyncio.iscoroutine(coro):
            asyncio.create_task(coro)
        return False
    return True

@router.callback_query(F.data.startswith("shared_reject_access:"))
async def cq_shared_reject_access(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    ub_username = call.data.split(":")[1]
    await db.remove_userbot_shared_access(ub_username, call.from_user.id)
    await safe_callback_answer(call, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏.", show_alert=True)
    ub_data = await db.get_userbot_data(ub_username)
    owner_id = ub_data.get('tg_user_id') if ub_data else None
    if owner_id and owner_id != call.from_user.id:
        user = call.from_user
        user_display = f"@{user.username}" if user.username else user.full_name
        try:
            await safe_callback_answer(call, f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} (<code>{user.id}</code>) –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ <code>{html.quote(ub_username)}</code>.", show_alert=True)
        except Exception:
            pass
    await _show_main_panel(bot=bot, chat_id=call.message.chat.id, user_id=call.from_user.id, user_name=call.from_user.full_name, state=state, message_id=call.message.message_id)

def get_cancel_revoke_shared_keyboard(ub_username: str):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_share_panel:{ub_username}")
    return builder.as_markup()

@router.callback_query(F.data.startswith("cancel_share_panel:"))
async def cq_cancel_share_panel(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    await state.clear()
    await show_management_panel(call, ub_username, state)
    await safe_callback_answer(call, "", show_alert=True)

@router.callback_query(F.data.startswith("accept_share_panel:"), F.chat.type == "private")
async def cq_accept_share_panel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    _, ub_username, owner_id_str = call.data.split(":")
    await db.add_userbot_shared_access(ub_username, call.from_user.id)
    
    try:
        owner_id = int(owner_id_str)
        sharer_data_log = {"id": owner_id, "full_name": (await bot.get_chat(owner_id)).full_name}
        user_data_log = {"id": call.from_user.id, "full_name": call.from_user.full_name}
        ub_info_log = {"name": ub_username}
        log_data = {"sharer_data": sharer_data_log, "user_data": user_data_log, "ub_info": ub_info_log}
        await log_event(bot, "panel_shared_accepted", log_data)
    except Exception as e:
        logging.error(f"Failed to log panel share event: {e}")

    await safe_callback_answer(call, "‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º —é–∑–µ—Ä–±–æ—Ç–æ–º.", show_alert=True)
    await show_management_panel(call, ub_username, state)
    
    try:
        await safe_callback_answer(call, "", show_alert=True)
        await call.bot.send_message(chat_id=int(owner_id_str), text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{call.from_user.id}</code> –ø—Ä–∏–Ω—è–ª –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ <code>{html.quote(ub_username)}</code>.")
    except TelegramForbiddenError:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id_str} –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id_str}: {e}")

@router.callback_query(F.data.startswith("manage_shared_access:"))
async def cq_manage_shared_access(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    shared_users = await db.get_userbot_shared_users(ub_username)
    if not shared_users:
        await safe_callback_answer(call, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º.", show_alert=True)
        await show_management_panel(call, ub_username, state)
        return
    text = "<b>–£ –∫–æ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø:</b>"
    buttons = []
    for shared_id in shared_users:
        shared_user = await db.get_user_data(shared_id)
        if shared_user:
            name = shared_user.get('full_name') or f"ID {shared_id}"
            username = shared_user.get('username')
            user_display = f"@{username}" if username else name
        else:
            user_display = f"ID {shared_id}"
        text += f"\n‚Ä¢ {user_display} (<code>{shared_id}</code>)"
        buttons.append([
            InlineKeyboardButton(
                text=f"‚ùå {user_display}",
                callback_data=f"remove_shared_access:{ub_username}:{shared_id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_panel:{ub_username}")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await safe_callback_answer(call, text, show_alert=True)
    await call.message.edit_caption(caption=text, reply_markup=markup)
    await safe_callback_answer(call, "", show_alert=True)

@router.callback_query(F.data.startswith("remove_shared_access:"))
async def cq_remove_shared_access(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    _, ub_username, shared_id = call.data.split(":")
    shared_id = int(shared_id)
    await db.remove_userbot_shared_access(ub_username, shared_id)

    try:
        sharer_data_log = {"id": call.from_user.id, "full_name": call.from_user.full_name}
        shared_user_data = await db.get_user_data(shared_id)
        user_data_log = {"id": shared_id, "full_name": shared_user_data.get("full_name") if shared_user_data else str(shared_id)}
        ub_info_log = {"name": ub_username}
        log_data = {"sharer_data": sharer_data_log, "user_data": user_data_log, "ub_info": ub_info_log}
        await log_event(bot, "panel_share_revoked", log_data)
    except Exception as e:
        logging.error(f"Failed to log panel revoke event: {e}")

    await safe_callback_answer(call, "–î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω.", show_alert=True)
    await cq_manage_shared_access(call, state)

@router.callback_query(F.data.startswith("back_to_panel:"))
async def cq_back_to_panel_from_shared(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    await safe_callback_answer(call, "", show_alert=True)
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
    await show_management_panel(call, ub_username, state)
    await safe_callback_answer(call, "", show_alert=True)

@router.callback_query(F.data.startswith("reinstall_ub_start_request:"))
async def cq_reinstall_ub_start_request_fallback(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    parts = call.data.split(":")
    if len(parts) < 3:
        await safe_callback_answer(call, "–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞–Ω–µ–ª—å.", show_alert=True)
        return
    _, ub_username, owner_id_str = parts
    owner_id = int(owner_id_str)
    if not check_panel_owner(call, owner_id):
        return
    await safe_callback_answer(call, "–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)

# async def get_userbot_rom_usage(ub_username: str, server_ip: str) -> dict:
#     home_dir = f"/home/{ub_username}"
#     cmd = f"df -m {home_dir} | awk 'NR==2{{print $3, $2}}'"
#     res = await sm.run_command_async(cmd, server_ip)
#     if res.get('success') and res.get('output'):
#         try:
#             used, total = map(int, res['output'].strip().split())
#             percent = int(used / total * 100) if total else 0
#             return {'used': used, 'total': total, 'percent': percent}
#         except Exception:
#             pass
#     return {'used': 0, 'total': 0, 'percent': 0}
    
@router.callback_query(F.data.startswith("health_check_retry:"))
async def cq_health_check_retry(call: types.CallbackQuery, state: FSMContext):
    await safe_callback_answer(call, "–ü—Ä–æ–≤–µ—Ä—è—é —Å–Ω–æ–≤–∞...", show_alert=True)
    await safe_callback_answer(call, "", show_alert=True)
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())

    ub_username = call.data.split(":")[1]
    ub_data = await db.get_userbot_data(ub_username)
    
    if not ub_data:
        await safe_callback_answer(call, "‚ùå –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await _show_main_panel(call.bot, call.message.chat.id, call.from_user.id, call.from_user.full_name, state, call.message.message_id)
        return

    server_ip = ub_data['server_ip']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ API
    container_status = await api_manager.get_container_status(ub_username, server_ip)
    container_exists = container_status.get("success", False)
    disk_space_ok = True  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

    if not container_exists or not disk_space_ok:
        error_text = (
            f"<b>üéõ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
            f"<i>üò¢ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ —é–∑–µ—Ä–±–æ—Ç–∞/—Å–µ—Ä–≤–µ—Ä–∞.</i>\n\n"
            f"<b>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ <code>10-15</code> –º–∏–Ω—É—Ç</b>"
        )
        try:
            from config_manager import Config
            config = Config()
            admin_ids = getattr(config, 'SUPER_ADMIN_IDS', [])
            for admin_id in admin_ids:
                await call.bot.send_message(
                    admin_id,
                    f"‚ö†Ô∏è <b>–°–±–æ–π —é–∑–µ—Ä–±–æ—Ç–∞/—Å–µ—Ä–≤–µ—Ä–∞</b>\n\n"
                    f"chat_id: <code>{call.message.chat.id}</code>\n"
                    f"container_exists: <code>{container_exists}</code>\n"
                    f"disk_space_ok: <code>{disk_space_ok}</code>\n"
                    f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ."
                )
        except Exception as e:
            import logging
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º: {e}")
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"health_check_retry:{ub_username}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_panel")
        await safe_callback_answer(call, error_text, show_alert=True)
        await call.message.edit_caption(caption=error_text, reply_markup=builder.as_markup())
    else:
        await show_management_panel(call, ub_username, state)

class HerokuBackupType(CallbackData, prefix="heroku_backup_type"):
    ub_username: str
    owner_id: int
    backup_type: str

@router.callback_query(F.data.startswith("heroku_backup:"))
async def cq_heroku_backup_start(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    _, ub_username, owner_id_str = call.data.split(":")
    owner_id = int(owner_id_str)
    if not check_panel_owner(call, owner_id):
        return
    builder = InlineKeyboardBuilder()
    for btype, label in [("all", "all"), ("db", "db"), ("mods", "mods")]:
        builder.row(InlineKeyboardButton(text=label, callback_data=HerokuBackupType(ub_username=ub_username, owner_id=owner_id, backup_type=btype).pack()))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"refresh_panel:{ub_username}:{owner_id}"))
    await safe_callback_answer(call,
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ë–µ–∫–∞–ø–∞:</b>",
        reply_markup=builder.as_markup()
    )
    await safe_callback_answer(call, "", show_alert=True)

@router.callback_query(HerokuBackupType.filter())
async def cq_heroku_backup_type(call: types.CallbackQuery, callback_data: HerokuBackupType, bot: Bot):
    ub_username = callback_data.ub_username
    owner_id = callback_data.owner_id
    backup_type = callback_data.backup_type
    if not check_panel_owner(call, owner_id):
        return
    await safe_callback_answer(call, "–°–æ–∑–¥–∞—é –ë–µ–∫–∞–ø...", show_alert=False)
    await safe_callback_answer(call,
        "<b>‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ë–µ–∫–∞–ø–∞...</b>",
        reply_markup=kb.get_loading_keyboard()
    )
    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data or ub_data.get("ub_type") != "heroku":
        await safe_callback_answer(call, "‚ùå –ë–µ–∫–∞–ø –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Heroku-—é–∑–µ—Ä–±–æ—Ç–æ–≤.", show_alert=True)
        await safe_callback_answer(call,
            reply_markup=kb.get_back_to_main_panel_keyboard()
        )
        return
    server_ip = ub_data["server_ip"]
    # try:
    #     backup_path, backup_name = await sm.make_heroku_backup_ssh(ub_username, server_ip, backup_type)
    await safe_callback_answer(call, "‚ùå –§—É–Ω–∫—Ü–∏—è –±–µ–∫–∞–ø–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
    await safe_callback_answer(call,
        reply_markup=kb.get_back_to_main_panel_keyboard()
    )
    return
    #     with open(backup_path, "rb") as f:
    #         await bot.send_document(
    #             chat_id=call.from_user.id,
    #             document=FSInputFile(backup_path, filename=backup_name),
    #             caption=f"<b>Backup ({backup_type})</b>",
    #             parse_mode="HTML"
    #         )
    #     sm.cleanup_heroku_backup_file(backup_path)
    #     await call.message.edit_caption(
    #         caption=f"‚úÖ –ë–µ–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –§–∞–π–ª: <code>{backup_name}</code>",
    #         reply_markup=kb.get_back_to_main_panel_keyboard()
    #     )
    # except Exception as e:
    #     logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –ë–µ–∫–∞–ø–∞: {e}\n{traceback.format_exc()}")
    #     # Truncate error message to avoid Telegram caption length limit
    #     error_msg = str(e)
    #     if len(error_msg) > 200:
    #         error_msg = error_msg[:197] + "..."
    #     
    #     await call.message.edit_caption(
    #         caption=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ë–µ–∫–∞–ø–∞: <code>{py_html.escape(error_msg)}</code>",
    #         reply_markup=kb.get_back_to_main_panel_keyboard()
    #     )

@router.callback_query(F.data.startswith("select_server:"), UserBotSetup.ChoosingServer)
async def cq_select_server(call: types.CallbackQuery, state: FSMContext):
    server_ip = call.data.split(":")[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
    if server_ip == "127.0.0.1" or server_ip == sm.LOCAL_IP:  # LOCAL_IP
        await safe_callback_answer(call, "‚ÑπÔ∏è –≠—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç.\n\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–∑–µ—Ä–±–æ—Ç–æ–≤ –Ω–∞ –Ω–µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", show_alert=True)
        return
    
    await _proceed_to_type_selection(call, state, server_ip)

async def _proceed_to_type_selection(call: types.CallbackQuery, state: FSMContext, server_ip: str):
    from bot import BANNER_FILE_IDS
    await state.update_data(server_ip=server_ip)
    
    text = (
        "‚¨áÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞</b>\n\n"
        "<blockquote>"
        "üåò <b>Hikka</b> - A multifunctional, and most popular developer-focused userbot based on GeekTG, but it is currently closed and will no longer receive updates.\n\n"
        "ü™ê <b>Heroku</b> - The most popular fork of the Hikka userbot, it receives regular updates and has many new features, supports Hikka userbot modules.\n\n"
        "üåô <b>Legacy</b> - The most popular fork of the Heroku userbot, it has a log of fixed bugs, receives regular updates and supports Hikka userbot modules.\n\n"
        "ü¶ä <b>FoxUserBot</b> - Telegram userbot with the simplest installation, doesn't have much functionality as other userbots, receives regular updates and uses Kurigram (Pyrogram fork)"
        "</blockquote>\n"
        "üëæ <b>–í—ã–±–µ—Ä–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</b>"
    )
    
    photo = BANNER_FILE_IDS.get("select_userbot") or FSInputFile("banners/select_userbot.png")
    
    data = await state.get_data()
    message_id = data.get("message_id_to_edit", call.message.message_id)

    try:
        await call.answer()
        await call.bot.edit_message_media(
            chat_id=call.message.chat.id, message_id=message_id,
            media=InputMediaPhoto(media=photo, caption=text),
            reply_markup=kb.get_select_ub_type_keyboard(server_ip),
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await call.answer()
        else:
            raise

    await state.set_state(UserBotSetup.ChoosingUserBotType)

def parse_ps_etime_to_human(etime: str) -> str:
    etime = etime.strip()
    days = 0
    hours = 0
    minutes = 0
    if '-' in etime:
        days_part, time_part = etime.split('-', 1)
        try:
            days = int(days_part)
        except Exception:
            days = 0
    else:
        time_part = etime
    parts = time_part.split(':')
    if len(parts) == 3:
        hours, minutes, _ = parts
    elif len(parts) == 2:
        hours, minutes = parts
    else:
        hours = 0
        minutes = 0
    try:
        hours = int(hours)
        minutes = int(minutes)
    except Exception:
        hours = 0
        minutes = 0
    result = []
    if days:
        result.append(f"{days}d")
    if hours:
        result.append(f"{hours}h")
    if minutes:
        result.append(f"{minutes}m")
    return ' '.join(result) if result else '~1m'

async def _generate_and_save_token(user: types.User) -> str:
    username = user.username or f"user{user.id}"
    random_part = secrets.token_urlsafe(32)
    new_token = f"{username}:{user.id}:{random_part}"
    await db.set_api_token(user.id, new_token)
    return new_token

@router.callback_query(F.data == "regenerate_api_token", StateFilter(APITokenManagement.TokenHidden, APITokenManagement.TokenShown))
async def cq_regenerate_api_token(call: types.CallbackQuery, state: FSMContext):
    user = call.from_user
    username = user.username or f"user{user.id}"
    random_part = secrets.token_urlsafe(32)
    new_token = f"{username}:{user.id}:{random_part}"
    
    if await db.regenerate_user_token(user.id, new_token):
        await state.update_data(token=new_token)
        await safe_callback_answer(call, "‚úÖ API —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", show_alert=True)
        await cq_show_api_panel(call, state)
    else:
        await safe_callback_answer(call, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞", show_alert=True)
    
def _mask_token(token: str) -> str:
    if not token or ':' not in token:
        return "********************"
    parts = token.split(':')
    if len(parts) < 3:
        return "********************"
    return f"{parts[0]}:{parts[1]}:{'*' * len(parts[2])}"

async def _get_or_create_token(user: types.User) -> str:
    user_data = await db.get_user_data(user.id)
    token = user_data.get("api_token")
    if not token:
        token = await _generate_and_save_token(user)
    return token
    
@router.callback_query(F.data == "api_panel_show")  
async def cq_show_api_panel(call: types.CallbackQuery, state: FSMContext):
    await safe_callback_answer(call, "", show_alert=True)
    token = await _get_or_create_token(call.from_user)
    
    text = (
        "üîë <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π API-—Ç–æ–∫–µ–Ω</b>\n\n"
        "–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API TeaHost –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n\n"
        "<b>–ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω!</b>\n\n"
        "–í–∞—à —Ç–æ–∫–µ–Ω:\n"
        f"<code>{html.quote(_mask_token(token))}</code>"
    )
    
    markup = kb.get_api_token_keyboard(is_shown=False)
    await call.message.edit_caption(caption=text, reply_markup=markup)
    await state.set_state(APITokenManagement.TokenHidden)

@router.callback_query(F.data == "toggle_api_token_visibility", StateFilter(APITokenManagement.TokenHidden, APITokenManagement.TokenShown))
async def cq_toggle_api_token_visibility(call: types.CallbackQuery, state: FSMContext):
    await safe_callback_answer(call, "", show_alert=True)
    current_state = await state.get_state()
    token = await _get_or_create_token(call.from_user)
    
    is_currently_shown = current_state == APITokenManagement.TokenShown
    
    new_text_token = _mask_token(token) if is_currently_shown else token
    new_is_shown = not is_currently_shown
    new_state = APITokenManagement.TokenHidden if is_currently_shown else APITokenManagement.TokenShown

    text = (
        "üîë <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π API-—Ç–æ–∫–µ–Ω</b>\n\n"
        "–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API TeaHost –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n\n"
        "<b>–ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω!</b>\n\n"
        "–í–∞—à —Ç–æ–∫–µ–Ω:\n"
        f"<code>{html.quote(new_text_token)}</code>"
    )
    
    markup = kb.get_api_token_keyboard(is_shown=new_is_shown)
    await call.message.edit_caption(caption=text, reply_markup=markup)
    await state.set_state(new_state)
    
def find_ip_by_code(code: str) -> str | None:
    servers = server_config.get_servers()
    for ip, details in servers.items():
        if details.get("code") and details.get("code").lower() == code.lower():
            return ip
    return None

@router.callback_query(F.data.startswith("migrate_ub_start:"))
async def cq_migrate_ub_start(call: types.CallbackQuery, state: FSMContext):
    from bot import BANNER_FILE_IDS
    await call.answer()

    try:
        _, ub_username, owner_id_str = call.data.split(":")
        owner_id = int(owner_id_str)
        if not check_panel_owner(call, owner_id):
            return

        loading_text = "<b>üîÑ –°–º–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n–ó–∞–≥—Ä—É–∂–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞..."
        photo = BANNER_FILE_IDS.get("select_server") or FSInputFile("banners/select_server.png")
        await call.message.edit_media(
            media=InputMediaPhoto(media=photo, caption=loading_text),
            reply_markup=kb.get_loading_keyboard()
        )
        
        ub_data = await db.get_userbot_data(ub_username)
        if not ub_data:
            await call.message.edit_caption(caption="‚ùå –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb.get_back_to_main_panel_keyboard())
            return

        current_server_ip = ub_data['server_ip']
        user_id = call.from_user.id
        has_premium = await db.check_premium_access(user_id)
        
        all_servers = server_config.get_servers()
        all_userbots = await db.get_all_userbots_full_info()
        installed_bots_map = defaultdict(int)
        for ub in all_userbots:
            installed_bots_map[ub['server_ip']] += 1

        available_servers_filtered = []
        for ip, details in all_servers.items():
            if ip == sm.LOCAL_IP or ip == current_server_ip:
                continue
            
            status = details.get("status")
            if status in ['false', 'test']:
                continue
            
            available_servers_filtered.append((ip, details))
        
        data = await state.get_data()
        server_stats = data.get("server_stats", {})
        if not server_stats:
            stats_tasks = [sm.get_server_stats(ip) for ip, _ in available_servers_filtered]
            stats_results = await asyncio.gather(*stats_tasks)
            server_stats = {ip: res for (ip, _), res in zip(available_servers_filtered, stats_results)}

        markup = kb.get_migration_server_selection_keyboard(
            ub_username=ub_username,
            owner_id=owner_id,
            servers_list=available_servers_filtered,
            installed_bots_map=installed_bots_map,
            server_stats=server_stats,
            has_premium_access=has_premium
        )
        
        final_text = f"<b>üîÑ –°–º–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n<b>üíª –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞</b>"
        
        await call.message.edit_media(
            media=InputMediaPhoto(media=photo, caption=final_text),
            reply_markup=markup
        )
        await state.set_state(UserBotSetup.Migrating)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_migrate_ub_start: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ–Ω–æ—Å–∞.", show_alert=True)

@router.callback_query(F.data.startswith("migrate_ub_select:"), StateFilter(UserBotSetup.Migrating))
async def cq_migrate_ub_execute(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    try:
        _, ub_username, owner_id_str, new_server_code = call.data.split(":")
        owner_id = int(owner_id_str)
        if not check_panel_owner(call, owner_id):
            return

        await state.clear()
        
        await call.message.edit_media(
            media=InputMediaPhoto(media=FSInputFile("banners/panel_userbot.png"), caption="–ü–µ—Ä–µ–Ω–æ—à—É –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."),
            reply_markup=kb.get_loading_keyboard()
        )
        await call.answer()

        new_server_ip = find_ip_by_code(new_server_code)
        if not new_server_ip or not await server_config.is_install_allowed(new_server_ip, owner_id):
            await call.answer("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.", show_alert=True)
            await show_management_panel(call, ub_username, state)
            return

        ub_data = await db.get_userbot_data(ub_username=ub_username)
        if not ub_data:
            await call.message.edit_caption("‚ùå –û—à–∏–±–∫–∞: –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        old_server_ip = ub_data.get('server_ip')
        ub_type = ub_data.get('ub_type')
        
        if old_server_ip == new_server_ip:
            await call.message.edit_caption("‚ùå –°—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏.")
            return

        if not await db.update_userbot_server(ub_username, new_server_ip):
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å IP –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await db.delete_password(owner_id)

        backup_result = await api_manager.backup_container(ub_username, old_server_ip)
        if not backup_result.get("success"):
            await db.update_userbot_server(ub_username, old_server_ip)
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

        restore_result = await api_manager.restore_container(ub_username, ub_type, new_server_ip)
        if not restore_result.get("success"):
            await db.update_userbot_server(ub_username, old_server_ip)
            raise Exception(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {restore_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

        all_servers = server_config.get_servers()
        old_server_details = all_servers.get(old_server_ip, {})
        old_server_code_for_log = old_server_details.get('code', 'N/A')

        log_data = {
            "user_data": {"id": call.from_user.id, "full_name": call.from_user.full_name},
            "ub_info": {"name": ub_username, "type": ub_type},
            "server_info": {"ip": new_server_ip, "code": new_server_code},
            "old_server_info": {"ip": old_server_ip, "code": old_server_code_for_log}
        }
        await log_event(bot, "userbot_migrated", log_data)

        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"refresh_panel:{ub_username}:{owner_id}")
        
        await call.message.edit_caption(
            caption="–ü–µ—Ä–µ–Ω–æ—Å —É—Å–ø–µ—à–Ω—ã–π (200 OK), —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å TH (TeaHost).",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"refresh_panel:{ub_username}:{owner_id}")
        await call.message.edit_caption(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ!</b>\n\n"
            f"<pre>{html.quote(str(e))}</pre>\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=builder.as_markup()
        )
# --- END OF FILE user_handlers.py ---
