# --- START OF FILE user_handlers.py ---
import logging
import asyncio
import secrets
from datetime import datetime, timedelta
import re
import time
from datetime import datetime
import pytz
import locale
import secrets
from collections import defaultdict
from aiogram import Bot, Router, types, F, html
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.exceptions import TelegramBadRequest, TelegramNotFound, TelegramForbiddenError
from aiogram.types import InputMediaPhoto, FSInputFile, InputFile
from aiogram.types import InlineQuery, InputTextMessageContent, InlineQueryResultArticle, InlineQueryResultPhoto, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hlink
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
import html as py_html
import traceback

import keyboards as kb
import system_manager as sm
import server_config
import database as db
from states import UserBotSetup, UserBotTransfer, UserReview, CommitEditing, APITokenManagement
from admin_manager import get_all_admins
from config_manager import config
from channel_logger import log_event
from filters import IsBotEnabled, IsSubscribed
from system_manager import get_service_process_uptime

logger = logging.getLogger(__name__)
router = Router()
router.message.filter(IsBotEnabled())
router.callback_query.filter(IsBotEnabled())

LOG_LINES_PER_PAGE = 25

review_warned_users = defaultdict(lambda: False)

class UserBotShare(StatesGroup):
    ConfirmingRevoke = State()
    WaitingForShareUserID = State()
    ConfirmingShare = State()
    WaitingForShareAccept = State()

def _create_progress_bar(percent_str: str, length: int = 10) -> str:
    try:
        percent = float(str(percent_str).replace('%',''))
        filled_length = int(length * percent / 100)
        bar = '‚ñà' * filled_length + '‚ñë' * (length - filled_length)
        return f"[{bar}]"
    except (ValueError, TypeError):
        return f"[{'?' * length}]"

def get_greeting():
    now = datetime.now(pytz.timezone("Europe/Moscow"))
    if 5 <= now.hour < 12: return "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= now.hour < 17: return "üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 17 <= now.hour < 23: return "üåÉ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else: return "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏"

def seconds_to_human_readable(seconds):
    days, remainder = divmod(seconds, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, _ = divmod(remainder, 60)
    parts = []
    if days:
        parts.append(f"{int(days)}d")
    if hours:
        parts.append(f"{int(hours)}h")
    if minutes:
        parts.append(f"{int(minutes)}m")
    return " ".join(parts) if parts else "~1m"

async def _show_main_panel(bot: Bot, chat_id: int, user_id: int, user_name: str, state: FSMContext, message_id: int = None, topic_id: int = None, owner_id: int = None):
    from bot import BANNER_FILE_IDS
    await state.clear()
    user_bots = await db.get_userbots_by_tg_id(user_id)
    is_chat = False
    if owner_id is None:
        owner_id = user_id
    if str(chat_id).startswith("-"):
        is_chat = True
    text = (f"<b>{get_greeting()}, {html.quote(user_name)}!</b>\n\n"
            f"<blockquote>ü¶à –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∏–Ω–≥–æ–º <b>SharkHost</b>. "
            f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ —é–∑–µ—Ä–±–æ—Ç–∞–º–∏.</blockquote>")
    markup = kb.get_main_panel_keyboard(has_bots=bool(user_bots), user_id=owner_id, chat_id=chat_id, is_chat=is_chat)
    photo = BANNER_FILE_IDS.get("main_panel") or FSInputFile("banners/select_action.png")

    if message_id:
        try:
            await bot.edit_message_media(
                media=InputMediaPhoto(media=photo, caption=text),
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=markup
            )
        except TelegramBadRequest:
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
            except (TelegramBadRequest, TelegramNotFound):
                pass
            await bot.send_photo(chat_id=chat_id, photo=photo, caption=text, reply_markup=markup, message_thread_id=topic_id)
    else:
        await bot.send_photo(chat_id=chat_id, photo=photo, caption=text, reply_markup=markup, message_thread_id=topic_id)
        
async def show_management_panel(call_or_message: types.Message | types.CallbackQuery, ub_username: str, state: FSMContext = None):
    from bot import BANNER_FILE_IDS
    is_callback = isinstance(call_or_message, types.CallbackQuery)
    message = call_or_message.message if is_callback else call_or_message
    user = call_or_message.from_user
    bot = message.bot
    
    if state: await state.clear()
        
    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data:
        if isinstance(call_or_message, types.CallbackQuery):
            await call_or_message.answer("‚ùå –≠—Ç–æ—Ç —é–∑–µ—Ä–±–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        await _show_main_panel(bot=bot, chat_id=message.chat.id, user_id=user.id, user_name=user.full_name, state=state, message_id=message.message_id, topic_id=message.message_thread_id)
        return

    if ub_data.get('status') == 'installing':
        if isinstance(call_or_message, types.CallbackQuery):
            await call_or_message.answer("‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n\n–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.", show_alert=True)
        else:
            await message.answer("‚è≥ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.", parse_mode="HTML")
        return
    
    if ub_data.get('status') == 'deleting':
        if isinstance(call_or_message, types.CallbackQuery):
            await call_or_message.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n\n–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è.", show_alert=True)
        else:
            await message.answer("üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞.", parse_mode="HTML")
        return
    
    server_ip = ub_data.get('server_ip', 'N/A')
    
    is_server_active_str = server_config.get_server_status_by_ip(server_ip)
    is_server_active = is_server_active_str not in ["false", "not_found"]
    
    is_running = await sm.is_service_active(f"hikka-{ub_username}.service", server_ip) if is_server_active else False
    
    server_details = server_config.get_servers().get(server_ip, {})
    flag = server_details.get("flag", "üè≥Ô∏è")
    server_code = server_details.get("code", "N/A")
    server_display = f"{flag} {server_code}"
    server_location = f"{server_details.get('country', 'N/A')}, {server_details.get('city', 'N/A')}"
    
    ping_ms_val = await sm.get_server_ping(server_ip)
    resources = await sm.get_userbot_resource_usage(ub_username, server_ip)
    webui_port = ub_data.get('webui_port')

    rom_info = await get_userbot_rom_usage(ub_username, server_ip)
    def make_bar(percent, length=10):
        filled = int(percent * length / 100)
        return '‚ñà' * filled + '‚ñë' * (length - filled)
    rom_bar = make_bar(rom_info['percent'])
    rom_str = f'üíΩ ROM: [{rom_bar}] ({rom_info["used"]} / {rom_info["total"]} –ú–ë)'

    if not is_server_active:
        status_text = "‚ö™Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω"
    elif is_running:
        status_text = "üü¢ –í–∫–ª—é—á–µ–Ω"
    else:
        status_text = "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
        
    creation_date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if ub_data.get('created_at'):
        try:
            creation_date = ub_data['created_at']
            creation_date_str = creation_date.strftime('%d.%m.%Y –≤ %H:%M')
        except (ValueError, TypeError):
            pass

    ram_bar = _create_progress_bar(resources['ram_percent'])

    uptime_str = None
    if is_running:
        service_name = f"hikka-{ub_username}.service"
        etime = await get_service_process_uptime(service_name, server_ip)
        if etime:
            uptime_str = parse_ps_etime_to_human(etime)

    is_owner = ub_data.get('tg_user_id') == user.id
    is_super_admin = user.id in config.SUPER_ADMIN_IDS
    all_shared_users = await db.get_userbot_shared_users(ub_username) if is_owner else []
    shared_users = [uid for uid in all_shared_users if uid != user.id]
    shared_count = len(shared_users)
    def pluralize_user(n):
        n = abs(n)
        if n % 10 == 1 and n % 100 != 11:
            return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        elif 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):
            return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        else:
            return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"

    shared_usernames = []
    if is_owner and shared_count > 0:
        for uid in shared_users:
            user_data = await db.get_user_data(uid)
            username = user_data.get('username', f'ID {uid}')
            shared_usernames.append(f"‚Ä¢ @{username}")
    shared_users_str = '\n'.join(shared_usernames) if shared_usernames else ""

    ping_display = f"üì° –ü–∏–Ω–≥: {ping_ms_val:.1f} –º—Å" if ping_ms_val is not None else "üì° –ü–∏–Ω–≥: N/A"

    server_info_parts = [
        "<blockquote><b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:</b>",
        f"üñ• –°–µ—Ä–≤–µ—Ä: {server_display}",
        f"üåç –õ–æ–∫–∞—Ü–∏—è: {server_location}",
        ping_display
    ]
    if is_owner and shared_count > 0:
        server_info_parts.append(f"\n<b>–î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç:</b>\n{shared_users_str}")
    server_info_parts.append("</blockquote>")
    server_info_block = "\n".join(server_info_parts)

    text_lines = [
        "<b>üéõ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n",
        "<blockquote>"
        "<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        f"ü§ñ –Æ–∑–µ—Ä–±–æ—Ç: {html.quote(ub_username)}\n"
        f"üí° –°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"‚öôÔ∏è –¢–∏–ø: {ub_data.get('ub_type', 'N/A').capitalize()}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {creation_date_str}"
        + (f"\nüß≠ –ê–ø—Ç–∞–π–º: {uptime_str}" if uptime_str else "")
        + (f"\n\nüåê <b>WebUI:</b> <code>http://{server_ip}:{webui_port}</code>" if webui_port else "")
        + (f"\nüóÇ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞: {shared_count} {pluralize_user(shared_count)}" if is_owner and shared_count > 0 else "") +
        "</blockquote>",
        server_info_block,
        "<blockquote>"
        "<b>–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:</b>\n"
        f"üß† CPU: {resources['cpu']}%\n"
        f"üíæ RAM: {ram_bar} ({resources['ram_used']} / {resources['ram_limit']} –ú–ë)\n"
        f"{rom_str}"
        "</blockquote>\n"
    ]
    update_time_str = datetime.now(pytz.timezone("Europe/Moscow")).strftime('%H:%M:%S')
    text_lines.append(f"\n<i>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_time_str} MSK</i>")
    text = "\n".join(text_lines)
    
    markup = kb.get_management_keyboard(
        is_running=is_running, ub_username=ub_username,
        ub_type=ub_data.get('ub_type', 'N/A'), is_server_active=is_server_active,
        is_owner=is_owner,
        is_private=message.chat.type == 'private',
        owner_id=user.id,
        is_shared=(not is_owner and await db.has_userbot_shared_access(ub_username, user.id)),
        is_installing=(ub_data.get('status') == 'installing'),
        is_deleting=(ub_data.get('status') == 'deleting'),
        is_super_admin=is_super_admin
    )

    photo = BANNER_FILE_IDS.get("panel_userbot") or FSInputFile("banners/panel_userbot.png")
    try:
        if is_callback:
            await message.edit_media(media=InputMediaPhoto(media=photo, caption=text), reply_markup=markup)
        else:
            await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=text, reply_markup=markup, message_thread_id=message.message_thread_id)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            if is_callback:
                await call_or_message.answer()
            return
        logging.warning(f"Could not edit message to panel. Re-sending. Error: {e}")
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except (TelegramBadRequest, TelegramNotFound):
            pass
        finally:
            await bot.send_photo(chat_id=message.chat.id, photo=photo, caption=text, reply_markup=markup, message_thread_id=message.message_thread_id)
            
    if not is_owner:
        markup.inline_keyboard = [row for row in markup.inline_keyboard if not any(
            (b.text and ("–¢–µ—Ä–º–∏–Ω–∞–ª" in b.text or "Inline –¥–µ–π—Å—Ç–≤–∏–µ" in b.text)) for b in row)]
    if is_owner:
        shared_users = await db.get_userbot_shared_users(ub_username)
        if shared_users:
            text += f"\n\n<b>–î–æ—Å—Ç—É–ø –∏–º–µ—é—Ç: {len(shared_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å(–µ–π)</b>"
            markup.inline_keyboard.append([
                InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º", callback_data=f"manage_shared_access:{ub_username}")
            ])

async def _safe_cleanup_on_failure(ub_username: str, server_ip: str, state: FSMContext):
    if await db.get_userbot_data(ub_username=ub_username):
        await sm.delete_userbot_full(ub_username, server_ip)
    await state.clear()

async def _show_login_link_success_from_new_message(bot: Bot, chat_id: int, ub_username: str, login_url: str | None, state: FSMContext):
    data = await state.get_data()
    ub_type = data.get("selected_ub_type")
    server_ip = data.get("server_ip")

    text_parts = ["<b>‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n"]

    if login_url:
        text_parts.append(f"\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π <a href='{login_url}'>—Å—Å—ã–ª–∫–µ</a>.\n")

    text_parts.append("\n<i>–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–æ–º > /start > –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</i>\n\n")
    text_parts.append("<u><b>‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ SharkHost!</b></u>")

    await bot.send_message(
        chat_id=chat_id, text="".join(text_parts), 
        reply_markup=kb.get_login_link_success_keyboard(), disable_web_page_preview=True
    )
    await state.clear()

async def _show_login_link_fail_from_message(bot: Bot, chat_id: int, message_id: int, ub_username: str, timeout: bool = False):
    if timeout:
        text = (f"‚è≥ <b>–í—Ä–µ–º—è –≤—ã—à–ª–æ.</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –¥–ª—è <code>{html.quote(ub_username)}</code> –∑–∞ 2 –º–∏–Ω—É—Ç—ã. "
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞.")
    else:
        text = (f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –¥–ª—è <code>{html.quote(ub_username)}</code>.</b>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å —Å—Å—ã–ª–∫—É –µ—â–µ —Ä–∞–∑.")
    await bot.edit_message_caption(caption=text, chat_id=chat_id, message_id=message_id, reply_markup=kb.get_retry_login_link_keyboard(ub_username))
    
async def perform_installation_and_find_link(tg_user_id: int, chat_id: int, message_id: int, state: FSMContext, bot: Bot, is_private: bool = True):
    data = await state.get_data()
    ub_username = data.get("ub_username")
    ub_type = data.get("selected_ub_type")
    server_ip = data.get("server_ip")
    service_name = f"hikka-{ub_username}.service"
        
    install_result = await sm.create_server_user_and_setup_hikka(tg_user_id, data.get("chosen_username_base"), ub_type, server_ip)

    user_data = {"id": tg_user_id}
    try:
        user_chat = await bot.get_chat(tg_user_id)
        user_data["full_name"] = user_chat.full_name
    except Exception:
        pass
        
    server_details = server_config.get_servers().get(server_ip, {})
    log_data = {
        "user_data": user_data,
        "ub_info": {"name": ub_username, "type": ub_type},
        "server_info": {"ip": server_ip, "code": server_details.get("code", "N/A")}
    }

    if not install_result.get("success"):
        err = install_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')
        await bot.edit_message_caption(caption=f"‚ùå <b>–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:</b>\n{html.quote(err)}\n\n/start", chat_id=chat_id, message_id=message_id)
        log_data["error"] = err
        await log_event(bot, "installation_failed", log_data)
        await _safe_cleanup_on_failure(ub_username, server_ip, state)
        return

    webui_port = install_result.get("webui_port")

    if webui_port:
        login_url = f"http://{server_ip}:{webui_port}"
        await bot.delete_message(chat_id, message_id)
        if is_private:
            await _show_login_link_success_from_new_message(bot, chat_id, ub_username, login_url, state)
        else:
            await _show_login_link_success_from_new_message(bot, tg_user_id, ub_username, login_url, state)
            await bot.send_message(
                chat_id=chat_id,
                text="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º."
            )
        await log_event(bot, "installation_success", log_data)
        return

    await bot.edit_message_caption(
        caption="<b>‚è≥ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞...</b>\n\n<blockquote>–≠—Ç–æ –∑–∞–π–º–µ—Ç –¥–æ 2 –º–∏–Ω—É—Ç. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.</blockquote>",
        chat_id=chat_id, message_id=message_id, reply_markup=kb.get_loading_keyboard()
    )
    
    await sm.manage_ub_service(ub_username, "stop", server_ip)
    await sm.clear_journal_logs_for_service(service_name, server_ip)
    await asyncio.sleep(1)
    await sm.manage_ub_service(ub_username, "start", server_ip)

    if ub_type == "fox":
        await asyncio.sleep(5)
    
    try:
        login_url = await asyncio.wait_for(sm.find_login_url_in_loop(ub_username, server_ip, ub_type), timeout=120.0)
        await bot.delete_message(chat_id, message_id)
        if is_private:
            await _show_login_link_success_from_new_message(bot, chat_id, ub_username, login_url, state)
        else:
            await _show_login_link_success_from_new_message(bot, tg_user_id, ub_username, login_url, state)
            await bot.edit_message_caption(
                chat_id=chat_id,
                message_id=message_id,
                caption="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º."
            )
        await log_event(bot, "installation_success", log_data)
    except asyncio.TimeoutError:
        await _show_login_link_fail_from_message(bot, chat_id, message_id, ub_username, timeout=True)
        log_data["error"] = "–¢–∞–π–º–∞—É—Ç –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞"
        await log_event(bot, "installation_failed", log_data)

@router.message(Command("start"), F.chat.type != "private")
async def cmd_start_in_chat(message: types.Message):
    pass

@router.message(Command("review"), F.chat.type != "private")
async def cmd_review_in_chat(message: types.Message):
    pass

@router.message(Command("start"), F.chat.type == "private")
async def cmd_start(message: types.Message, state: FSMContext, bot: Bot):
    user = message.from_user
    if await db.is_user_banned(user.id):
        ban_message = "‚ùå <b>–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.</b>\n\n–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –¥–ª—è –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."
        await message.answer(ban_message, message_thread_id=message.message_thread_id)
        return
    is_new_user = not await db.get_user_data(user.id)
    await db.register_or_update_user(tg_user_id=user.id, username=user.username, full_name=user.full_name)
    if not await db.has_user_accepted_agreement(user.id) and not config.TEST_MODE:
        if is_new_user:
            user_data_for_log = {"id": user.id, "full_name": user.full_name}
            await log_event(bot, "new_user_registered", {"user_data": user_data_for_log})
        text = ("üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SharkHost!</b>\n\n"
                "–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º. "
                "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–Ω—è—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.")
        await message.answer(text, reply_markup=kb.get_agreement_keyboard())
    else:
        await _show_main_panel(bot=bot, chat_id=message.chat.id, user_id=user.id, user_name=user.full_name, state=state, topic_id=message.message_thread_id, owner_id=user.id)

@router.message(Command("review"), F.chat.type == "private")
async def cmd_review(message: types.Message, state: FSMContext):
    text = (
        "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ SharkHost</b>\n\n"
        "‚ÑπÔ∏è –í –æ—Ç–∑—ã–≤–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å SharkHost, –∫–∞–∫–∏–µ –æ—Ç–ª–∏—á–∏—è –∑–∞–º–µ—Ç–∏–ª–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ —Ç.–¥.\n\n"
        "üìÖ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ @SharkHost_reviews."
    )
    sent_message = await message.reply(text, reply_markup=kb.get_cancel_review_keyboard())
    await state.update_data(original_bot_message_id=sent_message.message_id)
    await state.set_state(UserReview.WaitingForReview)

@router.callback_query(F.data == "accept_agreement")
async def cq_accept_agreement(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    user = call.from_user
    await db.register_or_update_user(tg_user_id=user.id, username=user.username, full_name=user.full_name)
    await db.set_user_agreement_accepted(user.id)
    await call.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.", show_alert=True)
    await _show_main_panel(bot=bot, chat_id=call.message.chat.id, user_id=user.id, user_name=user.full_name, state=state, message_id=call.message.message_id, topic_id=call.message.message_thread_id)

@router.callback_query(F.data == "back_to_main_panel")
async def cq_back_to_main_panel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
    await _show_main_panel(bot=bot, chat_id=call.message.chat.id, user_id=call.from_user.id, user_name=call.from_user.full_name, state=state, message_id=call.message.message_id, topic_id=call.message.message_thread_id)
    await call.answer()

@router.callback_query(F.data == "back_to_main_panel_delete")
async def cq_back_to_main_panel_delete(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.message.delete()
    await _show_main_panel(bot=bot, chat_id=call.message.chat.id, user_id=call.from_user.id, user_name=call.from_user.full_name, state=state, topic_id=call.message.message_thread_id)
    await call.answer()

async def _start_installation_flow(call: types.CallbackQuery, state: FSMContext):
    from bot import BANNER_FILE_IDS
    photo_file = BANNER_FILE_IDS.get("select_server") or FSInputFile("banners/select_server.png")
    message_to_edit_id = call.message.message_id
    try:
        await call.message.edit_media(
            media=InputMediaPhoto(media=photo_file, caption="<b>[–®–∞–≥ 1/3] –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤..."),
            reply_markup=kb.get_loading_keyboard()
        )
    except TelegramBadRequest:
        await call.message.delete()
        new_msg = await call.message.answer_photo(
            photo=photo_file, 
            caption="<b>[–®–∞–≥ 1/3] –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...",
            reply_markup=kb.get_loading_keyboard()
        )
        message_to_edit_id = new_msg.message_id

    await state.update_data(message_id_to_edit=message_to_edit_id)

    servers = server_config.get_servers()
    installed_bots_map = {ip: len(await db.get_userbots_by_server_ip(ip)) for ip in servers.keys()}
    tasks = [sm.get_server_stats(ip) for ip in servers.keys()]
    stats_results = await asyncio.gather(*tasks)
    server_stats = dict(zip(servers.keys(), stats_results))
    
    await state.update_data(server_stats=server_stats)
    
    text = "<b>‚¨áÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞</b>\n\n<b>üíª –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —é–∑–µ—Ä–±–æ—Ç</b>"
    
    await call.bot.edit_message_media(
        chat_id=call.message.chat.id, message_id=message_to_edit_id,
        media=InputMediaPhoto(media=photo_file, caption=text),
        reply_markup=kb.get_server_selection_keyboard(call.from_user.id, installed_bots_map, server_stats)
    )
    await state.set_state(UserBotSetup.ChoosingServer)

@router.callback_query(F.data == "create_userbot_start", IsSubscribed(), StateFilter("*"))
async def cq_create_userbot_start(call: types.CallbackQuery, state: FSMContext):
    if len(await db.get_userbots_by_tg_id(call.from_user.id)) >= 1:
        await call.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —é–∑–µ—Ä–±–æ—Ç. –í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ.", show_alert=True)
        return
    
    await state.clear()
    await call.answer()
    await _start_installation_flow(call, state)

class ReinstallUBCallback(CallbackData, prefix="reinstall_ub_start_request"):
    ub_username: str
    owner_id: int

@router.callback_query(ReinstallUBCallback.filter())
async def cq_reinstall_ub_start_request(call: types.CallbackQuery, callback_data: ReinstallUBCallback, state: FSMContext, bot: Bot):
    ub_username = callback_data.ub_username
    owner_id = callback_data.owner_id
    if not check_panel_owner(call, owner_id):
        return
    await call.answer("–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)

@router.callback_query(F.data.in_({"server_unavailable", "server_test_unavailable", "server_noub", "server_full"}), UserBotSetup.ChoosingServer)
async def cq_server_unavailable(call: types.CallbackQuery):
    alerts = {
        "server_unavailable": "üî¥ –≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞.",
        "server_test_unavailable": "üß™ –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä!",
        "server_noub": "üü¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —é–∑–µ—Ä–±–æ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.",
        "server_full": "‚ùå –°–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä."
    }
    await call.answer(alerts.get(call.data, "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."), show_alert=True)

@router.callback_query(F.data == "server_is_service", UserBotSetup.ChoosingServer)
async def cq_service_server_selected(call: types.CallbackQuery):
    await call.answer("‚ÑπÔ∏è –≠—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç.\n\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–∑–µ—Ä–±–æ—Ç–æ–≤ –Ω–∞ –Ω–µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", show_alert=True)

@router.callback_query(F.data.startswith("confirm_unstable:"), UserBotSetup.ChoosingServer)
async def cq_confirm_unstable_server(call: types.CallbackQuery, state: FSMContext):
    await call.answer("–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É.")
    server_ip = call.data.split(":")[1]
    await _proceed_to_type_selection(call, state, server_ip)
    
@router.callback_query(F.data.startswith("ub_type:"), UserBotSetup.ChoosingUserBotType)
async def cq_process_ub_type_selection(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.answer()
    _, ub_type, server_ip = call.data.split(":")
    await state.update_data(selected_ub_type=ub_type)
    
    user = call.from_user
    name_base = str(user.id)
    ub_username = f"ub{name_base}"

    await state.update_data(chosen_username_base=name_base, ub_username=ub_username)

    current_state = await state.get_state()
    if current_state != UserBotSetup.Reinstalling.state and await db.get_userbot_data(ub_username=ub_username):
        await call.message.edit_caption(
            caption="‚ùå <b>–û—à–∏–±–∫–∞:</b> –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —é–∑–µ—Ä–±–æ—Ç —Å —Ç–∞–∫–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –∏–º–µ–Ω–µ–º.\n\n"
                    "–≠—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.",
            reply_markup=kb.get_back_to_main_panel_keyboard()
        )
        await state.clear()
        return

    data = await state.get_data()
    message_id = data.get("message_id_to_edit", call.message.message_id)

    try:
        await bot.edit_message_caption(
            chat_id=call.message.chat.id, message_id=message_id,
            caption="<b>[–®–∞–≥ 3/3] –£—Å—Ç–∞–Ω–æ–≤–∫–∞...</b>\n\n<blockquote>–≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü–æ–¥–æ–∂–¥–∏—Ç–µ.</blockquote>",
            reply_markup=kb.get_loading_keyboard()
        )
    except Exception as e:
        from aiogram.exceptions import TelegramBadRequest
        if isinstance(e, TelegramBadRequest) and "message is not modified" in str(e):
            pass
        else:
            raise

    await state.set_state(UserBotSetup.InstallingUserBot)
    asyncio.create_task(perform_installation_and_find_link(call.from_user.id, call.message.chat.id, message_id, state, bot, is_private=(call.message.chat.type == 'private')))

async def monitor_for_restart(user_id: int, state: FSMContext, bot: Bot):
    data = await state.get_data()
    ub_username, msg_id, server_ip = data.get("ub_username"), data.get("status_message_id"), data.get("server_ip")
    if not all([ub_username, msg_id, server_ip]): return

    end_time = asyncio.get_event_loop().time() + 300
    is_restarted = False
    while asyncio.get_event_loop().time() < end_time:
        if await sm.check_journal_for_restart(ub_username, server_ip):
            is_restarted = True
            break
        await asyncio.sleep(5)
    
    try: await bot.delete_message(chat_id=user_id, message_id=msg_id)
    except Exception: pass
    
    if is_restarted:
        await bot.send_message(chat_id=user_id, text="‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>")
    
    await _show_main_panel(bot=bot, chat_id=user_id, user_id=user_id, user_name=(await bot.get_chat(user_id)).full_name, state=state)
  
@router.callback_query(F.data == "go_to_control_panel", IsSubscribed(), StateFilter("*"))
async def cq_go_to_control_panel(call: types.CallbackQuery, state: FSMContext):
    if call.message.chat.type != "private":
        if call.message.reply_to_message:
            owner_id = call.message.reply_to_message.from_user.id
            if call.from_user.id != owner_id:
                await call.answer("–¢–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /start, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
                return
        else:
            await call.answer("–¢–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –≤—ã–∑–≤–∞–ª /start, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏!", show_alert=True)
            return
    
    await call.answer()
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())

    all_bots = await db.get_userbots_by_tg_id(call.from_user.id)
    
    if not all_bots:
        await call.answer("‚ùå –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
        await _show_main_panel(call.bot, call.message.chat.id, call.from_user.id, call.from_user.full_name, state, call.message.message_id)
        return

    the_only_bot = all_bots[0]
    ub_username = the_only_bot['ub_username']
    server_ip = the_only_bot['server_ip']
    service_name = f"hikka-{ub_username}.service"
    
    service_file_exists = await sm.check_systemd_file_exists(service_name, server_ip)
    disk_space_ok = True  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

    if not service_file_exists or not disk_space_ok:
        error_text = (
            f"<b>üéõ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
            f"<i>üò¢ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ —é–∑–µ—Ä–±–æ—Ç–∞/—Å–µ—Ä–≤–µ—Ä–∞.</i>\n\n"
            f"<b>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ <code>10-15</code> –º–∏–Ω—É—Ç</b>"
        )
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"health_check_retry:{ub_username}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_panel")
        await call.message.edit_caption(caption=error_text, reply_markup=builder.as_markup())
        return
    
    if len(all_bots) == 1:
        await show_management_panel(call, ub_username, state)
        return

    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —é–∑–µ—Ä–±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>"
    markup = kb.get_user_bots_list_keyboard(all_bots, call.from_user.id)
    await call.message.edit_caption(caption=text, reply_markup=markup)

@router.callback_query(F.data.startswith("select_ub_panel:"))
async def cq_select_ub_panel(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    await show_management_panel(call, ub_username, state)
    await call.answer()

@router.callback_query(F.data.startswith("refresh_panel:"))
async def cq_refresh_panel(call: types.CallbackQuery, state: FSMContext):
    parts = call.data.split(":")
    if len(parts) < 3:
        await call.answer("–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞–Ω–µ–ª—å.", show_alert=True)
        return
    _, ub_username, owner_id_str = parts
    owner_id = int(owner_id_str)
    if not check_panel_owner(call, owner_id):
        return
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
    await show_management_panel(call, ub_username, state)
    
@router.callback_query(F.data.startswith("show_user_logs:"))
async def cq_show_user_logs(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    _, log_type, ub_username, owner_id_str, page = call.data.split(":")
    owner_id = int(owner_id_str)
    if not check_panel_owner(call, owner_id):
        return
    await call.answer()
    
    try:
        page = int(page)
    except ValueError:
        await call.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data:
        await call.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —é–∑–µ—Ä–±–æ—Ç—É.", show_alert=True)
        return

    is_pagination = call.message.text is not None

    msg_to_edit = call.message
    if not is_pagination:
        await call.message.delete()
        msg_to_edit = await bot.send_message(call.from_user.id, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –ª–æ–≥–∏...", reply_markup=kb.get_loading_keyboard())
    else:
        await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())

    logs = await sm.get_journal_logs(ub_username, ub_data['server_ip'], lines=1000)

    if not logs:
        await msg_to_edit.delete()
        await show_management_panel(call, ub_username, state)
        await bot.send_message(call.from_user.id, "üìú –õ–æ–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞ –ø—É—Å—Ç—ã.")
        return
    
    log_lines = logs.strip().split('\n')
    total_pages = max(1, (len(log_lines) + LOG_LINES_PER_PAGE - 1) // LOG_LINES_PER_PAGE)
    page = max(1, min(page, total_pages))
    start_index = (page - 1) * LOG_LINES_PER_PAGE
    end_index = start_index + LOG_LINES_PER_PAGE
    page_content = "\n".join(log_lines[start_index:end_index])
    
    text = (f"üìú <b>–õ–æ–≥–∏ ({log_type.capitalize()}) –¥–ª—è <code>{html.quote(ub_username)}</code></b>\n"
            f"<i>(–°—Ç—Ä. {page}/{total_pages}, –Ω–æ–≤—ã–µ –ª–æ–≥–∏ —Å–≤–µ—Ä—Ö—É)</i>\n\n"
            f"<pre>{html.quote(page_content)}</pre>")
            
    if len(text) > 4096:
        text = text[:4090] + "...</pre>"

    markup = kb.get_user_logs_paginator_keyboard(log_type, ub_username, page, total_pages, owner_id)
    
    try:
        await msg_to_edit.edit_text(text=text, reply_markup=markup)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logging.error(f"Error editing message with logs: {e}")
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ª–æ–≥–æ–≤.", show_alert=True)

@router.callback_query(F.data.startswith("manage_ub:"))
async def cq_manage_userbot(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    parts = call.data.split(":")
    if len(parts) < 4:
        await call.answer("–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞–Ω–µ–ª—å.", show_alert=True)
        return
    _, action, ub_username, owner_id_str = parts
    owner_id = int(owner_id_str)
    if not check_panel_owner(call, owner_id):
        return
    
    ub_data = await db.get_userbot_data(ub_username)
    server_ip = ub_data['server_ip']
    is_server_active_str = server_config.get_server_status_by_ip(server_ip)
    if is_server_active_str in ["false", "not_found"]:
        await call.answer("üî¥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω.", show_alert=True)
        return

    try:
        await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
        await call.answer()
    except TelegramBadRequest:
        await call.answer("–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É...")

    await sm.manage_ub_service(ub_username, action, server_ip)

    try:
        user_data_log = {"id": call.from_user.id, "full_name": call.from_user.full_name}
        ub_info_log = {"name": ub_username}
        log_data = {"user_data": user_data_log, "ub_info": ub_info_log, "action": action}
        await log_event(bot, "user_action_manage_ub", log_data)
    except Exception as e:
        logging.error(f"Failed to log user action: {e}")

    if action == 'restart':
        await db.update_userbot_started_time(ub_username, datetime.now(pytz.utc))

    await asyncio.sleep(1.5) 
    await show_management_panel(call, ub_username, state)

@router.callback_query(F.data.startswith("delete_ub_confirm_request:"))
async def cq_delete_ub_confirm_request(call: types.CallbackQuery, state: FSMContext):
    parts = call.data.split(":")
    if len(parts) < 3:
        await call.answer("–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞–Ω–µ–ª—å.", show_alert=True)
        return
    _, ub_username, owner_id_str = parts
    owner_id = int(owner_id_str)
    if not check_panel_owner(call, owner_id):
        return
    text = (
        f"<b>‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–∞—à —é–∑–µ—Ä–±–æ—Ç?</b>\n\n"
        f"‚ùóÔ∏è –í—Å–µ –≤–∞—à–∏ –º–æ–¥—É–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç <b>–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã</b>."
    )
    markup = kb.get_confirm_delete_keyboard(ub_username)
    try:
        await call.message.edit_caption(caption=text, reply_markup=markup)
        await call.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e).lower():
            await call.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        else:
            logging.error(f"Error in delete confirmation: {e}")
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
    await state.set_state(UserBotSetup.ConfirmDeleteUserBot)

@router.callback_query(F.data.startswith("delete_ub_cancel:"), UserBotSetup.ConfirmDeleteUserBot)
async def cq_delete_ub_cancel(call: types.CallbackQuery, state: FSMContext):
    await call.answer("üö´ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    ub_username = call.data.split(":")[1]
    await show_management_panel(call, ub_username, state)

@router.callback_query(F.data.startswith("delete_ub_execute:"), UserBotSetup.ConfirmDeleteUserBot)
async def cq_delete_ub_execute(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.answer()

    await call.message.edit_caption(
        caption="üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–∞...</b>\n\n<blockquote>–≠—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.</blockquote>",
        reply_markup=kb.get_loading_keyboard()
    )

    ub_username = call.data.split(":")[1]
    
    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data:
        await call.message.edit_caption(
            caption="‚ùå <b>–û—à–∏–±–∫–∞:</b> –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.",
            reply_markup=kb.get_back_to_main_panel_keyboard()
        )
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "deleting" –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —É–¥–∞–ª–µ–Ω–∏—è
    await db.update_userbot_status(ub_username, "deleting")
    
    res = await sm.delete_userbot_full(ub_username, ub_data['server_ip'])
    
    if res["success"]:
        user_data = {"id": call.from_user.id, "full_name": call.from_user.full_name}
        server_details = server_config.get_servers().get(ub_data['server_ip'], {})
        log_data = {
            "user_data": user_data,
            "ub_info": {"name": ub_username},
            "server_info": {"ip": ub_data['server_ip'], "code": server_details.get("code", "N/A")}
        }
        await log_event(bot, "deletion_by_owner", log_data)
        
        await _show_main_panel(bot=bot, chat_id=call.message.chat.id, user_id=call.from_user.id,
            user_name=call.from_user.full_name, state=state, message_id=call.message.message_id
        )
    else:
        error_message = res.get('message', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')
        await call.message.edit_caption(
            caption=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:</b>\n\n<pre>{html.quote(error_message)}</pre>",
            reply_markup=kb.get_back_to_main_panel_keyboard()
        )

@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(call: types.CallbackQuery, bot: Bot, state: FSMContext):
    user_id = call.from_user.id
    
    try:
        member = await bot.get_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
        if member.status not in ["left", "kicked"]:
            await call.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
            await call.message.delete()
            await call.answer("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞ /start")
        else:
            await call.answer("üö´ –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
    except Exception as e:
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ: {e}")

@router.callback_query(F.data.startswith("share_panel_start:"))
async def cq_share_panel_start(call: types.CallbackQuery, state: FSMContext):
    logger.info(f"share_panel_start: chat.type={getattr(call.message.chat, 'type', None)}, user={call.from_user.id}")
    if getattr(call.message.chat, 'type', None) != "private":
        await call.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–∞–Ω–µ–ª—å—é' —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.", show_alert=True)
        return
    ub_username = call.data.split(":")[1]
    await state.set_state(UserBotShare.WaitingForShareUserID)
    await state.update_data(ub_username=ub_username, message_id_to_edit=call.message.message_id)
    text = "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º —é–∑–µ—Ä–±–æ—Ç–æ–º."
    markup = kb.get_cancel_revoke_shared_keyboard(ub_username)
    await call.message.edit_caption(caption=text, reply_markup=markup)
    await call.answer()

@router.message(StateFilter(UserBotShare.WaitingForShareUserID))
async def msg_process_share_user_id(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    ub_username = data.get("ub_username")
    message_id_to_edit = data.get("message_id_to_edit")
    await message.delete()
    if not message.text or not message.text.isdigit():
        await bot.edit_message_caption(caption="‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            chat_id=message.chat.id, message_id=message_id_to_edit,
            reply_markup=kb.get_cancel_revoke_shared_keyboard(ub_username)
        )
        return
    share_user_id = int(message.text)
    if share_user_id == message.from_user.id:
        await bot.edit_message_caption(caption="‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–∞–Ω–µ–ª—å—é —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.",
            chat_id=message.chat.id, message_id=message_id_to_edit)
        await show_management_panel(message, ub_username, state)
        return
    if await db.has_userbot_shared_access(ub_username, share_user_id):
        await bot.edit_message_caption(caption="‚ùóÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.",
            chat_id=message.chat.id, message_id=message_id_to_edit)
        await show_management_panel(message, ub_username, state)
        return
    await state.update_data(share_user_id=share_user_id)
    await state.set_state(UserBotShare.ConfirmingShare)
    user = await bot.get_chat(share_user_id)
    user_display = f"@{user.username}" if user.username else user.full_name
    text = f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ <code>{html.quote(ub_username)}</code> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {html.quote(user_display)} (<code>{share_user_id}</code>)?"
    markup = kb.get_confirm_share_panel_keyboard(ub_username, share_user_id)
    await bot.edit_message_caption(caption=text, chat_id=message.chat.id, message_id=message_id_to_edit, reply_markup=markup)

@router.callback_query(F.data.startswith("confirm_share_panel:"), UserBotShare.ConfirmingShare)
async def cq_confirm_share_panel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    _, ub_username, share_user_id_str = call.data.split(":")
    share_user_id = int(share_user_id_str)
    owner = call.from_user
    text = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {html.quote(owner.full_name)} (<code>{owner.id}</code>) —Ö–æ—á–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–æ–º <code>{html.quote(ub_username)}</code>.\n\n"
            "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –¥–æ—Å—Ç—É–ø? –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.")
    markup = kb.get_accept_share_panel_keyboard(ub_username, owner.id)
    
    try:
        await bot.send_message(chat_id=share_user_id, text=text, reply_markup=markup)
        await call.message.edit_caption(caption="‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...", reply_markup=kb.get_back_to_main_panel_keyboard())
    except TelegramForbiddenError:
        await call.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.", show_alert=True)
        await call.message.edit_caption(caption="‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", reply_markup=kb.get_back_to_main_panel_keyboard())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {share_user_id}: {e}")
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", show_alert=True)
        await call.message.edit_caption(caption="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", reply_markup=kb.get_back_to_main_panel_keyboard())
    
    await state.clear()

@router.callback_query(F.data.startswith("accept_share_panel:"), F.chat.type == "private")
async def cq_accept_share_panel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    _, ub_username, owner_id_str = call.data.split(":")
    await db.add_userbot_shared_access(ub_username, call.from_user.id)
    
    try:
        owner_id = int(owner_id_str)
        sharer_data_log = {"id": owner_id, "full_name": (await bot.get_chat(owner_id)).full_name}
        user_data_log = {"id": call.from_user.id, "full_name": call.from_user.full_name}
        ub_info_log = {"name": ub_username}
        log_data = {"sharer_data": sharer_data_log, "user_data": user_data_log, "ub_info": ub_info_log}
        await log_event(bot, "panel_shared_accepted", log_data)
    except Exception as e:
        logging.error(f"Failed to log panel share event: {e}")

    await call.answer("‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º —é–∑–µ—Ä–±–æ—Ç–æ–º.", show_alert=True)
    await show_management_panel(call, ub_username, state)
    
    try:
        await bot.send_message(chat_id=int(owner_id_str), text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{call.from_user.id}</code> –ø—Ä–∏–Ω—è–ª –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ <code>{html.quote(ub_username)}</code>.")
    except TelegramForbiddenError:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id_str} –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id_str}: {e}")

@router.callback_query(F.data.startswith("accept_share_panel:"))
async def cq_accept_share_panel_fallback(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    chat = getattr(call.message, "chat", None)
    if chat and chat.type == "private":
        await cq_accept_share_panel(call, state, bot)
    else:
        await call.answer(
            "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–∞–Ω–µ–ª—å—é' —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
            show_alert=True
        )

@router.callback_query(F.data.startswith("decline_share_panel:"), F.chat.type == "private")
async def cq_decline_share_panel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    await call.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.", show_alert=True)
    await call.message.edit_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —ç—Ç–∏–º —é–∑–µ—Ä–±–æ—Ç–æ–º.")

@router.callback_query(F.data.startswith("decline_share_panel:"), F.chat.type != "private")
async def cq_decline_share_panel_in_chat(call: types.CallbackQuery):
    await call.answer(
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–∞–Ω–µ–ª—å—é' —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
        show_alert=True
    )

@router.message(Command("ping"))
async def cmd_ping(message: types.Message):
    start_time = time.perf_counter()
    msg = await message.reply("...")
    end_time = time.perf_counter()
    delay = (end_time - start_time) * 1000
    await msg.edit_text(f"üèì <b>–ü–æ–Ω–≥!</b>\n–ó–∞–¥–µ—Ä–∂–∫–∞: <code>{delay:.2f} –º—Å</code>")
   
@router.message(Command("review"), F.chat.type == "private")
async def cmd_review(message: types.Message, state: FSMContext):
    text = (
        "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ SharkHost</b>\n\n"
        "‚ÑπÔ∏è –í –æ—Ç–∑—ã–≤–µ –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å SharkHost, –∫–∞–∫–∏–µ –æ—Ç–ª–∏—á–∏—è –∑–∞–º–µ—Ç–∏–ª–∏ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ —Ç.–¥.\n\n"
        "üìÖ –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –Ω–∞ @SharkHost_reviews."
    )
    sent_message = await message.reply(text, reply_markup=kb.get_cancel_review_keyboard())
    await state.update_data(original_bot_message_id=sent_message.message_id)
    await state.set_state(UserReview.WaitingForReview)

@router.message(Command("review"), F.chat.type != "private")
async def cmd_review_in_chat(message: types.Message):
    key = (message.chat.id, message.from_user.id)
    if review_warned_users[key]:
        return
    await message.reply(
        "‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ /review —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º."
    )
    review_warned_users[key] = True

@router.message(F.chat.type != "private")
async def reset_review_warn_flag(message: types.Message):
    if message.text and message.text.strip().startswith("/review"):
        return
    key = (message.chat.id, message.from_user.id)
    if review_warned_users[key]:
        review_warned_users[key] = False

@router.callback_query(F.data == "cancel_review", StateFilter(UserReview.WaitingForReview))
async def cq_cancel_review(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")

@router.message(StateFilter(UserReview.WaitingForReview))
async def process_review_text(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    original_bot_message_id = data.get("original_bot_message_id")
    
    await state.clear()
    admins = get_all_admins()
    
    for admin_id in admins:
        try:
            forwarded_msg = await bot.forward_message(
                chat_id=admin_id, from_chat_id=message.chat.id, message_id=message.message_id
            )
            await bot.send_message(
                chat_id=admin_id, text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?",
                reply_to_message_id=forwarded_msg.message_id,
                reply_markup=kb.get_review_approval_keyboard(message.from_user.id, message.message_id)
            )
        except TelegramForbiddenError:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            
    await message.reply("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    
    if original_bot_message_id:
        try:
            await bot.edit_message_reply_markup(
                chat_id=message.chat.id, message_id=original_bot_message_id, reply_markup=None
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç–∑—ã–≤–æ–º: {e}")

@router.message(Command("commits"))
async def cmd_commits(message: types.Message):
    text, markup = await _get_commits_list_message()
    await message.answer(text, reply_markup=markup)

@router.callback_query(F.data.startswith("view_commit:"))
async def cq_view_commit(call: types.CallbackQuery):
    await call.answer()
    commit_id = call.data.split(":")[1]
    await _display_commit_details(call, commit_id)

@router.callback_query(F.data.startswith("vote_commit:"))
async def cq_vote_commit(call: types.CallbackQuery):
    _, commit_id, vote_type_str = call.data.split(":")
    vote_type = int(vote_type_str)
    
    await db.set_vote(commit_id, call.from_user.id, vote_type)
    
    alert_text = "–í–∞—à üëç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∫–æ–º–º–∏—Ç!" if vote_type == 1 else "–í–∞—à üëé –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∫–æ–º–º–∏—Ç!"
    await call.answer(alert_text, show_alert=False)
    
    await _display_commit_details(call, commit_id)

@router.callback_query(F.data == "back_to_commits")
async def cq_back_to_commits(call: types.CallbackQuery):
    await call.answer()
    text, markup = await _get_commits_list_message()
    await call.message.edit_text(text, reply_markup=markup)

@router.callback_query(F.data == "hide_commits")
async def cq_hide_commits(call: types.CallbackQuery):
    await call.answer()
    await call.message.delete()

async def _get_commits_list_message():
    commits = await db.get_all_commits()
    if not commits:
        return "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</b>\n\n–ü–æ–∫–∞ –Ω–µ –±—ã–ª–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞.", None
    
    text = "<b>üìú –ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–º–∏—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π."
    markup = kb.get_commits_list_keyboard(commits)
    return text, markup

async def _send_commit_details_new_message(bot: Bot, chat_id: int, commit_id: str, user_id_for_admin_check: int):
    commit = await db.get_commit_by_id(commit_id)
    if not commit:
        await bot.send_message(chat_id, "‚ùå –≠—Ç–æ—Ç –∫–æ–º–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        return

    admin_name = html.quote(commit['admin_name'])
    admin_info = f"<a href='tg://user?id={commit['admin_id']}'>{admin_name}</a>"
    if commit['admin_username']:
        admin_info += f" (@{html.quote(commit['admin_username'])})"
    
    try:
        locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
    except locale.Error:
        pass

    commit_date = datetime.strptime(commit['created_at'], '%Y-%m-%d %H:%M:%S')
    formatted_date = commit_date.strftime('%d %B %Y –≤ %H:%M')
    
    vote_counts = await db.get_vote_counts(commit_id)
    is_admin = user_id_for_admin_check in get_all_admins()

    text = (f"<b>Commit <code>#{commit['commit_id']}</code> by {admin_info}</b>\n\n"
            f"üïï <b>–î–∞—Ç–∞ –∫–æ–º–º–∏—Ç–∞:</b> {formatted_date}\n\n"
            f"<b>‚úçÔ∏è ChangeLog:</b>\n"
            f"<blockquote>{html.quote(commit['commit_text'])}</blockquote>")
    
    markup = kb.get_commit_details_keyboard(commit_id, vote_counts['likes'], vote_counts['dislikes'], is_admin)
    await bot.send_message(chat_id, text, reply_markup=markup, disable_web_page_preview=True)

async def _display_commit_details(call: types.CallbackQuery, commit_id: str):
    commit = await db.get_commit_by_id(commit_id)
    if not commit:
        await call.message.edit_text("‚ùå –≠—Ç–æ—Ç –∫–æ–º–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.")
        return

    admin_name = html.quote(commit['admin_name'])
    admin_info = f"<a href='tg://user?id={commit['admin_id']}'>{admin_name}</a>"
    if commit['admin_username']:
        admin_info += f" (@{html.quote(commit['admin_username'])})"
    
    try:
        locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
    except locale.Error:
        pass

    commit_date = commit.get('created_at')
    formatted_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if isinstance(commit_date, datetime):
        formatted_date = commit_date.strftime('%d %B %Y –≤ %H:%M')
    
    vote_counts = await db.get_vote_counts(commit_id)
    is_admin = call.from_user.id in get_all_admins()

    text = (f"<b>Commit <code>#{commit['commit_id']}</code> by {admin_info}</b>\n\n"
            f"üïï <b>–î–∞—Ç–∞ –∫–æ–º–º–∏—Ç–∞:</b> {formatted_date}\n\n"
            f"<b>‚úçÔ∏è ChangeLog:</b>\n"
            f"<blockquote>{html.quote(commit['commit_text'])}</blockquote>")
    
    markup = kb.get_commit_details_keyboard(commit_id, vote_counts['likes'], vote_counts['dislikes'], is_admin)
    
    try:
        await call.message.edit_text(text, reply_markup=markup, disable_web_page_preview=True)
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–º–º–∏—Ç–∞: {e}")
         
@router.inline_query(F.query.startswith("exec"))
async def inline_exec_handler(inline_query: InlineQuery):
    user_id = inline_query.from_user.id
    user_bots = await db.get_userbots_by_tg_id(user_id)

    if not user_bots:
        result = InlineQueryResultArticle(id=str(user_id), title="–û—à–∏–±–∫–∞", description="–£ –≤–∞—Å –Ω–µ—Ç —é–∑–µ—Ä–±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.", input_message_content=InputTextMessageContent(message_text="‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —é–∑–µ—Ä–±–æ—Ç–∞.</b>", parse_mode="HTML"))
        await inline_query.answer([result], cache_time=1, is_personal=True)
        return

    the_only_bot = user_bots[0]
    ub_username = the_only_bot['ub_username']
    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data or ub_data.get('tg_user_id') != user_id:
        result = InlineQueryResultArticle(id=str(user_id), title="–û—à–∏–±–∫–∞", description="–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª.", input_message_content=InputTextMessageContent(message_text="‚ùå <b>–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª.</b>", parse_mode="HTML"))
        await inline_query.answer([result], cache_time=1, is_personal=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–±–æ—Ç–∞ - —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤–æ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
    if ub_data.get('status') == 'installing':
        result = InlineQueryResultArticle(
            id=str(user_id), 
            title="‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", 
            description="–¢–µ—Ä–º–∏–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
            input_message_content=InputTextMessageContent(
                message_text="‚è≥ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —é–∑–µ—Ä–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n–¢–µ—Ä–º–∏–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.", 
                parse_mode="HTML"
            )
        )
        await inline_query.answer([result], cache_time=1, is_personal=True)
        return
    
    if ub_data.get('status') == 'deleting':
        result = InlineQueryResultArticle(
            id=str(user_id), 
            title="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", 
            description="–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è",
            input_message_content=InputTextMessageContent(
                message_text="üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</b>\n\n–¢–µ—Ä–º–∏–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–∞.", 
                parse_mode="HTML"
            )
        )
        await inline_query.answer([result], cache_time=1, is_personal=True)
        return

    command_str = inline_query.query[len("exec"):].strip()

    if not command_str:
        result = InlineQueryResultArticle(id=str(user_id), title="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", description="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", input_message_content=InputTextMessageContent(message_text="‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ `exec ` –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."))
        await inline_query.answer([result], cache_time=1, is_personal=True)
        return
        
    server_ip = the_only_bot['server_ip']
    system_user = the_only_bot['ub_username']

    res = await sm.run_command_async(command_str, server_ip, timeout=60, user=system_user)
    
    output = res.get('output', '')
    error = res.get('error', '')
    exit_code = res.get('exit_status', 'N/A')

    header = (
        f"<b>–ö–æ–º–∞–Ω–¥–∞:</b> <pre>{html.quote(command_str)}</pre>\n"
        f"<b>–ö–æ–¥ –≤—ã—Ö–æ–¥–∞:</b> <code>{exit_code}</code>\n"
    )
    
    full_content = ""
    if output:
        full_content += f"\n<b>STDOUT:</b>\n{html.quote(output)}"
    if error:
        full_content += f"\n<b>STDERR:</b>\n{html.quote(error)}"
    if not output and not error:
        full_content = "\n<i>(–ù–µ—Ç –≤—ã–≤–æ–¥–∞ –≤ STDOUT –∏–ª–∏ STDERR)</i>"

    content_prefix = "<pre>"
    content_suffix = "</pre>"
    TELEGRAM_MSG_LIMIT = 4096
    
    available_space = TELEGRAM_MSG_LIMIT - len(header) - len(content_prefix) - len(content_suffix)

    if len(full_content) > available_space:
        truncated_content = full_content[:available_space - 15] + "\n[...–æ–±—Ä–µ–∑–∞–Ω–æ]"
    else:
        truncated_content = full_content
    
    if full_content.strip() and not full_content.startswith("\n<i>"):
        response_text = header + content_prefix + truncated_content + content_suffix
    else:
        response_text = header + truncated_content
        
    result = InlineQueryResultArticle(id=str(user_id), title=f"–í—ã–ø–æ–ª–Ω–∏—Ç—å: {command_str[:50]}...", description="–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã", input_message_content=InputTextMessageContent(message_text=response_text, parse_mode="HTML"))

    try:
        await inline_query.answer([result], cache_time=1, is_personal=True)
    except TelegramBadRequest as e:
        if "query is too old" in str(e) or "query ID is invalid" in str(e):
            return
        else:
            raise

@router.callback_query(F.data.startswith("revoke_shared_access:"))
async def cq_revoke_shared_access(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    await state.set_state(UserBotShare.ConfirmingRevoke)
    await state.update_data(ub_username=ub_username)
    text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–æ–º <code>{html.quote(ub_username)}</code>?"
    markup = kb.get_confirm_revoke_shared_keyboard(ub_username)
    await call.message.edit_caption(caption=text, reply_markup=markup)
    await call.answer()

@router.callback_query(F.data.startswith("confirm_revoke_shared:"), UserBotShare.ConfirmingRevoke)
async def cq_confirm_revoke_shared(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    ub_username = call.data.split(":")[1]
    await db.remove_userbot_shared_access(ub_username, call.from_user.id)
    await state.clear()
    await call.message.edit_caption(
        caption=f"‚úÖ –í—ã –±–æ–ª—å—à–µ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ —é–∑–µ—Ä–±–æ—Ç–æ–º <code>{html.quote(ub_username)}</code>.",
        reply_markup=kb.get_back_to_main_panel_keyboard()
    )
    await call.answer()

@router.callback_query(F.data.startswith("cancel_revoke_shared:"), UserBotShare.ConfirmingRevoke)
async def cq_cancel_revoke_shared(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    await state.clear()
    await show_management_panel(call, ub_username, state)
    await call.answer()

@router.callback_query(F.data.startswith("owner_revoke_shared:"))
async def cq_owner_revoke_shared(call: types.CallbackQuery, state: FSMContext):
    _, ub_username, shared_id = call.data.split(":")
    shared_id = int(shared_id)
    await db.remove_userbot_shared_access(ub_username, shared_id)
    await call.answer("–î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω.", show_alert=True)
    await show_management_panel(call, ub_username, state)

def check_panel_owner(call, owner_id: int) -> bool:
    if call.from_user.id != owner_id:
        import asyncio
        coro = call.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–∞–Ω–µ–ª—å!", show_alert=True)
        if asyncio.iscoroutine(coro):
            asyncio.create_task(coro)
        return False
    return True

@router.callback_query(F.data.startswith("shared_reject_access:"))
async def cq_shared_reject_access(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    ub_username = call.data.split(":")[1]
    await db.remove_userbot_shared_access(ub_username, call.from_user.id)
    await call.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏.", show_alert=True)
    ub_data = await db.get_userbot_data(ub_username)
    owner_id = ub_data.get('tg_user_id') if ub_data else None
    if owner_id and owner_id != call.from_user.id:
        user = call.from_user
        user_display = f"@{user.username}" if user.username else user.full_name
        try:
            await bot.send_message(owner_id, f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display} (<code>{user.id}</code>) –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ <code>{html.quote(ub_username)}</code>.")
        except Exception:
            pass
    await _show_main_panel(bot=bot, chat_id=call.message.chat.id, user_id=call.from_user.id, user_name=call.from_user.full_name, state=state, message_id=call.message.message_id)

def get_cancel_revoke_shared_keyboard(ub_username: str):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_share_panel:{ub_username}")
    return builder.as_markup()

@router.callback_query(F.data.startswith("cancel_share_panel:"))
async def cq_cancel_share_panel(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    await state.clear()
    await show_management_panel(call, ub_username, state)
    await call.answer()

@router.callback_query(F.data.startswith("accept_share_panel:"), F.chat.type == "private")
async def cq_accept_share_panel(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    _, ub_username, owner_id_str = call.data.split(":")
    await db.add_userbot_shared_access(ub_username, call.from_user.id)
    
    try:
        owner_id = int(owner_id_str)
        sharer_data_log = {"id": owner_id, "full_name": (await bot.get_chat(owner_id)).full_name}
        user_data_log = {"id": call.from_user.id, "full_name": call.from_user.full_name}
        ub_info_log = {"name": ub_username}
        log_data = {"sharer_data": sharer_data_log, "user_data": user_data_log, "ub_info": ub_info_log}
        await log_event(bot, "panel_shared_accepted", log_data)
    except Exception as e:
        logging.error(f"Failed to log panel share event: {e}")

    await call.answer("‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–∏–º —é–∑–µ—Ä–±–æ—Ç–æ–º.", show_alert=True)
    await show_management_panel(call, ub_username, state)
    
    try:
        await bot.send_message(chat_id=int(owner_id_str), text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{call.from_user.id}</code> –ø—Ä–∏–Ω—è–ª –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ <code>{html.quote(ub_username)}</code>.")
    except TelegramForbiddenError:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id_str} –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –¥–æ—Å—Ç—É–ø–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ {owner_id_str}: {e}")

@router.callback_query(F.data.startswith("manage_shared_access:"))
async def cq_manage_shared_access(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    shared_users = await db.get_userbot_shared_users(ub_username)
    if not shared_users:
        await call.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º.", show_alert=True)
        await show_management_panel(call, ub_username, state)
        return
    text = "<b>–£ –∫–æ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø:</b>"
    buttons = []
    for shared_id in shared_users:
        shared_user = await db.get_user_data(shared_id)
        if shared_user:
            name = shared_user.get('full_name') or f"ID {shared_id}"
            username = shared_user.get('username')
            user_display = f"@{username}" if username else name
        else:
            user_display = f"ID {shared_id}"
        text += f"\n‚Ä¢ {user_display} (<code>{shared_id}</code>)"
        buttons.append([
            InlineKeyboardButton(
                text=f"‚ùå {user_display}",
                callback_data=f"remove_shared_access:{ub_username}:{shared_id}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_panel:{ub_username}")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.edit_caption(caption=text, reply_markup=markup)
    await call.answer()

@router.callback_query(F.data.startswith("remove_shared_access:"))
async def cq_remove_shared_access(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    _, ub_username, shared_id = call.data.split(":")
    shared_id = int(shared_id)
    await db.remove_userbot_shared_access(ub_username, shared_id)

    try:
        sharer_data_log = {"id": call.from_user.id, "full_name": call.from_user.full_name}
        shared_user_data = await db.get_user_data(shared_id)
        user_data_log = {"id": shared_id, "full_name": shared_user_data.get("full_name") if shared_user_data else str(shared_id)}
        ub_info_log = {"name": ub_username}
        log_data = {"sharer_data": sharer_data_log, "user_data": user_data_log, "ub_info": ub_info_log}
        await log_event(bot, "panel_share_revoked", log_data)
    except Exception as e:
        logging.error(f"Failed to log panel revoke event: {e}")

    await call.answer("–î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω.", show_alert=True)
    await cq_manage_shared_access(call, state)

@router.callback_query(F.data.startswith("back_to_panel:"))
async def cq_back_to_panel_from_shared(call: types.CallbackQuery, state: FSMContext):
    ub_username = call.data.split(":")[1]
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())
    await show_management_panel(call, ub_username, state)
    await call.answer()

@router.callback_query(F.data.startswith("reinstall_ub_start_request:"))
async def cq_reinstall_ub_start_request_fallback(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    parts = call.data.split(":")
    if len(parts) < 3:
        await call.answer("–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞–Ω–µ–ª—å.", show_alert=True)
        return
    _, ub_username, owner_id_str = parts
    owner_id = int(owner_id_str)
    if not check_panel_owner(call, owner_id):
        return
    await call.answer("–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)

async def get_userbot_rom_usage(ub_username: str, server_ip: str) -> dict:
    home_dir = f"/home/{ub_username}"
    cmd = f"df -m {home_dir} | awk 'NR==2{{print $3, $2}}'"
    res = await sm.run_command_async(cmd, server_ip)
    if res.get('success') and res.get('output'):
        try:
            used, total = map(int, res['output'].strip().split())
            percent = int(used / total * 100) if total else 0
            return {'used': used, 'total': total, 'percent': percent}
        except Exception:
            pass
    return {'used': 0, 'total': 0, 'percent': 0}
    
@router.callback_query(F.data.startswith("health_check_retry:"))
async def cq_health_check_retry(call: types.CallbackQuery, state: FSMContext):
    await call.answer("–ü—Ä–æ–≤–µ—Ä—è—é —Å–Ω–æ–≤–∞...")
    await call.message.edit_reply_markup(reply_markup=kb.get_loading_keyboard())

    ub_username = call.data.split(":")[1]
    ub_data = await db.get_userbot_data(ub_username)
    
    if not ub_data:
        await call.answer("‚ùå –Æ–∑–µ—Ä–±–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        await _show_main_panel(call.bot, call.message.chat.id, call.from_user.id, call.from_user.full_name, state, call.message.message_id)
        return

    server_ip = ub_data['server_ip']
    service_name = f"hikka-{ub_username}.service"
    
    service_file_exists = await sm.check_systemd_file_exists(service_name, server_ip)
    disk_space_ok = True  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

    if not service_file_exists or not disk_space_ok:
        error_text = (
            f"<b>üéõ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
            f"<i>üò¢ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è —Å–±–æ–∏ –≤ —Ä–∞–±–æ—Ç–µ —é–∑–µ—Ä–±–æ—Ç–∞/—Å–µ—Ä–≤–µ—Ä–∞.</i>\n\n"
            f"<b>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ <code>10-15</code> –º–∏–Ω—É—Ç</b>"
        )
        try:
            from config_manager import Config
            config = Config()
            admin_ids = getattr(config, 'SUPER_ADMIN_IDS', [])
            for admin_id in admin_ids:
                await bot.send_message(
                    admin_id,
                    f"‚ö†Ô∏è <b>–°–±–æ–π —é–∑–µ—Ä–±–æ—Ç–∞/—Å–µ—Ä–≤–µ—Ä–∞</b>\n\n"
                    f"chat_id: <code>{chat_id}</code>\n"
                    f"service_file_exists: <code>{service_file_exists}</code>\n"
                    f"disk_space_ok: <code>{disk_space_ok}</code>\n"
                    f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ."
                )
        except Exception as e:
            import logging
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º: {e}")
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"health_check_retry:{ub_username}")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_panel")
        await call.message.edit_caption(caption=error_text, reply_markup=builder.as_markup())
    else:
        await show_management_panel(call, ub_username, state)

class HerokuBackupType(CallbackData, prefix="heroku_backup_type"):
    ub_username: str
    owner_id: int
    backup_type: str

@router.callback_query(F.data.startswith("heroku_backup:"))
async def cq_heroku_backup_start(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    _, ub_username, owner_id_str = call.data.split(":")
    owner_id = int(owner_id_str)
    if not check_panel_owner(call, owner_id):
        return
    builder = InlineKeyboardBuilder()
    for btype, label in [("all", "all"), ("db", "db"), ("mods", "mods")]:
        builder.row(InlineKeyboardButton(text=label, callback_data=HerokuBackupType(ub_username=ub_username, owner_id=owner_id, backup_type=btype).pack()))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"refresh_panel:{ub_username}:{owner_id}"))
    await call.message.edit_caption(
        caption="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ë–µ–∫–∞–ø–∞:</b>",
        reply_markup=builder.as_markup()
    )
    await call.answer()

@router.callback_query(HerokuBackupType.filter())
async def cq_heroku_backup_type(call: types.CallbackQuery, callback_data: HerokuBackupType, bot: Bot):
    ub_username = callback_data.ub_username
    owner_id = callback_data.owner_id
    backup_type = callback_data.backup_type
    if not check_panel_owner(call, owner_id):
        return
    await call.answer("–°–æ–∑–¥–∞—é –ë–µ–∫–∞–ø...", show_alert=False)
    await call.message.edit_caption(
        caption="<b>‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ë–µ–∫–∞–ø–∞...</b>",
        reply_markup=kb.get_loading_keyboard()
    )
    ub_data = await db.get_userbot_data(ub_username)
    if not ub_data or ub_data.get("ub_type") != "heroku":
        await call.message.edit_caption(
            caption="‚ùå –ë–µ–∫–∞–ø –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Heroku-—é–∑–µ—Ä–±–æ—Ç–æ–≤.",
            reply_markup=kb.get_back_to_main_panel_keyboard()
        )
        return
    server_ip = ub_data["server_ip"]
    try:
        backup_path, backup_name = await sm.make_heroku_backup_ssh(ub_username, server_ip, backup_type)
        with open(backup_path, "rb") as f:
            await bot.send_document(
                chat_id=call.from_user.id,
                document=FSInputFile(backup_path, filename=backup_name),
                caption=f"<b>Backup ({backup_type})</b>",
                parse_mode="HTML"
            )
        sm.cleanup_heroku_backup_file(backup_path)
        await call.message.edit_caption(
            caption=f"‚úÖ –ë–µ–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –§–∞–π–ª: <code>{backup_name}</code>",
            reply_markup=kb.get_back_to_main_panel_keyboard()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –ë–µ–∫–∞–ø–∞: {e}\n{traceback.format_exc()}")
        # Truncate error message to avoid Telegram caption length limit
        error_msg = str(e)
        if len(error_msg) > 200:
            error_msg = error_msg[:197] + "..."
        
        await call.message.edit_caption(
            caption=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ë–µ–∫–∞–ø–∞: <code>{py_html.escape(error_msg)}</code>",
            reply_markup=kb.get_back_to_main_panel_keyboard()
        )

@router.callback_query(F.data.startswith("select_server:"), UserBotSetup.ChoosingServer)
async def cq_select_server(call: types.CallbackQuery, state: FSMContext):
    server_ip = call.data.split(":")[1]
    await _proceed_to_type_selection(call, state, server_ip)

async def _proceed_to_type_selection(call: types.CallbackQuery, state: FSMContext, server_ip: str):
    from bot import BANNER_FILE_IDS
    await state.update_data(server_ip=server_ip)
    text = (
        "<b>[–®–∞–≥ 2/3] –í—ã–±–æ—Ä —Ç–∏–ø–∞ —é–∑–µ—Ä–±–æ—Ç–∞</b>\n\n"
        "<blockquote><b>üåò Hikka</b> - The most fresh and updateable developer-oriented Telegram userbot</blockquote>\n\n"
        "<blockquote><b>ü™ê Heroku</b> ‚Äî is the latest fork of Hikka with updates and endless fun!</blockquote>\n\n"
        "<blockquote><b>ü¶ä FoxUserbot</b> - Telegram Userbot built with Kurigram (Pyrogram).</blockquote>\n\n"
        "<blockquote><b>üåô Legacy</b> ‚Äî  modern, developer-oriented Telegram userbot with numerous bug fixes and up-to-date improvements, continuously maintained for the latest features and stability.</blockquote>"
    )
    photo = BANNER_FILE_IDS.get("select_userbot") or FSInputFile("banners/select_userbot.png")
    
    data = await state.get_data()
    message_id = data.get("message_id_to_edit", call.message.message_id)

    try:
        await call.bot.edit_message_media(
            chat_id=call.message.chat.id, message_id=message_id,
            media=InputMediaPhoto(media=photo, caption=text),
            reply_markup=kb.get_select_ub_type_keyboard(server_ip),
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await call.answer()
        else:
            raise

    await state.set_state(UserBotSetup.ChoosingUserBotType)

def parse_ps_etime_to_human(etime: str) -> str:
    etime = etime.strip()
    days = 0
    hours = 0
    minutes = 0
    if '-' in etime:
        days_part, time_part = etime.split('-', 1)
        try:
            days = int(days_part)
        except Exception:
            days = 0
    else:
        time_part = etime
    parts = time_part.split(':')
    if len(parts) == 3:
        hours, minutes, _ = parts
    elif len(parts) == 2:
        hours, minutes = parts
    else:
        hours = 0
        minutes = 0
    try:
        hours = int(hours)
        minutes = int(minutes)
    except Exception:
        hours = 0
        minutes = 0
    result = []
    if days:
        result.append(f"{days}d")
    if hours:
        result.append(f"{hours}h")
    if minutes:
        result.append(f"{minutes}m")
    return ' '.join(result) if result else '~1m'

async def _generate_and_save_token(user: types.User) -> str:
    username = user.username or f"user{user.id}"
    random_part = secrets.token_hex(18)
    new_token = f"{username}:{user.id}:{random_part}"
    await db.set_api_token(user.id, new_token)
    return new_token
    
def _mask_token(token: str) -> str:
    if not token or ':' not in token:
        return "********************"
    parts = token.split(':')
    if len(parts) < 3:
        return "********************"
    return f"{parts[0]}:{parts[1]}:{'*' * len(parts[2])}"

async def _get_or_create_token(user: types.User) -> str:
    user_data = await db.get_user_data(user.id)
    token = user_data.get("api_token")
    if not token:
        token = await _generate_and_save_token(user)
    return token

@router.callback_query(F.data == "api_panel_show")
async def cq_show_api_panel(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    token = await _get_or_create_token(call.from_user)
    
    text = (
        "üîë <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π API-—Ç–æ–∫–µ–Ω</b>\n\n"
        "–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API SharkHost –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n\n"
        "<b>–ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω!</b>\n\n"
        "–í–∞—à —Ç–æ–∫–µ–Ω:\n"
        f"<code>{html.quote(_mask_token(token))}</code>"
    )
    
    markup = kb.get_api_token_keyboard(is_shown=False)
    await call.message.edit_caption(caption=text, reply_markup=markup)
    await state.set_state(APITokenManagement.TokenHidden)
    
@router.callback_query(F.data == "toggle_api_token_visibility", StateFilter(APITokenManagement.TokenHidden, APITokenManagement.TokenShown))
async def cq_toggle_api_token_visibility(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    token = await _get_or_create_token(call.from_user)
    
    is_currently_shown = current_state == APITokenManagement.TokenShown
    
    new_text_token = _mask_token(token) if is_currently_shown else token
    new_is_shown = not is_currently_shown
    new_state = APITokenManagement.TokenHidden if is_currently_shown else APITokenManagement.TokenShown

    text = (
        "üîë <b>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π API-—Ç–æ–∫–µ–Ω</b>\n\n"
        "–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API SharkHost –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n\n"
        "<b>–ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω!</b>\n\n"
        "–í–∞—à —Ç–æ–∫–µ–Ω:\n"
        f"<code>{html.quote(new_text_token)}</code>"
    )
    
    markup = kb.get_api_token_keyboard(is_shown=new_is_shown)
    await call.message.edit_caption(caption=text, reply_markup=markup)
    await state.set_state(new_state)

@router.callback_query(F.data == "regenerate_api_token", StateFilter(APITokenManagement.TokenHidden, APITokenManagement.TokenShown))
async def cq_regenerate_api_token(call: types.CallbackQuery, state: FSMContext):
    user = call.from_user
    new_token = secrets.token_urlsafe(32)
    
    if await db.regenerate_user_token(user.id, new_token):
        await state.update_data(token=new_token)
        await call.answer("‚úÖ API —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await cq_show_api_panel(call, state)
    else:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞", show_alert=True)



# --- END OF FILE user_handlers.py ---