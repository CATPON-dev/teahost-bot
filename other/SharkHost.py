# meta developer: @EXPERT_CATPON

import aiohttp
import asyncio
from herokutl.tl.types import Message
from .. import loader, utils
import datetime

def parse_ps_etime_to_human(etime: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç :–∑ 
    """
    etime = etime.strip()
    days = 0
    hours = 0
    minutes = 0
    if '-' in etime:
        days_part, time_part = etime.split('-', 1)
        try:
            days = int(days_part)
        except Exception:
            days = 0
    else:
        time_part = etime
    parts = time_part.split(':')
    if len(parts) == 3:
        hours, minutes, _ = parts
    elif len(parts) == 2:
        hours, minutes = parts
    else:
        hours = 0
        minutes = 0
    try:
        hours = int(hours)
        minutes = int(minutes)
    except Exception:
        hours = 0
        minutes = 0
    result = []
    if days:
        result.append(f"{days}d")
    if hours:
        result.append(f"{hours}h")
    if minutes:
        result.append(f"{minutes}m")
    return ' '.join(result) if result else '~1m'

def format_iso_datetime(dt_str: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–¥
    """
    try:
        dt = datetime.datetime.fromisoformat(dt_str)
        return dt.strftime('%d.%m.%Y –≤ %H:%M')
    except Exception:
        return dt_str

def days_ago_text(dt_str: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        dt = datetime.datetime.fromisoformat(dt_str)
        now = datetime.datetime.now(dt.tzinfo) if dt.tzinfo else datetime.datetime.now()
        days = (now.date() - dt.date()).days
        if days < 0:
            days = 0
        if days % 10 == 1 and days % 100 != 11:
            word = '–¥–µ–Ω—å'
        elif 2 <= days % 10 <= 4 and (days % 100 < 10 or days % 100 >= 20):
            word = '–¥–Ω—è'
        else:
            word = '–¥–Ω–µ–π'
        return f"{days} {word} –Ω–∞–∑–∞–¥"
    except Exception:
        return dt_str

@loader.tds
class SharkHostMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–±–æ—Ç–æ–º SharkHost."""

    strings = {
        "name": "SharkHost",
        "config_api_url": "URL API SharkHost.",
        "config_api_token": "–í–∞—à API —Ç–æ–∫–µ–Ω. @SharkHostBot.",
        "token_not_set": "üö´ <b>API —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>",
        "getting_info": "üîÑ <b>–£–∑–Ω–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ...</b>",
        "no_ub": "üö´ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–±–æ—Ç–∞.</b>",
        "no_ub_name": "üö´ <b>Error, UserBot not found name.</b>",
        "started": "‚úÖ Started",
        "stopped": "‚ùå Stopped",
        "restarted": "üîÑ Restarted",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "api_url",
                "http://158.160.35.181:2000",
                lambda: self.strings("config_api_url"),
                validator=loader.validators.Link(),
            ),
            loader.ConfigValue(
                "api_token",
                None,
                lambda: self.strings("config_api_token"),
                validator=loader.validators.Hidden(),
            ),
        )

    async def _request(self, method: str, path: str, **kwargs):
        if not self.config["api_token"]:
            return self.strings("token_not_set")

        headers = {"X-API-Token": self.config["api_token"]}
        url = f"{self.config['api_url'].strip('/')}/api/v1/{path}"

        async with aiohttp.ClientSession(headers=headers) as session:
            try:
                async with session.request(method, url, **kwargs) as resp:
                    data = await resp.json()
                    if data.get("success"):
                        return data.get("data")
                    else:
                        error = data.get("error", {})
                        return (f"üö´ <b>API –û—à–∏–±–∫–∞:</b> <code>{error.get('code', 'UNKNOWN')}</code>\n"
                                f"<blockquote>üóíÔ∏è <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {utils.escape_html(error.get('message', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π'))}</blockquote>")
            except aiohttp.ClientError as e:
                return f"üö´ <b>–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:</b> <blockquote>{e}</blockquote>"

    async def _get_my_userbot(self):
        response = await self._request("GET", "userbots")
        if isinstance(response, str):
            return response
        
        userbots = response.get("userbots", [])
        if not userbots:
            return self.strings("no_ub")
        
        return userbots[0]

    @loader.command(ru_doc="[–∫–æ–¥] - Show servers status")
    async def sstatuscmd(self, message: Message):
        """[code] - Show servers status"""
        await utils.answer(message, "üîÑ <b>–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å—Ç–∞—Ç—É—Å—ã...</b>")
        args = utils.get_args_raw(message)
        params = {"code": args} if args else {}
        
        response = await self._request("GET", "servers/status", params=params)

        if isinstance(response, str):
            await utils.answer(message, response)
            return

        servers = response.get("servers", [])
        if not servers:
            await utils.answer(message, "‚úÖ <b>–°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>")
            return

        result = "üì° <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ SharkHost:</b>\n"
        for server in servers:
            result += (
                f"\n<blockquote>"
                f"{server['flag']} <b>{server['name']}</b> (<code>{server['code']}</code>)\n\n"
                f"üìç <b>–õ–æ–∫–∞—Ü–∏—è:</b> <i>{server['location']}</i>\n"
                f"üö¶ <b>–°—Ç–∞—Ç—É—Å:</b> <code>{server['status']}</code>\n"
                f"‚öôÔ∏è <b>CPU:</b> {server['cpu_usage']} | <b>RAM:</b> {server['ram_usage']}\n"
                f"üíæ <b>–î–∏—Å–∫:</b> {server['disk_usage']}\n"
                f"ü§ñ <b>–Æ–∑–µ—Ä–±–æ—Ç—ã:</b> {server['slots']}"
                f"</blockquote>"
            )
        
        await utils.answer(message, result)

    @loader.command(ru_doc="<reply/ID/—é–∑–µ—Ä–Ω–µ–π–º> - Show user info")
    async def scheckcmd(self, message: Message):
        """<reply/ID/username> - Show user info"""
        identifier = utils.get_args_raw(message)

        if not identifier:
            if message.is_reply:
                reply = await message.get_reply_message()
                identifier = str(reply.sender_id)
            else:
                await utils.answer(message, "üö´ <b>–£–∫–∞–∂–∏—Ç–µ ID/—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</b>")
                return

        await utils.answer(message, "üîÑ <b>–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...</b>")
        response = await self._request("GET", f"users/{identifier}")

        if isinstance(response, str):
            await utils.answer(message, response)
            return
        
        owner = response.get('owner', {})
        userbot = response.get('userbot')
        
        owner_username = owner.get('username') or owner.get('id', 'N/A')
        
        result = (f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b> <a href=\"tg://user?id={owner.get('id')}\">{utils.escape_html(str(owner_username))}</a>:\n\n")
        
        result += "<blockquote>"
        result += f"<b> ‚Ä¢ ID:</b> <code>{owner.get('id', 'N/A')}</code>\n"
        result += f"<b> ‚Ä¢ –ü–æ–ª–Ω–æ–µ –∏–º—è:</b> <i>{utils.escape_html(owner.get('full_name') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</i>\n"
        reg_date = owner.get('registered_at')
        result += f"<b> ‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è:</b> <i>{utils.escape_html(days_ago_text(reg_date)) if reg_date else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</i>"
        result += "</blockquote>\n"
        
        if userbot:
            result += "\nü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–±–æ—Ç–µ:</b>\n<blockquote>"
            result += (
                f"<b> ‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è:</b> <code>{userbot.get('ub_username')}</code>\n"
                f"<b> ‚Ä¢ –¢–∏–ø:</b> <code>{userbot.get('ub_type')}</code>\n"
                f"<b> ‚Ä¢ –°—Ç–∞—Ç—É—Å:</b> <code>{userbot.get('status')}</code>\n"
                f"<b> ‚Ä¢ –°–µ—Ä–≤–µ—Ä:</b> <code>{userbot.get('server_code')}</code>\n"
                f"<b> ‚Ä¢ –°–æ–∑–¥–∞–ª:</b> <i>{utils.escape_html(days_ago_text(userbot.get('created_at'))) if userbot.get('created_at') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</i>"
            )
            uptime = userbot.get('uptime')
            if uptime:
                result += f"\n<b> ‚Ä¢ –ê–ø—Ç–∞–π–º:</b> <code>{utils.escape_html(parse_ps_etime_to_human(uptime))}</code>"
            result += "</blockquote>"
        else:
            result += "<blockquote>‚ÑπÔ∏è <i>–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —é–∑–µ—Ä–±–æ—Ç–∞.</i></blockquote>"

        await utils.answer(message, result)
    
    @loader.command(ru_doc="Open menu action userbot")
    async def smanagecmd(self, message: Message):
        """Open menu action userbot"""
        status_message = await utils.answer(message, self.strings("getting_info"))

        userbot_data = await self._get_my_userbot()

        if isinstance(userbot_data, str):
            await utils.answer(status_message, userbot_data)
            return
        
        ub_username = userbot_data.get("ub_username")
        ub_status = userbot_data.get("status")

        if not ub_username or not ub_status:
            await utils.answer(status_message, self.strings("no_ub_name"))
            return

        await self.inline.form(
            message=status_message,
            **self._get_manage_menu_content(ub_username, ub_status)
        )

    def _get_manage_menu_content(self, ub_username: str, status: str) -> dict:
        text = (f"üïπÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–±–æ—Ç–æ–º</b> <code>{utils.escape_html(ub_username)}</code>\n"
                f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> <code>{status}</code>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        
        markup = []
        row = []
        if status == "running":
            row.append({"text": "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "callback": self._manage_callback, "args": (ub_username, "stop")})
            row.append({"text": "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", "callback": self._manage_callback, "args": (ub_username, "restart")})
        else: 
            row.append({"text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", "callback": self._manage_callback, "args": (ub_username, "start")})
            row.append({"text": "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", "callback": self._manage_callback, "args": (ub_username, "restart")})
        
        markup.append(row)
        markup.append([{"text": "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "action": "close"}])

        return {"text": text, "reply_markup": markup}

    async def _manage_callback(self, call, ub_username: str, action: str):
        feedback = {
            "start": self.strings("started"),
            "stop": self.strings("stopped"),
            "restart": self.strings("restarted")
        }
        await call.edit(feedback.get(action, "‚úÖ –ì–æ—Ç–æ–≤–æ!"))
        
        payload = {"action": action}
        await self._request("POST", f"userbots/{ub_username}/manage", json=payload)

        new_info_response = await self._get_my_userbot()
        if isinstance(new_info_response, str) or not new_info_response.get("ub_username"):
            await call.edit(
                "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–µ–Ω—é. –ó–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –≤—ã–∑–æ–≤–∏—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=None
            )
            return

        new_status = new_info_response.get("status")
        await call.edit(**self._get_manage_menu_content(ub_username, new_status))
    
    async def _direct_manage_action(self, message: Message, action: str):
        status_message = await utils.answer(message, self.strings("getting_info"))
        
        userbot_data = await self._get_my_userbot()
        if isinstance(userbot_data, str):
            await utils.answer(status_message, userbot_data)
            return

        ub_username = userbot_data.get("ub_username")
        if not ub_username:
            await utils.answer(status_message, self.strings("no_ub_name"))
            return

        feedback = {
            "start": self.strings("started"),
            "stop": self.strings("stopped"),
            "restart": self.strings("restarted")
        }
        await utils.answer(status_message, feedback.get(action, "‚úÖ –ì–æ—Ç–æ–≤–æ!"))
        
        payload = {"action": action}
        await self._request("POST", f"userbots/{ub_username}/manage", json=payload)


    @loader.command(ru_doc="Start userbot")
    async def sstartcmd(self, message: Message):
        """Start userbot"""
        await self._direct_manage_action(message, "start")

    @loader.command(ru_doc="Stop userbot")
    async def sstopcmd(self, message: Message):
        """Stop userbot"""
        await self._direct_manage_action(message, "stop")

    @loader.command(ru_doc="Restart userbot")
    async def srestartcmd(self, message: Message):
        """Restart userbot"""
        await self._direct_manage_action(message, "restart")