
import logging
from typing import Callable, Dict, Any, Awaitable

from aiogram import BaseMiddleware, Bot, types
from aiogram.types import Update, Message, CallbackQuery, User

from admin_manager import get_all_admins
from config_manager import config
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest


def get_subscribe_keyboard(channel_id: str):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{channel_id.lstrip('@')}")
    builder.button(text="üîÑ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")
    builder.adjust(1)
    return builder.as_markup()


class SubscriptionMiddleware(BaseMiddleware):
    def __init__(self, channel_id: str):
        self.channel_id = channel_id

    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª—é–±—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if isinstance(event, types.CallbackQuery) and event.data == "refresh_public_status":
            return await handler(event, data)

        user: User | None = data.get("event_from_user")

        if user and user.id in get_all_admins():
            return await handler(event, data)
        
        if config.TEST_MODE:
            logging.info(f"Test mode is ON. Ignoring update from non-admin user {user.id if user else 'Unknown'}.")
            return 

        if not user:
            return await handler(event, data) 
       
        bot: Bot = data.get("bot")
        try:
            member = await bot.get_chat_member(chat_id=self.channel_id, user_id=user.id)
            if member.status in ["left", "kicked"]:
                text = (
                    "<b>üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!</b>\n\n"
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª."
                )
                markup = get_subscribe_keyboard(self.channel_id)

                if isinstance(event, Message):
                    await event.answer(text, reply_markup=markup, disable_web_page_preview=True)
                elif isinstance(event, CallbackQuery):
                    await event.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.", show_alert=True)
                
                return
        except TelegramBadRequest as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {self.channel_id}")
        except Exception as e:
            logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ SubscriptionMiddleware: {e}", exc_info=True)

        return await handler(event, data)