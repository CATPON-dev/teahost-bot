import logging
from aiogram import Bot, html
from aiogram.exceptions import TelegramAPIError

from config_manager import config

EVENT_TAGS = {
    # Lifecycle
    "installation_success": "#–Æ–ó–ï–†–ë–û–¢_–°–û–ó–î–ê–ù",
    "deletion_by_owner": "#–Æ–ó–ï–†–ë–û–¢_–£–î–ê–õ–ï–ù",
    "deletion_by_admin": "#–£–î–ê–õ–ï–ù–û_–ê–î–ú–ò–ù–û–ú",
    "new_user_registered": "#–ù–û–í–´–ô_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨",
    
    # User Actions
    "user_action_manage_ub": "#–î–ï–ô–°–¢–í–ò–ï_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø",
    "userbot_reinstalled": "#–Æ–ó–ï–†–ë–û–¢_–ü–ï–†–ï–£–°–¢–ê–ù–û–í–õ–ï–ù",
    
    # Admin Actions
    "user_banned": "#–ë–ê–ù",
    "user_unbanned": "#–†–ê–ó–ë–ê–ù",
    "userbot_transferred": "#–ü–ï–†–ï–î–ê–ß–ê_–Æ–ó–ï–†–ë–û–¢–ê",
    
    # System & Health
    "installation_failed": "#–û–®–ò–ë–ö–ê_–£–°–¢–ê–ù–û–í–ö–ò",
    "server_unreachable": "#–°–ï–†–í–ï–†_–ù–ï–î–û–°–¢–£–ü–ï–ù",
    "server_recovered": "#–°–ï–†–í–ï–†_–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù",
    "inactive_session_warning": "#–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï_–°–ï–°–°–ò–Ø",
    
    # Access Control
    "panel_shared_accepted": "#–î–û–°–¢–£–ü_–í–´–î–ê–ù",
    "panel_share_revoked": "#–î–û–°–¢–£–ü_–û–¢–û–ó–í–ê–ù",
    
    # Maintenance
    "maintenance_mode_on": "#–¢–ï–•_–†–ê–ë–û–¢–´_–í–ö–õ",
    "maintenance_mode_off": "#–¢–ï–•_–†–ê–ë–û–¢–´_–í–´–ö–õ",
    "server_settings_changed": "#–ù–ê–°–¢–†–û–ô–ö–ò_–°–ï–†–í–ï–†–ê"
}

def _format_user_link(user_data: dict) -> str:
    if not user_data or not user_data.get("id"):
        return "N/A"
    
    user_id = user_data["id"]
    full_name = html.quote(user_data.get("full_name", str(user_id)))
    
    return f'<a href="tg://user?id={user_id}">{full_name}</a> (<code>{user_id}</code>)'

async def log_to_channel(bot: Bot, text: str):
    if not config.LOG_CHANNEL_ID:
        logging.warning("LOG_CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
        return

    try:
        await bot.send_message(
            chat_id=config.LOG_CHANNEL_ID,
            text=text,
            disable_notification=True,
            parse_mode="HTML"
        )
    except TelegramAPIError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª {config.LOG_CHANNEL_ID}: {e}")

async def log_event(bot: Bot, event_type: str, data: dict):
    if not config.LOG_CHANNEL_ID:
        return

    tag = EVENT_TAGS.get(event_type, f"#{event_type.upper()}")

    admin_link = _format_user_link(data.get('admin_data'))
    user_link = _format_user_link(data.get('user_data'))
    new_owner_link = _format_user_link(data.get('new_owner_data'))
    sharer_link = _format_user_link(data.get('sharer_data')) 
    
    ub_info = data.get('ub_info', {})
    ub_name = html.quote(ub_info.get('name', 'N/A'))
    ub_type = html.quote(ub_info.get('type', 'N/A'))
    
    server_info = data.get('server_info', {})
    server_ip = html.quote(server_info.get('ip', 'N/A'))
    server_code = html.quote(server_info.get('code', 'N/A'))
    
    reason = html.quote(data.get('reason', ''))
    error_text = html.quote(data.get('error', ''))
    details_text = html.quote(data.get('details', ''))
    action_text = html.quote(data.get('action', ''))

    message_body = ""

    if event_type == "installation_success":
        message_body = (
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_link}\n"
            f"<b>–Æ–∑–µ—Ä–±–æ—Ç:</b> <code>{ub_name}</code> ({ub_type.capitalize()})\n"
            f"<b>–°–µ—Ä–≤–µ—Ä:</b> {server_code}"
        )
    elif event_type == "deletion_by_owner":
        message_body = (
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_link}\n"
            f"<b>–Æ–∑–µ—Ä–±–æ—Ç:</b> <code>{ub_name}</code>"
        )
    elif event_type == "new_user_registered":
        message_body = f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_link}"
        
    elif event_type == "user_action_manage_ub":
        action_map = {"start": "üöÄ –ó–∞–ø—É—Å—Ç–∏–ª", "stop": "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏–ª", "restart": "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª"}
        action_str = action_map.get(action_text, action_text)
        message_body = f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_link}\n<b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action_str} —é–∑–µ—Ä–±–æ—Ç–∞ <code>{ub_name}</code>"

    elif event_type == "user_banned":
        message_body = f"<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {admin_link}\n<b>–ó–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_link}"
    
    elif event_type == "user_unbanned":
        message_body = f"<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {admin_link}\n<b>–†–∞–∑–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_link}"
    
    elif event_type == "deletion_by_admin":
        message_body = (
            f"<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {admin_link}\n"
            f"<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {user_link}\n"
            f"<b>–Æ–∑–µ—Ä–±–æ—Ç:</b> <code>{ub_name}</code>\n"
            f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
        )
    
    elif event_type == "server_unreachable":
        message_body = f"<b>–°–µ—Ä–≤–µ—Ä:</b> {server_code} (<code>{server_ip}</code>)\n<b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    elif event_type == "server_recovered":
        message_body = f"<b>–°–µ—Ä–≤–µ—Ä:</b> {server_code} (<code>{server_ip}</code>)\n<b>–°—Ç–∞—Ç—É—Å:</b> –°–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏. –í–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

    elif event_type == "inactive_session_warning":
        message_body = f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_link}\n<b>–Æ–∑–µ—Ä–±–æ—Ç:</b> <code>{ub_name}</code>\n<b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–µ—Å—Å–∏–∏."
        
    elif event_type == "panel_shared_accepted":
        message_body = (
            f"<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {sharer_link}\n"
            f"<b>–í—ã–¥–∞–ª –¥–æ—Å—Ç—É–ø –∫</b> <code>{ub_name}</code>\n"
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</b> {user_link}"
        )
    
    elif event_type == "panel_share_revoked":
        message_body = (
            f"<b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {sharer_link}\n"
            f"<b>–û—Ç–æ–∑–≤–∞–ª –¥–æ—Å—Ç—É–ø —É</b> {user_link}\n"
            f"<b>–∫ —é–∑–µ—Ä–±–æ—Ç—É:</b> <code>{ub_name}</code>"
        )
    
    else:
        if event_type == "installation_failed":
            message_body = (f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_link}\n<b>–Æ–∑–µ—Ä–±–æ—Ç:</b> <code>{ub_name}</code>\n<b>–û—à–∏–±–∫–∞:</b> <pre>{error_text}</pre>")
        elif event_type == "maintenance_mode_on":
            message_body = f"<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {admin_link}\n<b>–°—Ç–∞—Ç—É—Å:</b> –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç"
        elif event_type == "maintenance_mode_off":
            message_body = f"<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {admin_link}\n<b>–°—Ç–∞—Ç—É—Å:</b> –í—ã–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç"
        elif event_type == "server_settings_changed":
            message_body = (f"<b>–°–µ—Ä–≤–µ—Ä:</b> {server_code}\n<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {admin_link}\n<b>–î–µ—Ç–∞–ª–∏:</b> {details_text}")
        elif event_type == "userbot_reinstalled":
            message_body = f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_link}\n<b>–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏–ª —é–∑–µ—Ä–±–æ—Ç–∞:</b> <code>{ub_name}</code>"
        elif event_type == "userbot_transferred":
            message_body = (f"<b>–°—Ç–∞—Ä—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü:</b> {user_link}\n<b>–ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü:</b> {new_owner_link}\n<b>–Æ–∑–µ—Ä–±–æ—Ç:</b> <code>{ub_name}</code>")
        else:
            message_body = f"‚ÑπÔ∏è <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {html.quote(event_type)}</b>\n\n<pre>{html.quote(str(data))}</pre>"

    if message_body:
        full_text = f"{tag}\n\n{message_body}"
        await log_to_channel(bot, full_text)